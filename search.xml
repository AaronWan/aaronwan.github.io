<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>流程-活动节点</title>
      <link href="2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/"/>
      <url>2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="活动包括子流程和任务"><a href="#活动包括子流程和任务" class="headerlink" title="活动包括子流程和任务"></a>活动包括子流程和任务</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%B4%BB%E5%8A%A8%E7%B1%BB%E5%9B%BE.png" alt="活动类图"></p><h2 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h2><ol><li><p>isForCompensation: boolean = false</p><p>标识此活动是否用于补偿目的的标志。 如果为false，则此活动作为正常执行流的结果执行。如果为true，则此活动仅在检测到补偿事件并在补偿事件可见性作用域下启动时激活</p></li><li><p>loopCharacteristics: LoopCharac- teristics [0..1]</p><p>一个活动可以执行一次，也可以重复执行。如果是重复的，活动必段定义 loopCharacteristics(如果流程isExecutable属性被设置为true)。</p></li><li><p>resources: ResourceRole [0..*]</p><p>定义将执行或将负责活动的资源。资源，例如执行者，可以以特定的个人、团体、组织角色或职位或组织的形式指定。</p></li><li><p>default: SequenceFlow [0..1]</p><p>默认分支， 当其它条件不满足时 默认走该分支， 该分支不用配置条件。</p></li><li><p>ioSpecification: Input OutputSpecification [0..1]</p><p>定义了活动的输入和输出以及输入集和输出集。</p></li><li><p>properties: Property [0..*]</p><p>其它属性</p></li><li><p>boundaryEventRefs: BoundaryEvent [0..*]</p><p>绑定的边界事件</p></li><li><p>dataInputAssociations: DataIn- putAssociation [0..*]</p><p>可选引用。数据输入关联定义了如何填充活动的输入输出规范的数据输入。</p></li><li><p>dataOutputAssociations: DataOutputAssociation [0..*]</p><p>可选引用。对数据输出关联.</p></li><li><p>startQuantity: integer = 1</p><p>缺省值为1。不小于1。这个属性定义了在活动开始之前不能到达的令牌的数量。</p></li><li><p>completionQuantity: integer = 1</p><p>缺省值为1。不小于1。这个属性定义了从活动中生成的令牌的数量。这个数目的令牌将在任何传出序列流(假设满足任何序列流条件)时发送。</p></li></ol><h2 id="活动与资源的关系"><a href="#活动与资源的关系" class="headerlink" title="活动与资源的关系"></a>活动与资源的关系</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%B4%BB%E5%8A%A8%E4%B8%8E%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B3%E7%B3%BB.png"></p><h2 id="任务的标示"><a href="#任务的标示" class="headerlink" title="任务的标示"></a>任务的标示</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%A0%87%E7%A4%BA.png" alt="image.png"></p><h2 id="任务类图"><a href="#任务类图" class="headerlink" title="任务类图"></a>任务类图</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png" alt="image.png"></p><h2 id="任务类型说明"><a href="#任务类型说明" class="headerlink" title="任务类型说明"></a>任务类型说明</h2><h3 id="服务任务-Service-Task"><a href="#服务任务-Service-Task" class="headerlink" title="服务任务 Service Task"></a>服务任务 Service Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绑定一个操作，且有输入与输出</span><br><span class="line">implementation: string &#x3D; ##webService</span><br><span class="line">operationRef: Operation [0..1]</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用外部服务</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1%E8%A1%A8%E7%A4%BA.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="发送消息任务-Send-Task"><a href="#发送消息任务-Send-Task" class="headerlink" title="发送消息任务 Send Task"></a>发送消息任务 Send Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绑定一个消息， 但不是必须的</span><br><span class="line">messageRef: Message [0..1]</span><br><span class="line">operationRef: Operation [0..1]</span><br><span class="line">implementation: string &#x3D; ##webService</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送消息</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1%E6%A0%87%E7%A4%BA.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="接收消息的任务-Receive-Task"><a href="#接收消息的任务-Receive-Task" class="headerlink" title="接收消息的任务 Receive Task"></a>接收消息的任务 Receive Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绑定一个消息， 但不是必须的</span><br><span class="line">messageRef: Message [0..1]</span><br><span class="line">operationRef: Operation [0..1]</span><br><span class="line">implementation: string &#x3D; ##webService</span><br><span class="line">instantiate: boolean &#x3D; false</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接收消息， 当接收到消息时自动完成任务；</span><br><span class="line">通常用于启用一个实例；如果想要触发一个实例，需要将属性 instantiate 设置成 true</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1.png"> </p><p>可作为开始节点 ：</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%8F%AF%E4%BB%A5%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%9A%84%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1.png"></p></li></ol><h3 id="业务规则节点-Business-Rule-Task"><a href="#业务规则节点-Business-Rule-Task" class="headerlink" title="业务规则节点 Business Rule Task"></a>业务规则节点 Business Rule Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &#96;&#96;&#96;</span><br><span class="line">2. 作用</span><br><span class="line">   &#96;&#96;&#96;textmate</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1.png"></p></li></ol><h3 id="脚本任务-Script-Task"><a href="#脚本任务-Script-Task" class="headerlink" title="脚本任务 Script Task"></a>脚本任务 Script Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script：string[0..1] 脚本， 如果没有配置脚本， 当作一个空任务进行执行</span><br><span class="line">scriptFormat: string[0..1] 脚本格式，该值一定是一个 mime-type 类型， 如果脚本指定了， 该值需要必须配置</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行指定的脚本</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E8%84%9A%E6%9C%AC%E4%BB%BB%E5%8A%A1.png"></p></li></ol><h3 id="人工任务-User-Task"><a href="#人工任务-User-Task" class="headerlink" title="人工任务 User Task"></a>人工任务 User Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation: string &#x3D; ##unspecified  一个webservice提供实现</span><br><span class="line">renderings: Rendering [0..*] 这个属性充当一个hook，它允许bpmn采用者使用bpmn扩展机制来指定任务呈现方式。</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人员参与完成任务，该节点的实现可以交由业务方根据业务场景自行实现</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%B7%A5%E8%8A%82%E7%82%B9%E6%A0%87%E7%A4%BA.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%B7%A5%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9B%BE.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%91%98%E8%8A%82%E7%82%B9%E4%BA%BA%E5%91%98%E4%BF%A1%E6%81%AF.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%B7%A5%E8%8A%82%E7%82%B9%E6%A1%88%E4%BE%8B.png"></p></li></ol><h3 id="操作任务-Manual-Task"><a href="#操作任务-Manual-Task" class="headerlink" title="操作任务 Manual Task"></a>操作任务 Manual Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只继承自Task，无其它属性</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不被引擎管理，可以理解为不受管的任务，即引擎不管理他的开始和结束；例如： 需要某一个人去给用户安装电话；</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1.png"></p></li><li><p>类图<br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="子流程-Call-SubProcess-Activity"><a href="#子流程-Call-SubProcess-Activity" class="headerlink" title="子流程 Call SubProcess Activity"></a>子流程 Call SubProcess Activity</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">triggeredByEvent: boolean &#x3D; false 是否有事件触发，即事件子流程</span><br><span class="line">method: Transaction- Method 事务子流程，该方法是用来提交或取消事务用的，如果是事务子流程，需要两个圈</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不被引擎管理，可以理解为不受管的任务，即引擎不管理他的开始和结束；例如： 需要某一个人去给用户安装电话；</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B1.png"> <img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B2.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B3.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B4.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%8B%E4%BB%B6%E5%AD%90%E6%B5%81%E7%A8%8B.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%8B%E4%BB%B6%E5%AD%90%E6%B5%81%E7%A8%8B2.png"></p></li></ol><ol start="5"><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B%E7%B1%BB%E5%9B%BE.png"></p></li><li><p>子流程案例</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B%E6%A1%88%E4%BE%8B.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%8B%E5%8A%A1%E5%AD%90%E6%B5%81%E7%A8%8B.png"></p></li></ol><h3 id="可被调用的-活动-Call-Activity"><a href="#可被调用的-活动-Call-Activity" class="headerlink" title="可被调用的 活动 Call Activity"></a>可被调用的 活动 Call Activity</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calledElement: CallableElement [0..1] ： CallableElements，GlobalTask</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用来引用全局的Task或流程</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%BC%95%E7%94%A8%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E7%9A%84UserTask.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%BC%95%E7%94%A8%E4%B8%80%E4%B8%AA%E6%B5%81%E7%A8%8B.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%BC%95%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AD%90%E6%B5%81%E7%A8%8B%E5%B1%95%E5%BC%80%E5%BD%A2%E5%BC%8F.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/CallActivity%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="可被引用的元素-CallableElements"><a href="#可被引用的元素-CallableElements" class="headerlink" title="可被引用的元素 CallableElements"></a>可被引用的元素 CallableElements</h3><p>   <img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%8F%AF%E8%A2%AB%E5%BC%95%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0.png"></p><h3 id="全局任务-Global-Task"><a href="#全局任务-Global-Task" class="headerlink" title="全局任务 Global Task"></a>全局任务 Global Task</h3><p>   <img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%85%A8%E5%B1%80%E4%BB%BB%E5%8A%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> BPMN </category>
          
          <category> 元素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BPMN </tag>
            
            <tag> Flow </tag>
            
            <tag> 流程 </tag>
            
            <tag> 流程引擎 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程-事件</title>
      <link href="2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/"/>
      <url>2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在流程产品中,比较重要的 元素 “事件” ,作为流程产品或技术的大牛们, 看了解几个;</p><p><img src="/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/images/%E4%BA%8B%E4%BB%B6.png" alt="事件"></p><p><img src="/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/images/%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9B%BE.png"></p><p>如果需要再详细的内容,请参考: <a href="https://www.omg.org/spec/BPMN/2.0.2/PDF">https://www.omg.org/spec/BPMN/2.0.2/PDF</a></p><p>优秀文章链接：</p><ul><li><a href="https://www.jianshu.com/u/fe00cda6c54e">dafengyiba 事件相关文章</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> BPMN </category>
          
          <category> 元素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BPMN </tag>
            
            <tag> Flow </tag>
            
            <tag> 流程 </tag>
            
            <tag> 流程引擎 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程引擎发展</title>
      <link href="2022/11/12/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E5%8F%91%E5%B1%95/"/>
      <url>2022/11/12/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E5%8F%91%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>第一代</th><th>第二代</th><th>第三代</th><th>第三代</th><th>第五代</th><th>第六代</th></tr></thead><tbody><tr><td>2003年， jBPM 1.0发布。<br/> 运行环境：J2EE 过程定义语言：jPDL(当时工作流厂商都有各自的过程定义语言和建模工具) 当时的主流的技术： applets, Swing桌面和EJB</td><td>2004年，jBPM 2.0发布<br/> 同时jBPM加入JBoss基金会. 运行环境：任何JAVA环境(POJO实现过程运行时)，不需要应用服务器</td><td>2005年, jBPM 3.0发布，支持BPEL<br/> - 过程定义语言：过程虚拟机 <br/> - 架构：与二代相比，架构发生了巨大变化。可以操作的业务功能大范围扩展，不仅通过JAVA实现状态机，而且支持建模; <br/> - HIBERNETE作为持久机制并同时提供会话对象的概念， <br/> - 工作流引擎所有的相关性交互都纳入<a href="https://docs.jboss.org/jbpm/v3.2/javadoc-jpdl/org/jbpm/JbpmContext.html">contextual block</a>范畴 <br/> 这为以后的工作流命令设计模式和命令拦截设计模式的广泛应用打下良好的基础 <br/></td><td>2009年， jBPM 4.0 alpha版发布.<br/> - PVM 成功工作流引擎的核心。 <br/> - 过程定义语言：BPMN, jPDL 和 BPEL <br/> - 因为团队人员离开并启动Activiti，正式版没能发布。 <br/> - 主要改进：      - 无状态的服务API      - 运行时和历史数据的分离：保证运行时持久的性能</td><td>2010年, Activiti 1发布<br/> 改变： <br/> - 版权从LGPL转到APACHE. - 过程定义语言：BPMN(唯一) - 从性能和扩展性加强PVM - 多租户支持 - 轻量级架构</td><td>2017年，flowable 6.0发布。<br/> 改变： <br/> - 过程模型：放弃PVM,使用原生BPMN，实现真正的动态过程执行和复杂的过程迁移 - 数据远完全抽象：支持NoSQL - CMMN支持 - 函数式工作流</td></tr><tr><td><br/></td><td><br/></td><td><br/></td><td>Tom Baeyens Effektif 诞生</td><td><br/></td><td><br/></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> BPMN </category>
          
          <category> 元素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BPMN </tag>
            
            <tag> Flow </tag>
            
            <tag> 流程 </tag>
            
            <tag> 流程引擎 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程-网关Gateway</title>
      <link href="2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/"/>
      <url>2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/</url>
      
        <content type="html"><![CDATA[<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">网关可以是流程的开端，也可以没有连出的线；</span><br><span class="line">网关可以有多个连入的线或多个连出的线<span class="comment">(即，它可以合并或分流)</span>。</span><br></pre></td></tr></table></figure><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E9%BB%98%E8%AE%A4%E7%BD%91%E5%85%B3.png" alt="默认网关"></p><h1 id="排它-独占-网关"><a href="#排它-独占-网关" class="headerlink" title="排它(独占)网关"></a>排它(独占)网关</h1><blockquote><p>Exclusive Gateway</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol><li>条件（所有分支）</li><li>是否为默认分支</li><li>分支的顺序</li></ol><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>选择第一个满足条件的分支</li><li>如果没有匹配的分支，选择默认分支</li></ol><h3 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E6%8E%92%E5%AE%83%E7%BD%91%E5%85%B3.png" alt="排它网关示意图"></p><h3 id="排它网关类图"><a href="#排它网关类图" class="headerlink" title="排它网关类图"></a>排它网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E6%8E%92%E5%AE%83%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="排它网关类图"></p><h1 id="包容网关"><a href="#包容网关" class="headerlink" title="包容网关"></a>包容网关</h1><blockquote><p>Inclusive Gateway</p></blockquote><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ol><li>条件（所有分支）</li><li>是否为默认分支</li><li>分支的顺序</li></ol><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h3><ol><li>选择一条和多条满足条件的分支</li><li>如果没有匹配的分支，选择默认分支</li><li>可以对多条进入的线进行汇集，汇集后再判断连出分支</li></ol><h3 id="表示-1"><a href="#表示-1" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%8C%85%E5%AE%B9%E7%BD%91%E5%85%B3.png" alt="包容网关"></p><h3 id="包容网关类图"><a href="#包容网关类图" class="headerlink" title="包容网关类图"></a>包容网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%8C%85%E5%AE%B9%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="包容网关类图"></p><h1 id="并行网关"><a href="#并行网关" class="headerlink" title="并行网关"></a>并行网关</h1><blockquote><p>Parallel Gateway</p></blockquote><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ol><li>多条连接的线</li><li>多条连出的线</li></ol><h3 id="规则-2"><a href="#规则-2" class="headerlink" title="规则"></a>规则</h3><ol><li>汇集， 并行节点 会 等待所有进入的线都到达时才向后流转</li><li>分发</li></ol><h3 id="表示-2"><a href="#表示-2" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3%E6%B1%87%E9%9B%86.png" alt="并行网关汇集"><br><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3%E5%88%86%E5%8F%91.png" alt="并行网关分发"></p><h3 id="并行网关类图"><a href="#并行网关类图" class="headerlink" title="并行网关类图"></a>并行网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3.png" alt="并行网关"></p><h1 id="复杂网关"><a href="#复杂网关" class="headerlink" title="复杂网关"></a>复杂网关</h1><blockquote><p>Complex Gateway</p></blockquote><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ol><li>指定向该节点要完成的连入线的占比或数量</li><li>多条连出的分支</li><li>分支需要配置条件表达式（默认分支除外）</li></ol><h3 id="规则-3"><a href="#规则-3" class="headerlink" title="规则"></a>规则</h3><ol><li>汇集，可以激活的条件（哪些进入的线被同步等待）满足后，进行第二步的分发（可以选择 其它未到达的分支 策略， 是直接取消，还是达到时再次激活当前网关）</li><li>分发</li></ol><h3 id="表示-3"><a href="#表示-3" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%A4%8D%E6%9D%82%E7%BD%91%E5%85%B3.png" alt="复杂网关"></p><h3 id="复杂网关类图"><a href="#复杂网关类图" class="headerlink" title="复杂网关类图"></a>复杂网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%A4%8D%E6%9D%82%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="复杂网关类图"></p><h1 id="事件网关"><a href="#事件网关" class="headerlink" title="事件网关"></a>事件网关</h1><blockquote><p>Event-Based Gateway</p></blockquote><h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><ol><li><p>实例化 true or false （如果 true， 可以没有连入的线 作为流程的开端，同时事件分支类型可以选择并行）</p></li><li><p>事件网关类型（并行，排它）</p><h3 id="规则-4"><a href="#规则-4" class="headerlink" title="规则"></a>规则</h3></li><li><p>多条分支连出 &gt;=2</p></li><li><p>分支需要配置事件 (只能是事件，不能是表达式)</p></li><li><p>支持的事件 Message, Signal, Timer, Conditional, and Multiple (which can only include the previous triggers)</p></li></ol><h3 id="表示-4"><a href="#表示-4" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B3.png"></p><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B31.png"><br><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B32.png"></p><p>实例化=true， 可以作为流程的开始</p><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%8F%AF%E4%BD%9C%E4%B8%BA%E6%B5%81%E7%A8%8B%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B3.png"></p><h3 id="复杂网关类图-1"><a href="#复杂网关类图-1" class="headerlink" title="复杂网关类图"></a>复杂网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="事件网关"></p>]]></content>
      
      
      <categories>
          
          <category> BPMN </category>
          
          <category> 元素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BPMN </tag>
            
            <tag> Flow </tag>
            
            <tag> 流程 </tag>
            
            <tag> 流程引擎 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BPMN2.0</title>
      <link href="2022/11/10/BPMN2.0/"/>
      <url>2022/11/10/BPMN2.0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Version 2.0</span><br><span class="line">OMG Document Number: formal/2011-01-03</span><br><span class="line">Standard document URL: http://www.omg.org/spec/BPMN/2.0</span><br></pre></td></tr></table></figure><p>一. 元素分类</p><table><thead><tr><th>分类</th></tr></thead><tbody><tr><td>事件 event</td></tr><tr><td>任务 task</td></tr><tr><td>子流程 sub-processes</td></tr><tr><td>CallActivity</td></tr><tr><td>网关 Gateway</td></tr><tr><td>泳道 Lane</td></tr><tr><td>数据 Data Object</td></tr><tr><td>消息,组,备注 Message,Group,Text Annotation</td></tr><tr><td>线 Sequence Flow</td></tr><tr><td>消息 Message Flow</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> BPMN </category>
          
          <category> 元素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BPMN </tag>
            
            <tag> Flow </tag>
            
            <tag> 流程 </tag>
            
            <tag> 流程引擎 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程好文章</title>
      <link href="2022/11/03/%E6%B5%81%E7%A8%8B%E5%A5%BD%E6%96%87%E7%AB%A0/"/>
      <url>2022/11/03/%E6%B5%81%E7%A8%8B%E5%A5%BD%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>一. 概念相关<br><a href="https://blog.csdn.net/qq_35427589/article/details/122678793">BPMN和DMN基本概念和使用案例</a></p><p>二. 产品及api学习</p><p><a href="https://docs.awspaas.com/user-manual/aws-pass-console-user-manual-process/">炎黄盈动@AWS PaaS流程文档</a></p>]]></content>
      
      
      <categories>
          
          <category> BPMN </category>
          
          <category> Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BPMN </tag>
            
            <tag> Flow </tag>
            
            <tag> 流程 </tag>
            
            <tag> 流程引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>道德经</title>
      <link href="2022/09/09/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
      <url>2022/09/09/%E9%81%93%E5%BE%B7%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一-老子"><a href="#一-老子" class="headerlink" title="一. 老子"></a>一. 老子</h1><p>老子，（前600年—前470年之后）姓李名耳，字伯阳，传说老子出生时就长有白色的眉毛及胡子， 所以被后人称为老子。<br>中国春秋时代思想家，楚国苦县厉乡曲仁里人，是我国古代伟大的哲学家和思想家、道家学派创始 人。其被唐皇武后封为太上老君，世界文化名人，世界百位历史名人之一，存世有《道德经》（又称《老<br>子》）。其作品的精华是朴素的辨证法，主张无为而治，其学说对中国哲学发展具有深刻影响。<br>在道教中，老子是三清尊神之一太上老君的第十八个化身，被尊为道祖。</p><h1 id="二-道德经"><a href="#二-道德经" class="headerlink" title="二. 道德经"></a>二. 道德经</h1><ol><li><p>道可道，非常道。名可名，非常名。无名天地之始。有名万物之母。故常无欲以观其妙。常有欲以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。</p></li><li><p>天下皆知美之为美，斯恶矣；皆知善之为善，斯不善已。故有无相生，难易相成，长短相形，高下相倾，音声相和，前後相随。是以圣人处无为之事，行不言之教。万物作焉而不辞。生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。</p></li><li><p>不尚贤， 使民不争。不贵难得之货，使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨；常使民无知、无欲，使夫智者不敢为也。为无为，则无不治。</p></li><li><p>道冲而用之，或不盈。渊兮似万物之宗。解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。</p></li><li><p>天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐[tuó]迭乎？虚而不屈，动而愈出。多言数穷，不如守中。</p></li><li><p>谷神不死是谓玄牝。玄牝之门是谓天地根。绵绵若存，用之不勤。</p></li><li><p>天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人後其身而身先，外其身而身存。非以其无私邪！故能成其私。</p></li><li><p>上善若水。水善利万物而不争，处众人之所恶，故几於道。居善地，心善渊，与善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。</p></li><li><p>持而盈之不如其己；揣而锐之不可长保；金玉满堂莫之能守；富贵而骄，自遗其咎。功遂身退，天之道。</p></li><li><p>载营魄抱一，能无离乎？专气致柔，能如婴儿乎？涤除玄览，能无疵乎？爱国治民，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎。</p></li><li><p>三十幅共一毂，当其无，有车之用。埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之以为用。</p></li><li><p>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂，难得之货令人行妨。是以圣人，为腹不为目，故去彼取此。</p></li><li><p>宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下。得之若惊失之若惊是谓宠辱若惊。何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患。故贵以身为天下，若可寄天下。爱以身为天下，若可托天下。</p></li><li><p>视之不见名曰夷。听之不闻名曰希。抟之不得名曰微。此三者不可致诘，故混而为一。其上不皦(jiǎo)，其下不昧，绳绳不可名，复归於无物。是谓无状之状，无物之象，是谓惚恍。迎之不见其首，随之不见其後。执古之道以御今之有。能知古始，是谓道纪。</p></li><li><p>古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。豫兮若冬涉川；犹兮若畏四邻；俨兮其若容；涣兮若冰之将释；敦兮其若朴；旷兮其若谷；混兮其若浊；澹兮其若海；飉(liáo,风的声音)兮若无止。孰能浊以静之徐清。孰能安以动之徐生。保此道者不欲盈。夫唯不盈故能蔽而新成。</p></li><li><p>致虚极守静笃。万物并作，吾以观复。夫物芸芸各复归其根。归根曰静，是谓复命；复命曰常，知常曰明。不知常，妄作凶。知常容，容乃公，公乃全，全乃天，天乃道，道乃久，没身不殆。</p></li><li><p>太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮其贵言，功成事遂，百姓皆谓∶我自然。</p></li><li><p>大道废有仁义；慧智出有大伪；六亲不和有孝慈；国家昏乱有忠臣。</p></li><li><p>绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有；此三者，以为文不足。故令有所属，见素抱朴少私寡欲。</p></li><li><p>绝学无忧，唯之与阿，相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其未央哉！众人熙熙如享太牢、如春登台。我独泊兮其未兆，如婴儿之未孩；儡儡(lěi,羸弱)兮若无所归。众人皆有馀，而我独若遗。我愚人之心也哉！沌沌兮。俗人昭昭，我独昏昏；俗人察察，我独闷闷。众人皆有以，而我独顽且鄙。我独异於人，而贵食母。</p></li><li><p>孔德之容惟道是从。道之为物惟恍惟惚。惚兮恍兮其中有象。恍兮惚兮其中有物。窈兮冥兮其中有精。其精甚真。其中有信。自古及今，其名不去以阅众甫。吾何以知众甫之状哉！以此。</p></li><li><p>曲则全，枉则直，洼则盈，敝则新少则得，多则惑。是以圣人抱一为天下式。不自见故明；不自是故彰；不自伐故有功；不自矜故长；夫唯不争，故天下莫能与之争。古之所谓∶曲则全者」岂虚言哉！诚全而归之。</p></li><li><p>希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况於人乎？故从事於道者，同於道。德者同於德。失者同於失。同於道者道亦乐得之；同於德者德亦乐得之；同於失者失於乐得之信不足焉有不信焉。</p></li><li><p>企者不立；跨者不行。自见者不明；自是者不彰。自伐者无功；自矜者不长。其在道也曰∶馀食赘形。物或恶之，故有道者不处。</p></li><li><p>有物混成先天地生。寂兮寥兮独立不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道。强为之名曰大。大曰逝，逝曰远，远曰反。故道大、天大、地大、人亦大。域中有大，而人居其一焉。人法地，地法天，天法道，道法自然。</p></li><li><p>重为轻根，静为躁君。是以君子终日行不离轻重。虽有荣观燕处超然。奈何万乘之主而以身轻天下。轻则失根，躁则失君。</p></li><li><p>善行无辙迹。善言无瑕谪。善数不用筹策。善闭无关楗而不可开。善结无绳约而不可解。是以圣人常善救人，故无弃人。常善救物，故无弃物。是谓袭明。故善人者不善人之师。不善人者善人之资。不贵其师、不爱其资，虽智大迷，是谓要妙。</p></li><li><p>知其雄，守其雌，为天下溪。为天下溪，常德不离，复归於婴儿。知其白，守其黑，为天下式。为天下式，常德不忒，复归於无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归於朴。朴散则为器，圣人用之则为官长。故大制不割。</p></li><li><p>将欲取天下而为之，吾见其不得已。天下神器，不可为也，为者败之，执者失之。夫物或行或随、或觑或吹、或强或羸、或挫或隳。是以圣人去甚、去奢、去泰。</p></li><li><p>以道佐人主者，不以兵强天下。其事好还。师之所处荆棘生焉。军之後必有凶年。善有果而已，不敢以取强。果而勿矜。果而勿伐。果而勿骄。果而不得已。果而勿强。物壮则老，是谓不道，不道早已。</p></li><li><p>夫佳兵者不祥之器，物或恶之，故有道者不处。君子居则贵左，用兵则贵右。兵者不祥之器，非君子之器，不得已而用之，恬淡为上。胜而不美，而美之者，是乐杀人。夫乐杀人者，则不可得志於天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右。言以丧礼处之。杀人之众，以悲哀泣之，战胜以丧礼处之。</p></li><li><p>道常无名。朴虽小天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。譬道之在天下，犹川谷之於江海。</p></li><li><p>知人者智，自知者明。胜人者有力，自胜者强。知足者富。强行者有志。不失其所者久。死而不亡者，寿。</p></li><li><p>大道泛兮，其可左右。万物恃之以生而不辞，功成而不名有。衣养万物而不为主，常无欲可名於小。万物归焉，而不为主，可名为大。以其终不自为大，故能成其大。</p></li><li><p>执大象天下往。往而不害安平太。乐与饵，过客止。道之出口淡乎其无味。视之不足见。听之不足闻。用之不足既。</p></li><li><p>将欲歙之，必固张之。将欲弱之，必固强之。将欲废之，必固兴之。将欲取之，必固与之。是谓微明。柔弱胜刚强。鱼不可脱於渊，国之利器不可以示人。</p></li><li><p>道常无为，而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名之朴，夫亦将无欲。不欲以静，天下将自定。</p></li><li><p>上德不德是以有德。下德不失德是以无德。上德无为而无以为。下德无为而有以为。上仁为之而无以为。上义为之而有以为。上礼为之而莫之以应，则攘臂而扔之。故失道而後德。失德而後仁。失仁而後义。失义而後礼。夫礼者忠信之薄而乱之首。前识者，道之华而愚之始。是以大丈夫，处其厚不居其薄。处其实，不居其华。故去彼取此。</p></li><li><p>昔之得一者。天得一以清。地得一以宁。神得一以灵。谷得一以盈。万物得一以生。侯王得一以为天下贞。其致之。天无以清将恐裂。地无以宁将恐废。神无以灵将恐歇。谷无以盈将恐竭。万物无以生将恐灭。侯王无以贞将恐蹶。故贵以贱为本，高以下为基。是以侯王自称孤、寡、不谷。此非以贱为本邪？非乎。至誉无誉。不欲琭琭如玉，珞珞如石。</p></li><li><p>反者道之动。弱者道之用。天下万物生於有，有生於无。</p></li><li><p>上士闻道勤而行之。中士闻道若存若亡。下士闻道大笑之。不笑不足以为道。故建言有之。明道若昧。进道若退。夷道若纇。上德若谷。大白若辱。广德若不足。建德若偷。质真若渝。大方无隅。大器晚成。大音希声。大象无形。道隐无名。夫唯道善贷且成。</p></li><li><p>道生一。一生二。二生三。三生万物。万物负阴而抱阳，冲气以为和。人之所恶，唯孤、寡不谷，而王公以为称，故物或损之而益，或益之而损。人之所教，我亦教之，强梁者，不得其死。吾将以为教父。</p></li><li><p>天下之至柔，驰骋天下之至坚。无有入无间，吾是以知无为之有益。不言之教，无为之益天下希及之。</p></li><li><p>名与身孰亲。身与货孰多。得与亡孰病。是故甚爱必大费。多藏必厚亡。知足不辱。知止不殆。可以长久。</p></li><li><p>大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈。大巧若拙。大辩若讷。静胜躁，寒胜热。清静为天下正。</p></li><li><p>天下有道，却走马以粪。天下无道，戎马生於郊。祸莫大於不知足。咎莫大於欲得。故知足之足常足矣。</p></li><li><p>不出户知天下。不窥牖见天道。其出弥远，其知弥少。是以圣人不行而知。不见而明。不为而成。</p></li><li><p>为学日益。为道日损。损之又损，以至於无为。无为而不为。取天下常以无事，及其有事，不足以取天下。</p></li><li><p>圣人无常心。以百姓心为心。善者吾善之。不善者吾亦善之，德善。信者吾信之。不信者吾亦信之，德信。圣人在天下，歙歙(xīxī,无所偏执的样子)焉，为天下浑其心。百姓皆注其耳目，圣人皆孩之。</p></li><li><p>出生入死。生之徒，十有三。死之徒，十有三。人之生，动之於死地，亦十有三。夫何故？以其生生之厚。盖闻善摄生者，陆行不遇凶虎，入军不被甲兵。凶无所投其角。虎无所用其爪。兵无所容其刃。夫何故？以其无死地。</p></li><li><p>道生之，德畜之，物形之，势成之。是以万物莫不尊道，而贵德。道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之。长之育之。亭之毒之。养之覆之。生而不有，为而不恃，长而不宰。是谓玄德。</p></li><li><p>天下有始，以为天下母。既得其母，以知其子。既知其子，复守其母，没身不殆。塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见其小曰明，守柔曰强。用其光，复归其明，无遗身殃。是为习常。</p></li><li><p>使我介然有知，行於大道，唯施是畏。大道甚夷，而人好径。朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有馀。是谓盗夸。非道也哉。</p></li><li><p>善建者不拔。善抱者不脱。子孙以祭祀不辍。修之於身其德乃真。修之於家其德乃馀。修之於乡其德乃长。修之於邦其德乃丰。修之於天下其德乃普。故以身观身，以家观家，以乡观乡，以邦观邦，以天下观天下。吾何以知天下然哉？以此。</p></li><li><p>含德之厚比於赤子。毒虫不螫，猛兽不据，攫鸟不抟。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄，和之至也。知和曰常。知常曰明。益生曰祥。心使气曰强。物壮则老。谓之不道，不道早已。</p></li><li><p>知者不言。言者不知。挫其锐，解其纷，和其光，同其尘，是谓玄同。故不可得而亲。不可得而疏。不可得而利。不可得而害。不可得而贵。不可得而贱。故为天下贵。</p></li><li><p>以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳而民弥贫。民多利器国家滋昏。人多伎巧奇物泫起。法令滋彰盗贼多有。故圣人云我无为而民自化。我好静而民自正。我无事而民自富。我无欲而民自朴。</p></li><li><p>其政闷闷，其民淳淳。其政察察，其民缺缺。祸尚福之所倚。福尚祸之所伏。孰知其极，其无正。正复为奇，善复为妖。人之迷其日固久。是以圣人方而不割。廉而不刿。直而不肆。光而不耀。</p></li><li><p>治人事天莫若啬。夫唯啬是谓早服。早服谓之重积德。重积德则无不克。无不克则莫知其极。莫知其极可以有国。有国之母可以长久。是谓深根固柢，长生久视之道。</p></li><li><p>治大国若烹小鲜。以道莅天下，其迨ㄞ哄非其鬼不神，其神不伤人。非其神不伤人，圣人亦不伤人。夫两不相伤，故德交归焉。</p></li><li><p>大国者下流，天下之交。天下之牝。牝常以静胜牡。以静为下。故大国以下小国，则取小国。小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜人。小国不过欲入事人。夫两者各得所欲，大者宜为下。</p></li><li><p>道者万物之奥。善人之宝，不善人之所保。美言可以市尊。美行可以加人。人之不善，何弃之有。故立天子、置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何。不曰∶求以得，有罪以免邪？故为天下贵。</p></li><li><p>为无为，事无事，味无味。大小多少，报怨以德。图难於其易，为大於其细。天下难事必作於易。天下大事必作於细。是以圣人终不为大，故能成其大。夫轻诺必寡信。多易必多难。是以圣人犹难之，故终无难矣。</p></li><li><p>其安易持，其未兆易谋。其脆易泮，其微易散。为之於未有，治之於未乱。合抱之木生於毫末。九层之台起於累土。千里之行始於足下。为者败之，执者失之。是以圣人无为故无败，无执故无失。民之从事常於几成而败之。慎终如始则无败事。是以圣人欲不欲，不贵难得之货。学不学，复众人之所过，以辅万物之自然而不敢为。</p></li><li><p>古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼。不以智治国，国之福。知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣、远矣！与物反矣。然後乃至大顺。</p></li><li><p>江海之所以能为百谷王者，以其善下之，故能为百谷王。是以圣人欲上民，必以言下之。欲先民，必以身後之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。</p></li><li><p>天下皆谓我道大似不肖。夫唯大故似不肖。若肖，久矣！其细也夫。我有三宝持而保之∶一曰慈， 二曰俭，三曰不敢为天下先。慈故能勇，俭故能广，不敢为天下先故能成器长。今舍慈且勇，舍俭且广，舍後且先，死矣！夫慈以战则胜，以守则固。天将救之以慈卫之。</p></li><li><p>善为士者不武。善战者不怒。善胜敌者不与。善用人者为之下。是谓不争之德。是谓用人之力。是谓配天之极。</p></li><li><p>用兵有言，吾不敢为主而为客。不敢进寸而退尺。是谓行无行。攘无臂。扔无敌。执无兵。祸莫大於轻敌。轻敌几丧吾宝。故抗兵相加哀者胜矣。</p></li><li><p>吾言甚易知、甚易行。天下莫能知、莫能行。言有宗、事有君。夫唯无知，是以我不知。知我者希，则我者贵。是以圣被褐怀玉。</p></li><li><p>知不知上，不知知病。夫唯病病，是以不病。圣人不病，以其病病。夫唯病病，是以不病。</p></li><li><p>民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。是以圣人自知不自见。自爱不自贵。故去彼取此。</p></li><li><p>勇於敢则杀。勇於不敢则活。此两者或利或害。天之所恶孰知其故。天之道不争而善胜。不言而善应。不召而自来。繟(chǎn,舒缓)然而善谋。天网恢恢疏而不失。</p></li><li><p>民不畏死，奈何以死惧之。若使民常畏死，而为奇者，吾得执而杀之，孰敢。常有司杀者杀。夫代司杀者杀，是谓代大匠斫。夫代大匠斫者，希有不伤其手矣。</p></li><li><p>民之饥以其上食税之多，是以饥。民之难治以其上之有为，是以难治。民之轻死以其求生之厚，是以轻死。夫唯无以生为者，是贤於贵生。</p></li><li><p>人之生也柔弱，其死也坚强。草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱者生之徒。是以兵强则灭，木强则折。强大处下，柔弱处上。</p></li><li><p>天之道其犹张弓与。高者抑之，下者举之。有馀者损之，不足者补之。天之道，损有馀而补不足。人之道，则不然，损不足以奉有馀。孰能有馀以奉天下，唯有道者。是以圣人为而不恃，功成而不处。其不欲见贤邪！</p></li><li><p>天下莫柔弱於水。而攻坚强者，莫之能胜。以其无以易之。弱之胜强。柔之胜刚。天下莫不知莫能行。是以圣人云，受国之垢是谓社稷主。受国不祥是为天下王。正言若反。</p></li><li><p>和大怨必有馀怨，安可以为善。是以圣人执左契，而不责於人。有德司契，无德司彻。天道无亲常与善人。</p></li><li><p>小国寡民。使有什伯之器而不用。使民重死而不远徙。虽有舟舆无所乘之。虽有甲兵无所陈之。使民复结绳而用之。甘其食、美其服、安其居、乐其俗。邻国相望，鸡犬之声相闻。民至老死不相往来。</p></li><li><p>信言不美。美言不信。善者不辩。辩者不善。知者不博。博者不知。圣人不积。既以为人己愈有。既以与人己愈多。天之道利而不害。圣人之道为而不争。 </p></li></ol><blockquote><p><a href="https://www.daodejing.org/laozi.html">老子-道德经</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名人-徐悲鸿-纪念馆</title>
      <link href="2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/"/>
      <url>2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">今天上午与亚林兄长来参观徐先生的展馆；我辈要向先生看齐，静下心做自己想做的事情，做到极致；</span><br><span class="line">这里整理主要生平以做备忘和自我激励</span><br></pre></td></tr></table></figure><h1 id="一-详细介绍请参考"><a href="#一-详细介绍请参考" class="headerlink" title="一. 详细介绍请参考"></a>一. 详细介绍请参考</h1><p><a href="http://www.artpc.cn/artistintroduction/274">美术百科-徐悲鸿</a></p><h1 id="二-历年珍贵影集"><a href="#二-历年珍贵影集" class="headerlink" title="二. 历年珍贵影集"></a>二. 历年珍贵影集</h1><p><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B41.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B42.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B43.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B44.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B45.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B46.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B47.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B48.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B49.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B410.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B411.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B412.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B413.jpeg" alt="img.png"></p><h1 id="三-代表作"><a href="#三-代表作" class="headerlink" title="三. 代表作"></a>三. 代表作</h1><ol><li><p>《奔马图》</p><p>作于1941年秋季第二次长沙会战期间。在此幅画中，徐悲鸿运用饱酣奔放的墨色勾勒头、颈、胸、腿等大转折部位，并以干笔扫出鬃尾，使浓淡干湿的变化浑然天成。马腿的直线细劲有力，犹如钢刀，力透纸背，而腹部、臀部及鬃尾的弧线很有弹性，富于动感。整体上看，画面前大后小，透视感较强，前伸的双腿和马头有很强的冲击力，似乎要冲破画面。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%A5%94%E9%A9%AC%E5%9B%BE.png" alt="奔马图"></p></li><li><p>《群马》</p><p>徐悲鸿的群马，是徐悲鸿马中的重要代表作之一。群马取材于1940年克什米尔当地的骏马，徐悲鸿当时见到此马格外兴奋，《群马》灵感油然而生。与其他作品不同的是，主要描绘了两匹背向观众的马，后面又配一匹侧向的马，为了使画面有变化，又在右边画了一匹低首觅食的马。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E7%BE%A4%E9%A9%AC.png" alt="群马"></p></li><li><p>《珍妮小姐画像》</p><p>为画家徐悲鸿最著名的油画人物肖像之一，作于1939年春夏之交，徐悲鸿时年44岁。此作品是徐悲鸿为了支持国内抗战，而在南洋举行义卖募捐时的作品。画中女子珍妮小姐，祖籍广东，为当时星洲名媛。在当时传为佳话。此画得到画筹四万新币，为这一时期与南洋募捐中画筹最多的一幅（总数为十一万一千多元新币），徐悲鸿本人也是非常满意这幅作品，特意请摄影师为其和画作拍照留念，后成为《悲鸿在星洲》一书的封面。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E7%8F%8D%E5%A6%AE%E5%B0%8F%E5%A7%90%E7%94%BB%E5%83%8F.png" alt="珍妮小姐画像.png"></p></li><li><p>《九方皋》<br>九方皋故事记载于《列子》：伯乐暮年之向秦穆推荐九方皋找千里马的故事。作品是一件非常完整和精彩的以线为主要表现手段和描绘方式的优秀的中国画作品。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E4%B9%9D%E6%96%B9%E7%9A%8B.png" alt="九方皋.png"></p></li><li><p>《田横五百士》</p><p>这幅《田横五百士》是徐悲鸿的成名大作。故事出自《史记·田儋列传》。田横是秦末齐国旧王族，继田儋之后为齐王。刘邦消灭群雄后，田横和他的五百壮士逃亡到一个海岛上。刘邦听说田横深得人心，恐日后有患，所以派使者赦田横的罪，召他回来。正是有感于田横等人”富贵不能淫，威武不能屈”的”高节”，着意选取了田横与五百壮士惜别的戏剧性场景来表现。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E7%94%B0%E6%A8%AA%E4%BA%94%E7%99%BE%E5%A3%AB.png" alt="田横五百士.png"></p></li><li><p>《负伤之狮》</p><p> 创作于1938年，当时日寇侵占了大半个中国，国土沦丧，生灵涂炭，徐悲鸿怨愤难忍。他画的负伤雄狮，回首跷望，含着无限的深意。他在画上题写：“国难孔亟时与麟若先生同客重庆相顾不怿写此以聊抒怀。”表现了作者爱国忧时的思想。这是一幅现实主义和浪漫主义结合的画作。中国被称作东方的“睡狮”，被日本帝国主义侵占了中国东北大部分国土，“睡狮”已成了负伤雄狮。这头双目怒视的负伤雄狮在不堪回首的神情中，准备战斗、拼搏，蕴藏着坚强与力量。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E8%B4%9F%E4%BC%A4%E4%B9%8B%E7%8B%AE.png" alt="负伤之狮.png"></p></li><li><p>《天高地阔任翱翔》</p><p> 徐悲鸿抗战时期作逾十一平尺巨幅飞鹰《天高地阔任翱翔》赠与星洲建筑师何光耀。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%A4%A9%E9%AB%98%E5%9C%B0%E9%98%94%E4%BB%BB%E7%BF%B1%E7%BF%94.png" alt="天高地阔任翱翔.png"></p></li><li><p>《愚公移山图》<br>作于1940年，1939至1940年，应印度大诗人泰戈尔之邀，徐悲鸿赴印度举办画展宣传抗日，这期间他创作了不少油画写生，但最重要的成果却是这幅《愚公移山图》国画。其故事取材于《列子·汤问》中的一个神话传说。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1%E5%9B%BE.png" alt="愚公移山图.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1_pro.jpeg" alt="愚公移山_pro.jpeg"></p></li></ol><h1 id="四-收藏"><a href="#四-收藏" class="headerlink" title="四. 收藏"></a>四. 收藏</h1><p><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E7%A5%9E%E4%BB%99%E5%8D%B7.jpg" alt="神仙卷.webp"></p><p>下面是收藏的 “任伯年” 作品</p><p><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E5%A5%B3%E5%A8%B2%E7%82%BC%E7%9F%B3.jpeg" alt="任伯年-女娲炼石"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E7%B4%AB%E8%97%A4%E7%BF%A0%E9%B8%9F.jpeg" alt="任伯年-紫藤翠鸟"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E8%8D%B7%E8%8A%B1.jpeg" alt="任伯年-荷花.jpeg"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E8%A5%BF%E6%96%BD%E6%B5%A3%E7%BA%B1.jpeg" alt="任伯年-西施浣纱.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绘画 </tag>
            
            <tag> 徐悲鸿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静静的健身-保持健康</title>
      <link href="2022/09/04/%E9%9D%99%E9%9D%99%E7%9A%84%E5%81%A5%E8%BA%AB-%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7/"/>
      <url>2022/09/04/%E9%9D%99%E9%9D%99%E7%9A%84%E5%81%A5%E8%BA%AB-%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="一-八段锦"><a href="#一-八段锦" class="headerlink" title="一. 八段锦"></a>一. 八段锦</h3><blockquote><p>早起第一件事</p></blockquote><p><img src="/2022/09/04/%E9%9D%99%E9%9D%99%E7%9A%84%E5%81%A5%E8%BA%AB-%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7/baduanjin.png" alt="img.png"><br><a href="http://xima.tv/1_tFxuEZ?_sonic=0">喜马拉雅听音频</a><br><a href="http://xhslink.com/O80vnj">小红书视频版</a></p><h3 id="二-静坐练习"><a href="#二-静坐练习" class="headerlink" title="二. 静坐练习"></a>二. 静坐练习</h3><blockquote><p>上班休息时（有些同学可以把吸烟的时间换掉）</p></blockquote><p><a href="http://xhslink.com/N1Kvnj">南怀瑾静坐练习</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启我的blog-新设备</title>
      <link href="2022/09/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog-%E6%96%B0%E8%AE%BE%E5%A4%87/"/>
      <url>2022/09/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog-%E6%96%B0%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="一-下载博客git到本地"><a href="#一-下载博客git到本地" class="headerlink" title="一. 下载博客git到本地"></a>一. 下载博客git到本地</h3><h3 id="二-安装-hexo"><a href="#二-安装-hexo" class="headerlink" title="二. 安装 hexo"></a>二. 安装 <a href="https://hexo.io/zh-cn/">hexo</a></h3><h3 id="三-当前项目目录中安装主题及node依赖包"><a href="#三-当前项目目录中安装主题及node依赖包" class="headerlink" title="三. 当前项目目录中安装主题及node依赖包"></a>三. 当前项目目录中安装主题及node依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node install</span><br><span class="line">git clone --depth 1 https://github.com/hexojs/hexo-theme-landscape themes/landscape</span><br></pre></td></tr></table></figure><h3 id="四-测试使用"><a href="#四-测试使用" class="headerlink" title="四. 测试使用"></a>四. 测试使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server </span><br></pre></td></tr></table></figure><h3 id="五-遇到的问题"><a href="#五-遇到的问题" class="headerlink" title="五. 遇到的问题"></a>五. 遇到的问题</h3><ul><li>无法deploy </li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL &#123;</span><br><span class="line">       err: Error: Spawn failed</span><br><span class="line">       at ChildProcess.&lt;anonymous&gt; (/Users/Aaron/Documents/code/github/wansongblog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">       at ChildProcess.emit (node:events:390:28)</span><br><span class="line">       at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">       code: 128</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>无法修改， 新建的文档是被锁定的</li></ul><p><img src="/2022/09/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog-%E6%96%B0%E8%AE%BE%E5%A4%87/new_doc_error.png" alt="img.png"></p><blockquote><p>解决办法: 修改hexo权限即可</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  wansongblog git:(master) ✗ which hexo</span><br><span class="line">/usr/local/bin/hexo</span><br><span class="line">➜  wansongblog git:(master) ✗ ll /usr/local/bin/hexo</span><br><span class="line">lrwxr-xr-x  1 root  wheel  37 Sep  4 05:24 /usr/local/bin/hexo -&gt; ../lib/node_modules/hexo-cli/bin/hexo</span><br><span class="line">➜  wansongblog git:(master) ✗ cd  /usr/local/bin/</span><br><span class="line">➜  bin cd ../lib/node_modules</span><br><span class="line">➜  node_modules sudo chmod -R 777 hexo-cli</span><br></pre></td></tr></table></figure><h3 id="六-自动化部署"><a href="#六-自动化部署" class="headerlink" title="六. 自动化部署"></a>六. 自动化部署</h3><p><a href="https://www.cnblogs.com/Helium-Air/p/15646484.html">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
            <tag> 感悟 </tag>
            
            <tag> 疑惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Zen of Python, by Tim Peters</title>
      <link href="2022/09/03/2015-01-1-PYTHON-%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/"/>
      <url>2022/09/03/2015-01-1-PYTHON-%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/</url>
      
        <content type="html"><![CDATA[<p>=============</p><blockquote><p>由于自己对新知识的好奇，2014年被一位朋友吸引，当时遇到他时，他是在坚持用python进行实现自己的功能。同时用的是vim进行编写，而之前我一直是用<br>IDE<br>,2015年初，我开始了解python,首先我接触到的就是</p></blockquote><pre><code>    <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">import this</span><br><span class="line"></span><br><span class="line">The Zen of Python</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Python的原则*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Beautiful is better than ugly.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*优美胜于丑陋（Python 以编写优美的代码为目标）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Explicit is better than implicit.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Simple is better than complex.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Complex is better than complicated.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Flat is better than nested.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套） *</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Sparse is better than dense.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Readability counts.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*可读性很重要（优美的代码是可读的）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Special cases aren&#x27;t special enough to break the rules.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Although practicality beats purity.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Errors should never pass silently.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Unless explicitly silenced.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*当存在多种可能，不要尝试去猜测*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Although that way may not be obvious at first unless you&#x27;re Dutch.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Now is better than never.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Although never is often better than *</span>right* now.</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量） *</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">If the implementation is hard to explain, it&#x27;s a bad idea.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Namespaces are one honking great idea -- let&#x27;s do more of those!</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---- by Tim Peters</span></span><br><span class="line"><span class="strong"></span></span><br></pre></td></tr></table></figure></code></pre><hr><ul><li>python  也用了一段时间，感觉他和javascript很像，但是只是感觉，具体哪里像，后面我会归档一下，同时也是为自己理清思路。</li><li>她与java的区别，我目前感觉两种语言，只是语法上的不同，没有感觉到非常大的差别，我也会单独整理一份这两个语言的差别。但自己学习。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI设置表格自动换行</title>
      <link href="2020/09/28/POI%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/"/>
      <url>2020/09/28/POI%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开发过程中有些同学遇到需要表格自动换行,其实poi不设置高度,设置WrapText即可</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">`        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>代码片断参考</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xssfWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Workbook finalWb = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">    XSSFSheet sheet = (XSSFSheet) finalWb.createSheet(System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    sheet.setDefaultColumnWidth(<span class="number">20</span>);</span><br><span class="line">    SheetContent content=<span class="keyword">new</span> SheetContent();</span><br><span class="line">    content.setHeaders(Lists.newArrayList(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;content&quot;</span>));</span><br><span class="line">    Map&lt;String, Object&gt; temp = Maps.newHashMap();</span><br><span class="line">    temp.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;jdk8之前为空判断使业务代码读起来比较费劲,对整体业务逻辑的理解增加困惑;&quot;</span> + <span class="string">&quot;jdk8支持了 Optional 之后 ,使用我们可以非常轻松的将原本一大块的判断代码块变成一句话;&quot;</span>);</span><br><span class="line">    temp.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;左侧是自动换行&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; temp2 = Maps.newHashMap();</span><br><span class="line">    temp2.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(filePath));&quot;</span>);</span><br><span class="line">    temp2.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;左侧是自动换行&quot;</span>);</span><br><span class="line">    content.setValues(Lists.newArrayList(temp,temp2));</span><br><span class="line">    writeSheet(sheet,content);</span><br><span class="line">    FileOutputStream bos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;异常数据.xlsx&quot;</span>);</span><br><span class="line">    finalWb.write(bos);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSheet</span><span class="params">(XSSFSheet sheet, SheetContent content)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; last= Sets.newHashSet();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.getHeaders().size(); i++) &#123;</span><br><span class="line">        writeCell(sheet,<span class="number">0</span>,i,<span class="keyword">null</span>,content.getHeaders().get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> row=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.getValues().size(); i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; contents=content.getValues().get(i);</span><br><span class="line">        ArrayList&lt;Object&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;(contents.values());</span><br><span class="line">        last.add((temp.get(<span class="number">0</span>)));</span><br><span class="line">        row++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; temp.size(); i1++) &#123;</span><br><span class="line">            Object item=temp.get(i1);</span><br><span class="line">            <span class="keyword">if</span>(item <span class="keyword">instanceof</span> Double)&#123;</span><br><span class="line">                <span class="keyword">if</span>(((Double) item).intValue()==((Double) item).doubleValue())&#123;</span><br><span class="line">                    item=((Double) item).intValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            writeCell(sheet,row,i1,<span class="keyword">null</span>,item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(last.size()+<span class="string">&quot;,&quot;</span>+last);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeCell</span><span class="params">(XSSFSheet sheet, <span class="keyword">int</span> r, <span class="keyword">int</span> l, Color color, Object value)</span> </span>&#123;</span><br><span class="line">    XSSFRow row = sheet.getRow(r);</span><br><span class="line">    <span class="keyword">if</span> (row == <span class="keyword">null</span>) &#123;</span><br><span class="line">        row = sheet.createRow(r);</span><br><span class="line">    &#125;</span><br><span class="line">    XSSFCell cell = row.getCell(l);</span><br><span class="line">    <span class="keyword">if</span> (cell == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cell = row.createCell(l);</span><br><span class="line">    &#125;</span><br><span class="line">    cell.setCellValue(value.toString());</span><br><span class="line">    XSSFCellStyle style = sheet.getWorkbook().createCellStyle();</span><br><span class="line">    <span class="keyword">if</span> (color == <span class="keyword">null</span>) &#123;</span><br><span class="line">        color = <span class="keyword">new</span> java.awt.Color(<span class="number">162</span>, <span class="number">187</span>, <span class="number">185</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    style.setFillForegroundColor(<span class="keyword">new</span> XSSFColor(color));</span><br><span class="line">    style.setVerticalAlignment(VerticalAlignment.TOP);</span><br><span class="line">    style.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line">    style.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">    cell.setCellStyle(style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SheetContent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sheetName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; headers= Lists.newArrayList();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; values=Lists.newArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(List&lt;Object&gt; cells)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; value=Maps.newLinkedHashMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</span><br><span class="line">            value.put(headers.get(i)+<span class="string">&quot;&quot;</span>,cells.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        values.add(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk8.java </tag>
            
            <tag> poi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk_null有关判断--Optional</title>
      <link href="2020/09/23/jdk-null%E6%9C%89%E5%85%B3%E5%88%A4%E6%96%AD/"/>
      <url>2020/09/23/jdk-null%E6%9C%89%E5%85%B3%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jdk8之前为空判断使业务代码读起来比较费劲,对整体业务逻辑的理解增加困惑;<br>jdk8支持了 Optional 之后 ,使用我们可以非常轻松的将原本一大块的判断代码块变成一句话;</p></blockquote><h3 id="正常的判空优化效果"><a href="#正常的判空优化效果" class="headerlink" title="正常的判空优化效果"></a>正常的判空优化效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.ofNullable(<span class="keyword">null</span>).orElse(<span class="string">&quot;default&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="从对象中取值时"><a href="#从对象中取值时" class="headerlink" title="从对象中取值时"></a>从对象中取值时</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String userName=<span class="keyword">null</span>;</span><br><span class="line">User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">  userName=<span class="string">&quot;username is null&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  userName=user.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优化后</span><br><span class="line"></span><br><span class="line">userName=Optional.ofNullable(user).map((temp)-&gt;temp.getName()).orElse(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">userName=Optional.ofNullable(user).flatMap(user1 -&gt; Optional.ofNullable(user1.getName())).orElse(<span class="string">&quot;happy&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk8.java </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alfred Workflow快速打开idea项目</title>
      <link href="2020/09/20/alfred%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80idea%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/09/20/alfred%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80idea%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/alfred/open_idea.gif"></p><ol><li>Mac 安装Alfred</li><li>进行workflow的设置</li></ol><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">keyword--&gt;<span class="keyword">file</span> <span class="built_in">filter</span>--&gt; <span class="keyword">open</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> alfred </tag>
            
            <tag> workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="2018/04/15/redis/"/>
      <url>2018/04/15/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="一-redis-实现原理"><a href="#一-redis-实现原理" class="headerlink" title="一. redis 实现原理"></a>一. redis 实现原理</h2><h3 id="五种类型的键的底层实现数据结构"><a href="#五种类型的键的底层实现数据结构" class="headerlink" title="五种类型的键的底层实现数据结构"></a>五种类型的键的底层实现数据结构</h3><p>具体命令可参考<a href="2015/11/10/redis%E7%B4%A2%E5%BC%95/">命令</a></p><ol><li><p>SDS( simple dynamic string) 简单动态字符串</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"><span class="keyword">char</span> buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>链表</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">void</span> *value;</span><br><span class="line">&#125;listNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>&#123;</span></span><br><span class="line">listNode *head;</span><br><span class="line">listNode *tail;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line"><span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr);</span><br><span class="line"><span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr);</span><br><span class="line"><span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr,<span class="keyword">void</span> *key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典</p><p> Redis 的字典使用哈希表作为底层实现,一个哈希敷衍里面可以有多个节点,每个节点就保存了字典中的一个键值对;</p><p> 新添加一个键值对到字典里时,程序需要先根据键值对的键计算出哈希值和索引值,然后根据索引值,将包含新键值对的哈希表节点放到哈希表数组的指定索引上面.当有两个或以上数量的键被分配到哈希数组的同一个索引上面时,我们称为冲突.这里使用链地址法解决键冲突.</p><ul><li><p>哈希表</p>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span>&#123;</span></span><br><span class="line">dictEntry **table;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  sizemask 值和哈希值一起决定一个键应该被放到table数组的哪个索引上面.</p></li><li><p>哈希表节点</p>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span>&#123;</span></span><br><span class="line"><span class="keyword">void</span> *key;</span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line"><span class="keyword">void</span> *val;</span><br><span class="line">uint64_tu64;</span><br><span class="line">int64_ts64;</span><br><span class="line">&#125; v;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span> <span class="comment">//解决键冲突的问题</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure></li><li><p>字典</p>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span>&#123;</span></span><br><span class="line">dictType *type; <span class="comment">//类型特定函数</span></span><br><span class="line"><span class="keyword">void</span> *privdata;<span class="comment">//私有数据</span></span><br><span class="line">dictht ht[<span class="number">2</span>];<span class="comment">//哈希表</span></span><br><span class="line"><span class="keyword">int</span> trehashidx;<span class="comment">//索引</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure></li><li><p>rehash(实际过程,是渐进式的)</p><p>  当哈希表中键值的数量太多或太少时,为了让哈希表的负载因子维持在一个合理的范围之内,程序需要对哈希表的大小进行相应的扩展或者收缩.</p><ol><li><p>为字段的ht[1]哈希表分配空间,这个空间大小取决于要执行的操作,以及ht[0]当前包含的键值对数量</p><ol><li>如果是扩展操作,那么大小为第一个大于等于ht[0].used*2的2的n次方</li><li>如果执行的是收缩操作,那么ht[1]的大小为第一个大于等于ht[0].used的2的n次方</li></ol></li><li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面:rehash指重新计算键的哈希值和索引值,然后将键值对放置到ht[1]哈希表的指定位置上</p></li><li><p>将ht[0]释放空间,同时将ht[0]和ht[1]换位置</p><p>何时进行扩展和收缩<br>负载因子= ht[0].used(已保存的节点数量)/哈希表的大小</p><p>当负载因子大于 5 (待确认),或&lt;0.1 时</p></li></ol></li></ul></li><li><p><a href="http://daoluan.net/%E6%9C%AA%E5%88%86%E7%B1%BB/2014/06/26/decode-redis-data-struct-skiplist.html">跳跃表</a></p><p> skiplist 是一种有序的数据结构,它通过在每个节点中维持多个指向其他节点的指针,从而达到快速访问节点的目的.<br> redis在以下两个地方用到了跳跃表:</p><ol><li>有序集合键 zset</li><li>在集群节点中用途内部数据结构</li></ol></li><li><p>整数集合</p><p> intset 是集合键的底层实现之一,当一个集合只包含整数值元素,并且这个集合的元素数量不多时,Redis就会使用整数集合作为集合键的底层实现.</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD numbers 1 3 5 6 7</span><br><span class="line">(integer) 5</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;intset&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd numbers 0943890384093845903845094385</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers numbers</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;0943890384093845903845094385&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;6&quot;</span><br><span class="line">6) &quot;1&quot;</span><br><span class="line">7) &quot;9&quot;</span><br><span class="line">8) &quot;5&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;hashtable&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="每当我们要将一个新元素添加到整数集合里面-并且新元素的类型比整数集合现有的所有元素的类型都要长时-整数集合需要先进行升级-然后才能将新元素添加到整数集合里面-请记住-这里不会降级的"><a href="#每当我们要将一个新元素添加到整数集合里面-并且新元素的类型比整数集合现有的所有元素的类型都要长时-整数集合需要先进行升级-然后才能将新元素添加到整数集合里面-请记住-这里不会降级的" class="headerlink" title=" 每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有的所有元素的类型都要长时,整数集合需要先进行升级,然后才能将新元素添加到整数集合里面,请记住,这里不会降级的"></a> 每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有的所有元素的类型都要长时,整数集合需要先进行升级,然后才能将新元素添加到整数集合里面,请记住,这里不会降级的</h2><p> 其是Redis保存整数值的集合抽象数据结构,它可以保存int16_t,int32_t,int64_t的整数值,并且保证集合中不会出现重复元素.</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span>&#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> encoding;<span class="comment">//编码方式 INTSET_ENC_INT16,INTSET_ENC_INT32,INTSET_ENC_INT64</span></span><br><span class="line"><span class="keyword">uint32_t</span> length;<span class="comment">//集合包含的元素数量</span></span><br><span class="line"><span class="keyword">int8_t</span> contents[]; <span class="comment">//保存元素的数组,数组中按值的大小从小到大有序排列,并且数组中不包含任何重复项;其真正的类型取决于encoding属性的值:</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>压缩列表<br> ziplist,是列表键和哈希键的底层实现之一.当一个列表键只包含少量列表项,并且每个列表项要么就是小整数值,要么就是长度比较短的字符串,那么Redis就会使用压缩列表来做列表键的底层实现.</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush kdf djf f df d f d f &quot;sdf&quot;</span><br><span class="line">(integer) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING kdf</span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p> 压缩列表是为了节约内存而开发的,是由一系列特殊的连续内存块组成的顺序型数据结构.一个压缩列表可以包含任意多个节点,每个节点可以保存一个字节数组或者一个整数值.</p></li></ol><h3 id="对象处理机制以及数据库的实现原理"><a href="#对象处理机制以及数据库的实现原理" class="headerlink" title="对象处理机制以及数据库的实现原理"></a>对象处理机制以及数据库的实现原理</h3><ol><li><p>导入</p><ol><li>Redis 基于这些数据结构创建一个对象系统,其包含 字符串,列表对象,哈希对象,集合对象和有序集合对象 五种类型的对象,每种对象都至少一种我们前面所介绍的数据结构.</li><li>使用对象的好处,我们可以针对不同的使用场景,为对象设置多种不同的数据结构pugmww而优化对象在不同场景下的使用效率.</li><li>对象系统基于引用计数技术的内存回收机制,当程序不再使用某个对象的时候,这个对象所战胜的内存就会被自动释放;另外,Redis还通过引用计数技术实现了对象共享机制,这一机制可以在适当的条件下,通过让多个数据库键共享同一个对象来节约内存.</li><li>对象带有访问时间记录信息,该信息可以用于计算数据库的空转时长 ,在服务器启用了maxmemory功能的情况下,空转时长较大的那些键可能会优先被服务器删除.</li></ol></li><li><p>对象的类型和编码 type</p><p> Redis使用对象来表示数据库中的键值,每次我们在库中新创建一个键值对时,我们至少会创建两个对象,一个是键对象,另一个是值对象.</p> <figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set name aaron</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;aaron&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; OBJECT ENCODING name</span><br><span class="line"><span class="string">&quot;embstr&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; type name</span><br><span class="line">string</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; OBJECT idletime name</span><br><span class="line">(integer) <span class="number">46</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p> 每一个对象都由一个redisObject结构表示,该结构中和保存数据有关的三个属性分别是type属性,encoding属性和ptr属性:</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line"><span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line"><span class="keyword">void</span> *ptr;<span class="comment">//每日向底层实现数据结构的指针</span></span><br><span class="line"><span class="keyword">int</span> refcount;<span class="comment">//引用计数</span></span><br><span class="line"><span class="keyword">unsigned</span> lru:<span class="number">22</span>;<span class="comment">//该对象最后一次被访问的时间</span></span><br><span class="line">&#125;robj;</span><br></pre></td></tr></table></figure><p> type记录了对象的类型,这个属性的值有 string,list,hash,set,zset</p></li><li><p>编码和底层实现  OBJECT ENCODING<br> 对象的ptr指针指向对象的底层实现数据结构,而这些数据结构由对象的encoding属性决定.也就是说这个对象使用了什么数据结构作为对象的底层实现,这个属性值可以是</p> <figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">int (<span class="name">long</span> 类型)</span><br><span class="line">embstr (<span class="name">embstr</span>编码的简单动态字符串)</span><br><span class="line">raw (简单动态字符串)</span><br><span class="line">ht (字典)</span><br><span class="line">linkedlist (双端链表)</span><br><span class="line">ziplist (压缩链表)</span><br><span class="line">intset (整数集合)</span><br><span class="line">skiplist (跳跃链表和字典)</span><br></pre></td></tr></table></figure><p> 每种类型对象都至少使用了两种不同的编码.</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">string int/embstr/raw</span><br><span class="line">list ziplist/linkedlist</span><br><span class="line">hash ziplist/ht</span><br><span class="line"><span class="builtin-name">set</span>  intset/ht</span><br><span class="line">zset  ziplist/skiplist</span><br></pre></td></tr></table></figure></li><li><p>数据共享 只共享0-9999的字符串对象</p> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET a <span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; OBJECT <span class="built_in">ref</span>count a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; OBJECT <span class="built_in">ref</span>count a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET b <span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; OBJECT <span class="built_in">ref</span>count a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="单机数据库的实现"><a href="#单机数据库的实现" class="headerlink" title="单机数据库的实现"></a>单机数据库的实现</h3><ol><li><p>在redisServer结构的db数组中,每个redisDb 结构代表一个数据库,启动服务器时,服务器会根据dbnum来决定应该创建多少个数据库:</p> <figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">struct redisServer&#123;</span><br><span class="line"><span class="meta">...</span></span><br><span class="line">redisDb *db;</span><br><span class="line">int dbnum;</span><br><span class="line"><span class="meta">...</span></span><br><span class="line">&#125;redisClient</span><br></pre></td></tr></table></figure><p> 客户端可以根据命令select来进行切换目标数据库</p></li><li><p>数据库键空间</p><p> 是一个键值对数据库服务器,其中每个数据库都由一个redisDb结构表示,其中redisDb结构的dict字典保存了数据库中的所有键值对,我们称这个字典为 键空间<br> typedef struct redisDb{<br> dict *dict;<br> dict *expires;  key 是对象,value 是过期时间<br> }redisDb</p></li><li><p>设置生存时间或过期时间</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name wansong</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire name 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;wansong&quot;</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>数据库通知<br> 2.8 新版本中增加的功能,可以通过订阅给它的频道或者模式,来获知数据库中键的变化.及数据库中命令的执行情况.</p></li></ol><h3 id="RDB-持久化和-AOF-持久化的实现原理"><a href="#RDB-持久化和-AOF-持久化的实现原理" class="headerlink" title="RDB 持久化和 AOF 持久化的实现原理"></a>RDB 持久化和 AOF 持久化的实现原理</h3><p>RDB持久化功能,可以将Redis在内存中的数据库状态保存到磁盘里面,避免数据意外丢失.也可以根据服务器配置选项定期执行.<br>该功能可以将某个时间点上的数据库状态保存到一个RDB文件中.该文件是一个经过压缩的二进制文件,通过该文件可以还原生成RDB文件时的数据库状态.</p><ol><li><p>RDB文件的创建与载入</p><p> save 命令会阻塞Redis服务器进程,直到RDB文件创建完毕为止,在服务器进程阻塞期间,服务器不处理任务命令请求.</p><p> bgsave background saving started 该命令会派生出一个子进程,然后由子进程负责创建RDB文件,服务器进程继续处理命令请求</p><p> 创建文件的实际工作由rdbSave函数完成,save和bgsave命令会以不同的方式调用这个函数.</p><p> RDB文件的载入是自动的,当程序启动时会自动载入,另外注意AOF文件的更新频率通常比RDB高,所以:</p><ol><li><p>如果服务器开启了AOF持久化功能,那么服务器会优先使用AOF文件还原数据库状态</p></li><li><p>只有在AOF持久化功能处于关闭状态时,服务器才会使用RDB文件来还原数据库状态.</p><p>载入RDB文件的实际工作由rdbLoad函数完成;文件载入时服务器处于阻塞状态.</p></li></ol></li><li><p>自动间隔性保存</p><p>可以通过save选项设置多个保存条件,但只要其中任意一个条件被满足,服务器就会执行bgsave.</p><p>save 900 1  服务器900秒之内,对数据库进行至少一次修改,就进行bgsave</p></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="Redis-基于-Reactor模式开发的网络事件处理器-称作-文件事件处理器-File-Event-Handler"><a href="#Redis-基于-Reactor模式开发的网络事件处理器-称作-文件事件处理器-File-Event-Handler" class="headerlink" title="Redis 基于 Reactor模式开发的网络事件处理器,称作 文件事件处理器 (File Event Handler)"></a>Redis 基于 Reactor模式开发的网络事件处理器,称作 文件事件处理器 (File Event Handler)</h4><ol><li>使用I/O多路复用程序来同时监听多个套接字,并根据目前执行的任务来为套接字关联不同的事件</li><li>当被监听的套接字准备好执行连接应答,读取,写入,关闭 等操作时,与其对应的文件事件就会产生,这时1中注册好的事件处理器就来进行处理这些事件</li></ol><h4 id="时间事件-id-when-handlers"><a href="#时间事件-id-when-handlers" class="headerlink" title="时间事件 id/when/handlers"></a>时间事件 id/when/handlers</h4><ol><li>定时事件</li><li>周期性事件</li></ol><h3 id="事务实现原理-ACID"><a href="#事务实现原理-ACID" class="headerlink" title="事务实现原理 ACID"></a>事务实现原理 ACID</h3><h3 id="ServerCron函数"><a href="#ServerCron函数" class="headerlink" title="ServerCron函数"></a>ServerCron函数</h3><blockquote><blockquote><p>服务器 默认每100毫秒执行一次</p></blockquote></blockquote><ol><li>更新服务器时间缓存</li><li>更新LRU时钟(如 Redis对象都会有一个LRU属性,这个属性保存了对象最后一次被命令访问的时间)</li><li>更新服务器每秒执行命令的次数(INFO status)</li><li>更新服务器内存峰值记录</li><li>处理SIGTERM信号 每次运行时,程序会对服务器状态的shutdown_asap属性进行检查,看是否要关闭服务器</li><li>管理客户端资源: 已超时 或 是否清理输出缓冲区</li><li>管理数据库资源: 删除过期键,并在需要时 对字典进行收缩操作</li><li>检查持久化操作的运行状态</li><li>将AOF缓冲区的内容写入到AOF文件</li><li>关闭异步客户端</li><li>增加cronloops计数器的值</li></ol><h3 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h3><p>初始化服务器状态结构,载入配置选项,还原数据库状态,执行事件循环</p><h3 id="订阅与发布实现原理"><a href="#订阅与发布实现原理" class="headerlink" title="订阅与发布实现原理"></a>订阅与发布实现原理</h3><h3 id="Lua-脚本功能的实现原理。"><a href="#Lua-脚本功能的实现原理。" class="headerlink" title="Lua 脚本功能的实现原理。"></a>Lua 脚本功能的实现原理。</h3><h3 id="SORT-命令的实现原理。"><a href="#SORT-命令的实现原理。" class="headerlink" title="SORT 命令的实现原理。"></a>SORT 命令的实现原理。</h3><h3 id="慢查询日志的实现原理。-打开慢查询-查看日期-SLOWLOG-GET"><a href="#慢查询日志的实现原理。-打开慢查询-查看日期-SLOWLOG-GET" class="headerlink" title="慢查询日志的实现原理。 打开慢查询,查看日期 SLOWLOG GET"></a>慢查询日志的实现原理。 打开慢查询,查看日期 SLOWLOG GET</h3><h3 id="高并发如何做到"><a href="#高并发如何做到" class="headerlink" title="高并发如何做到"></a>高并发如何做到</h3><pre><code>虽是单线程单进行,但 使用I/O多路复用(select/epoll,evport,kqueue)程序来同时监听多个套接字 的方式来处理命令请求,并与多个客户端进行通信.</code></pre><h2 id="二-redis-主要关注点"><a href="#二-redis-主要关注点" class="headerlink" title="二. redis 主要关注点"></a>二. redis 主要关注点</h2><h3 id="redis-为什么是单线程"><a href="#redis-为什么是单线程" class="headerlink" title="redis 为什么是单线程"></a><a href="https://blog.csdn.net/qqqqq1993qqqqq/article/details/77538202">redis 为什么是单线程</a></h3><h3 id="redis-过期索引是如何做到的"><a href="#redis-过期索引是如何做到的" class="headerlink" title="redis 过期索引是如何做到的"></a>redis 过期索引是如何做到的</h3><ol><li><p>redis 的存储结构</p></li><li><p>删除策略</p> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>定时删除:在设置键的过期时间的同时,创建一个定时器,让定时器在键的过期时间来临时,立即对键执行删除操作(对内存友好,最及时)</span><br><span class="line"><span class="bullet">* </span>定期删除:每一段时间,进行数据库过期索引的扫瞄,将已经过期的键 进行删除; 至于删除多少过期键和检查哪些数据库,都由算法决定</span><br><span class="line"><span class="bullet">* </span>惰性删除: 每次取键时,校验一下是否过期,若已经过期 就进行删除</span><br><span class="line"></span><br><span class="line">其实最终使用的是 定期和惰性 两个策略 配合实现</span><br></pre></td></tr></table></figure><h3 id="redis-服务器配置"><a href="#redis-服务器配置" class="headerlink" title="redis 服务器配置"></a><a href="https://www.cnblogs.com/joshua317/p/5635297.html">redis 服务器配置</a></h3><h3 id="redis-有哪些功能"><a href="#redis-有哪些功能" class="headerlink" title="redis 有哪些功能"></a><a href="">redis 有哪些功能</a></h3><h3 id="redis-如何Failover"><a href="#redis-如何Failover" class="headerlink" title="redis 如何Failover()"></a>redis 如何Failover()</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">哨兵（Sentinel）和复制（<span class="keyword">Replication</span>）</span><br><span class="line">Sentinel可以管理多个Redis服务器，它提供了监控，提醒以及自动的故障转移的功能；<span class="keyword">Replication</span>则是负责让一个Redis服务器可以配备多个备份的服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="redis-目前流程的实施架构有哪些"><a href="#redis-目前流程的实施架构有哪些" class="headerlink" title="redis 目前流程的实施架构有哪些"></a>redis 目前流程的实施架构有哪些</h3><ol><li>哨兵Sentinel,复制（replication）</li><li>集群（cluster）</li></ol><h2 id="三-redis-应用场景"><a href="#三-redis-应用场景" class="headerlink" title="三. redis 应用场景"></a>三. <a href="https://www.cnblogs.com/NiceCui/p/7794659.html">redis 应用场景</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://item.jd.com/11486101.html">Redis设计与实现</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 缓存 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务相关概念</title>
      <link href="2018/04/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>2018/04/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="服务治理基本概念"><a href="#服务治理基本概念" class="headerlink" title="服务治理基本概念"></a>服务治理基本概念</h2><ol><li>服务的伸缩控制</li><li>身份验证与授权 *</li><li>服务注册与发现 *</li><li>反向代理与负载均衡</li><li>路由控制 *</li><li>流量切换 *</li><li>日志管理 *</li><li>性能度量、监控与调优 *</li><li>分布式跟踪 *</li><li>过载保护 *</li><li>服务降级 *</li><li>服务部署与版本升级策略支持 *</li><li>错误处理 *</li><li>国际化</li></ol><h3 id="服务的伸缩控制"><a href="#服务的伸缩控制" class="headerlink" title="服务的伸缩控制"></a>服务的伸缩控制</h3><h3 id="身份验证与授权"><a href="#身份验证与授权" class="headerlink" title="身份验证与授权"></a>身份验证与授权</h3><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><ol><li>dubbo zookeeper</li></ol><h3 id="反向代理与负载均衡"><a href="#反向代理与负载均衡" class="headerlink" title="反向代理与负载均衡"></a>反向代理与负载均衡</h3><ol><li>vertx</li><li>nginx</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 服务治理 </tag>
            
            <tag> 算法 </tag>
            
            <tag> CAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="2018/03/29/%E6%8E%92%E5%BA%8F/"/>
      <url>2018/03/29/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法查找及扩展</title>
      <link href="2018/03/29/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
      <url>2018/03/29/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E5%8F%8A%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h2><blockquote><blockquote><p>给一个有序数组,查找出k所在位置</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaron</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 6.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheFirstLessThan100</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> middleValue = array[middle];</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (middleValue &lt; value) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleValue &gt; value) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;times:%d,index:%d,value:%d\n&quot;</span>, count, middle, value);</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = find(array, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查出第一个大于N的位置"><a href="#查出第一个大于N的位置" class="headerlink" title="查出第一个大于N的位置"></a>查出第一个大于N的位置</h2><blockquote><blockquote><p>从有序的数组中,找出第一个大于N的数字的位置</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstBigIndex</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastBigIndex=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> middleValue = array[middle];</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (middleValue &lt;= value) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleValue &gt; value) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">                lastBigIndex=middle;</span><br><span class="line">                System.out.printf(<span class="string">&quot;times:%d,index:%d,value:%d,middle:%d\n&quot;</span>, count, middle, value,middleValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastBigIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstBigIndex1</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> middleValue = array[middle];</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (middleValue &lt;= value) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleValue &gt; value) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">                System.out.printf(<span class="string">&quot;times:%d,index:%d,value:%d,middle:%d\n&quot;</span>, count, middle, value,middleValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">34</span>,<span class="number">324</span>,<span class="number">546</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = findFirstBigIndex1(array, i);</span><br><span class="line">            <span class="keyword">int</span> index2 = findFirstBigIndex(array, i);</span><br><span class="line">            System.out.println(index+<span class="string">&quot;--&quot;</span>+index2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信头像九宫格算法</title>
      <link href="2018/03/25/%E5%BE%AE%E4%BF%A1%E5%A4%B4%E5%83%8F%E4%B9%9D%E5%AE%AB%E6%A0%BC%E7%AE%97%E6%B3%95/"/>
      <url>2018/03/25/%E5%BE%AE%E4%BF%A1%E5%A4%B4%E5%83%8F%E4%B9%9D%E5%AE%AB%E6%A0%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><p>分别计算1-9个头像在九宫格中的位置</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ImageCell&gt; <span class="title">createMergeCell</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> totalWidth)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> totalRow = (<span class="keyword">int</span>) Math.ceil(Math.sqrt(n));</span><br><span class="line">      <span class="keyword">int</span> outline = <span class="number">5</span>;</span><br><span class="line">      <span class="keyword">int</span> width = ((totalWidth - outline) / totalRow);</span><br><span class="line">      <span class="keyword">int</span> border = width / <span class="number">20</span>;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> Lists.newArrayList(<span class="keyword">new</span> ImageCell(border, border, width - <span class="number">2</span> * border));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> lastAloneNum = n % totalRow;</span><br><span class="line">      <span class="keyword">int</span> totalFullRow = n / totalRow;</span><br><span class="line">      <span class="keyword">int</span> lastRow = totalRow - totalFullRow - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> firstStartX = (totalWidth - lastAloneNum * width) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">int</span> firstStartY = lastRow * width;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> otherSpace = (totalWidth - totalRow * width) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">int</span> yOffset = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (totalRow != totalFullRow + (lastAloneNum != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) &#123;</span><br><span class="line">          yOffset = -width / <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      List&lt;ImageCell&gt; imageCells = Lists.newArrayList();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">int</span> x = <span class="number">0</span>, y = firstStartY;</span><br><span class="line">          <span class="keyword">if</span> (i &lt; lastAloneNum) &#123;</span><br><span class="line">              x = firstStartX + i * width;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              x = (i - lastAloneNum) % totalRow * width;</span><br><span class="line">              y = firstStartY + ((i - lastAloneNum) / totalRow + <span class="number">1</span>) * width;</span><br><span class="line">          &#125;</span><br><span class="line">          imageCells.add(<span class="keyword">new</span> ImageCell(x + border + otherSpace, y + border + otherSpace + yOffset, width - <span class="number">2</span> * border));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> imageCells;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="meta">@AllArgsConstructor</span></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCell</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">int</span> y;</span><br><span class="line">      <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-------------------n=1---------------------</span><br><span class="line">x:7,y:7,width:131</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=2---------------------</span><br><span class="line">x:6,y:42,width:66</span><br><span class="line">x:78,y:42,width:66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=3---------------------</span><br><span class="line">x:45,y:6,width:66</span><br><span class="line">x:6,y:78,width:66</span><br><span class="line">x:78,y:78,width:66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=4---------------------</span><br><span class="line">x:6,y:6,width:66</span><br><span class="line">x:78,y:6,width:66</span><br><span class="line">x:6,y:78,width:66</span><br><span class="line">x:78,y:78,width:66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=5---------------------</span><br><span class="line">x:32,y:29,width:44</span><br><span class="line">x:80,y:29,width:44</span><br><span class="line">x:5,y:77,width:44</span><br><span class="line">x:53,y:77,width:44</span><br><span class="line">x:101,y:77,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=6---------------------</span><br><span class="line">x:5,y:29,width:44</span><br><span class="line">x:53,y:29,width:44</span><br><span class="line">x:101,y:29,width:44</span><br><span class="line">x:5,y:77,width:44</span><br><span class="line">x:53,y:77,width:44</span><br><span class="line">x:101,y:77,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=7---------------------</span><br><span class="line">x:56,y:5,width:44</span><br><span class="line">x:5,y:53,width:44</span><br><span class="line">x:53,y:53,width:44</span><br><span class="line">x:101,y:53,width:44</span><br><span class="line">x:5,y:101,width:44</span><br><span class="line">x:53,y:101,width:44</span><br><span class="line">x:101,y:101,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=8---------------------</span><br><span class="line">x:32,y:5,width:44</span><br><span class="line">x:80,y:5,width:44</span><br><span class="line">x:5,y:53,width:44</span><br><span class="line">x:53,y:53,width:44</span><br><span class="line">x:101,y:53,width:44</span><br><span class="line">x:5,y:101,width:44</span><br><span class="line">x:53,y:101,width:44</span><br><span class="line">x:101,y:101,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=9---------------------</span><br><span class="line">x:5,y:5,width:44</span><br><span class="line">x:53,y:5,width:44</span><br><span class="line">x:101,y:5,width:44</span><br><span class="line">x:5,y:53,width:44</span><br><span class="line">x:53,y:53,width:44</span><br><span class="line">x:101,y:53,width:44</span><br><span class="line">x:5,y:101,width:44</span><br><span class="line">x:53,y:101,width:44</span><br><span class="line">x:101,y:101,width:44</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取一个数字二进制中1的个数</title>
      <link href="2018/03/24/%E5%8F%96%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>2018/03/24/%E5%8F%96%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><ol><li><p>二进制中1的个数</p><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> (n&gt;<span class="number">0</span>)  &#123;</span><br><span class="line">        count++ ;</span><br><span class="line">        n &amp;= (n - <span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 复杂度: &lt; log2n</code></pre></li><li><p>方案二</p><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of one-bits in the two&#x27;s complement binary</span></span><br><span class="line"><span class="comment"> * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.  This function is</span></span><br><span class="line"><span class="comment"> * sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i the value whose bits are to be counted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of one-bits in the two&#x27;s complement binary</span></span><br><span class="line"><span class="comment"> *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HD, Figure 5-2</span></span><br><span class="line">    i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> 复杂度: 1</code></pre></li><li><p>方案三</p><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countBit1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp&lt;=n)  &#123;</span><br><span class="line">        <span class="keyword">if</span>((temp&amp;n)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            count++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>给定一个数字n计算从1到n每一个数字的二进制中包含1的个数</li></ol><pre><code>        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> div = i / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> mod = i % <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mod == <span class="number">1</span>) &#123;</span><br><span class="line">                ret[i] = ret[div] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ret[i] = ret[div];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><!--```flow--><!--st=>start: Start|past:>http://www.google.com[blank]--><!--e=>end: End:>http://www.google.com--><!--op1=>operation: My Operation|past--><!--op2=>operation: Stuff|current--><!--sub1=>subroutine: My Subroutine|invalid--><!--cond=>condition: Yes--><!--or No?|approved:>http://www.google.com--><!--c2=>condition: Good idea|rejected--><!--io=>inputoutput: catch something...|request--><!--st->op1(right)->cond--><!--cond(yes, right)->c2--><!--cond(no)->sub1(left)->op1--><!--c2(yes)->io->e--><!--c2(no)->op2->e--><!--```-->]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.util.concurrent概览</title>
      <link href="2018/03/24/java-util-concurrent%E6%A6%82%E8%A7%88/"/>
      <url>2018/03/24/java-util-concurrent%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><p>java.util.concurrent 包含许多线程安全、测试良好、高性能的并发构建块。不客气地说，创建 java.util.concurrent 的目的就是要实现 Collection 框架对数据结构所执行的并发操作。通过提供一组可靠的、高性能并发构建块，开发人员可以提高并发类的线程安全、可伸缩性、性能、可读性和可靠性。</p></blockquote></blockquote><blockquote><blockquote><p>如果一些类名看起来相似，可能是因为 java.util.concurrent 中的许多概念源自 Doug Lea 的 util.concurrent 库（请参阅 参考资料）。</p></blockquote></blockquote><h2 id="JDK-5-0-中的并发改进可以分为三组："><a href="#JDK-5-0-中的并发改进可以分为三组：" class="headerlink" title="JDK 5.0 中的并发改进可以分为三组："></a>JDK 5.0 中的并发改进可以分为三组：</h2><pre><code>1. JVM 级别更改。    大多数现代处理器对并发对某一硬件级别提供支持，通常以 compare-and-swap （CAS）指令形式。CAS 是一种低级别的、细粒度的技术，它允许多个线程更新一个内存位置，同时能够检测其他线程的冲突并进行恢复。它是许多高性能并发算法的基础。在 JDK 5.0 之前，Java 语言中用于协调线程之间的访问的惟一原语是同步，同步是更重量级和粗粒度的。公开 CAS 可以开发高度可伸缩的并发 Java 类。这些更改主要由 JDK 库类使用，而不是由开发人员使用。2. 低级实用程序类 -- 锁定和原子类。    使用 CAS 作为并发原语，ReentrantLock 类提供与 synchronized 原语相同的锁定和内存语义，然而这样可以更好地控制锁定（如计时的锁定等待、锁定轮询和可中断的锁定等待）和提供更好的可伸缩性（竞争时的高性能）。大多数开发人员将不再直接使用 ReentrantLock 类，而是使用在 ReentrantLock 类上构建的高级类。3. 高级实用程序类。    这些类实现并发构建块，每个计算机科学文本中都会讲述这些类 -- 信号、互斥、闩锁、屏障、交换程序、线程池和线程安全集合类等。大部分开发人员都可以在应用程序中用这些类，来替换许多（如果不是全部）同步、wait() 和 notify() 的使用，从而提高性能、可读性和正确性。</code></pre><h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><pre><code>本教程将重点介绍 java.util.concurrent 包提供的高级实用程序类 -- 线程安全集合、线程池和同步实用程序。这些是初学者和专家都可以使用的&quot;现成&quot;类。在第一小节中，我们将回顾并发的基本知识，尽管它不应取代对线程和线程安全的了解。那些一点都不熟悉线程的读者应该先参考一些关于线程的介绍，如&quot;Introduction to Java Threads&quot;教程（请参阅参考资料）。接下来的几个小节将研究 java.util.concurrent 中的高级实用程序类 -- 线程安全集合、线程池、信号和同步工具。最后一小节将介绍 java.util.concurrent 中的低级并发构建块，并提供一些性能测评来显示新 java.util.concurrent 类的可伸缩性的改进。</code></pre><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>什么是线程？</p><p> 所有重要的操作系统都支持进程的概念 – 独立运行的程序，在某种程度上相互隔离。</p><p> 线程有时称为 轻量级进程。与进程一样，它们拥有通过程序运行的独立的并发路径，并且每个线程都有自己的程序计数器，称为堆栈和本地变量。然而，线程存在于进程中，它们与同一进程内的其他线程共享内存、文件句柄以及每进程状态。</p><p> 今天，几乎每个操作系统都支持线程，允许执行多个可独立调度的线程，以便共存于一个进程中。因为一个进程中的线程是在同一个地址空间中执行的，所以多个线程可以同时访问相同对象，并且它们从同一堆栈中分配对象。虽然这使线程更易于与其他线程共享信息，但也意味着您必须确保线程之间不相互干涉。</p><p> 正确使用线程时，线程能带来诸多好处，其中包括更好的资源利用、简化开发、高吞吐量、更易响应的用户界面以及能执行异步处理。</p><p> Java 语言包括用于协调线程行为的原语，从而可以在不违反设计原型或者不破坏数据结构的前提下安全地访问和修改共享变量。</p></li><li><p>线程有哪些功能？</p><p> 在 Java 程序中存在很多理由使用线程，并且不管开发人员知道线程与否，几乎每个 Java 应用程序都使用线程。许多 J2SE 和 J2EE 工具可以创建线程，如 RMI、Servlet、Enterprise JavaBeans 组件和 Swing GUI 工具包。</p></li><li><p>使用线程的理由包括：</p><p> • 更易响应的用户界面。 事件驱动的 GUI 工具包（如 AWT 或 Swing）使用单独的事件线程来处理 GUI 事件。从事件线程中调用通过 GUI 对象注册的事件监听器。然而，如果事件监听器将执行冗长的任务（如文档拼写检查），那么 UI 将出现冻结，因为事件线程直到冗长任务完毕之后才能处理其他事件。通过在单独线程中执行冗长操作，当执行冗长后台任务时，UI 能继续响应。</p><p> • 使用多处理器。 多处理器（MP）系统变得越来越便宜，并且分布越来越广泛。因为调度的基本单位通常是线程，所以不管有多少处理器可用，一个线程的应用程序一次只能在一个处理器上运行。在设计良好的程序中，通过更好地利用可用的计算机资源，多线程能够提高吞吐量和性能。</p><p> • 简化建模。 有效使用线程能够使程序编写变得更简单，并易于维护。通过合理使用线程，个别类可以避免一些调度的详细、交叉存取操作、异步 IO 和资源等待以及其他复杂问题。相反，它们能专注于域的要求，简化开发并改进可靠性。</p><p> • 异步或后台处理。 服务器应用程序可以同时服务于许多远程客户机。如果应用程序从 socket 中读取数据，并且没有数据可以读取，那么对 read() 的调用将被阻塞，直到有数据可读。在单线程应用程序中，这意味着当某一个线程被阻塞时，不仅处理相应请求要延迟，而且处理所有请求也将延迟。然而，如果每个 socket 都有自己的 IO 线程，那么当一个线程被阻塞时，对其他并发请求行为没有影响。</p></li><li><p>线程安全</p><p> 如果将这些类用于多线程环境中，虽然确保这些类的线程安全比较困难，但线程安全却是必需的。java.util.concurrent 规范进程的一个目标就是提供一组线程安全的、高性能的并发构建块，从而使开发人员能够减轻一些编写线程安全类的负担。</p><p> 线程安全类非常难以明确定义，大多数定义似乎都是完全循环的。快速 Google 搜索会显示下列线程安全代码定义的例子，但这些定义（或者更确切地说是描述）通常没什么帮助：</p><p> • . . . can be called from multiple programming threads without unwanted interaction between the threads.</p><p> • . . . may be called by more than on thread at a time without requiring any other action on the caller’s part.</p><p> 通过类似这样的定义，不奇怪我们为什么对线程安全如此迷惑。这些定义几乎就是在说”如果可以从多个线程安全调用类，那么该类就是线程安全的”。这当然是线程安全的解释，但对我们区别线程安全类和不安全类没有什么帮助。我们使用”安全”是为了说明什么？</p><p> 要成为线程安全的类，首先它必须在单线程环境中正确运行。如果正确实现了类，那么说明它符合规范，对该类的对象的任何顺序的操作（公共字段的读写、公共方法的调用）都不应该使对象处于无效状态；观察将处于无效状态的对象；或违反类的任何变量、前置条件或后置条件。</p><p> 而且，要成为线程安全的类，在从多个线程访问时，它必须继续正确运行，而不管运行时环境执行那些线程的调度和交叉，且无需对部分调用代码执行任何其他同步。结果是对线程安全对象的操作将用于按固定的整体一致顺序出现所有线程。</p><p> 如果没有线程之间的某种明确协调，比如锁定，运行时可以随意在需要时在多线程中交叉操作执行。</p><p> 在 JDK 5.0 之前，确保线程安全的主要机制是 synchronized 原语。访问共享变量（那些可以由多个线程访问的变量）的线程必须使用同步来协调对共享变量的读写访问。java.util.concurrent 包提供了一些备用并发原语，以及一组不需要任何其他同步的线程安全实用程序类。</p></li><li><p>令人厌烦的并发</p><p> 即使您的程序从没有明确创建线程，也可能会有许多工具或框架代表您创建了线程，这时要求从这些线程调用的类是线程安全的。这样会对开发人员带来较大的设计和实现负担，因为开发线程安全类比开发非线程安全类有更多要注意的事项，且需要更多的分析。</p></li><li><p>AWT 和 Swing</p><p> 这些 GUI 工具包创建了称为时间线程的后台线程，将从该线程调用通过 GUI 组件注册的监听器。因此，实现这些监听器的类必须是线程安全的。</p></li><li><p>TimerTask</p><p> JDK 1.3 中引入的 TimerTask 工具允许稍后执行任务或计划定期执行任务。在 Timer 线程中执行 TimerTask 事件，这意味着作为 TimerTask 执行的任务必须是线程安全的。</p></li><li><p>Servlet 和 JavaServer Page 技术</p><p> Servlet 容器可以创建多个线程，在多个线程中同时调用给定 servlet，从而进行多个请求。因此 servlet 类必须是线程安全的。</p></li><li><p>RMI</p><p> 远程方法调用（remote method invocation，RMI）工具允许调用其他 JVM 中运行的操作。实现远程对象最普遍的方法是扩展 UnicastRemoteObject。例示 UnicastRemoteObject 时，它是通过 RMI 调度器注册的，该调度器可能创建一个或多个线程，将在这些线程中执行远程方法。因此，远程类必须是线程安全的。</p><p> 正如所看到的，即使应用程序没有明确创建线程，也会发生许多可能会从其他线程调用类的情况。幸运的是，java.util.concurrent 中的类可以大大简化编写线程安全类的任务。</p></li></ol><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">例子 -- 非线程安全 servlet</span><br><span class="line"></span><br><span class="line">    下列 servlet 看起来像无害的留言板 servlet，它保存每个来访者的姓名。然而，该 servlet 不是线程安全的，而这个 servlet 应该是线程安全的。问题在于它使用 <span class="type">HashSet</span> 存储来访者的姓名，<span class="type">HashSet</span> 不是线程安全的类。</span><br><span class="line"></span><br><span class="line">    当我们说这个 servlet 不是线程安全的时，是说它所造成的破坏不仅仅是丢失留言板输入。在最坏的情况下，留言板数据结构都可能被破坏并且无法恢复。</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UnsafeGuestbookServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Set</span> visitorSet = <span class="keyword">new</span> <span class="type">HashSet</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> httpServletRequest,</span><br><span class="line"></span><br><span class="line">             <span class="type">HttpServletResponse</span> httpServletResponse) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> visitorName = httpServletRequest.getParameter(<span class="string">&quot;NAME&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visitorName != <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">            visitorSet.add(visitorName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    通过将 visitorSet 的定义更改为下列代码，可以使该类变为线程安全的：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Set</span> visitorSet = <span class="type">Collections</span>.synchronizedSet(<span class="keyword">new</span> <span class="type">HashSet</span>());</span><br><span class="line"></span><br><span class="line">    如上所示的例子显示线程的内置支持是一把双刃剑 -- 虽然它使构建多线程应用程序变得很容易，但它同时要求开发人员更加注意并发问题，甚至在使用留言板 servlet 这样普通的东西时也是如此。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程安全集合"><a href="#线程安全集合" class="headerlink" title="线程安全集合"></a>线程安全集合</h2><blockquote><blockquote><p>JDK 1.2 中引入的 Collection 框架是一种表示对象集合的高度灵活的框架，它使用基本接口 List、Set 和 Map。通过 JDK 提供每个集合的多次实现（HashMap、Hashtable、TreeMap、WeakHashMap、HashSet、TreeSet、Vector、ArrayList、LinkedList 等等）。其中一些集合已经是线程安全的（Hashtable 和 Vector），通过同步的封装工厂（Collections.synchronizedMap()、synchronizedList() 和 synchronizedSet()），其余的集合均可表现为线程安全的。<br>java.util.concurrent 包添加了多个新的线程安全集合类（ConcurrentHashMap、CopyOnWriteArrayList 和 CopyOnWriteArraySet）。这些类的目的是提供高性能、高度可伸缩性、线程安全的基本集合类型版本。<br>java.util 中的线程集合仍有一些缺点。例如，在迭代锁定时，通常需要将该锁定保留在集合中，否则，会有抛出 ConcurrentModificationException 的危险。（这个特性有时称为条件线程安全；有关的更多说明，请参阅参考资料。）此外，如果从多个线程频繁地访问集合，则常常不能很好地执行这些类。java.util.concurrent 中的新集合类允许通过在语义中的少量更改来获得更高的并发。<br>JDK 5.0 还提供了两个新集合接口 – Queue 和 BlockingQueue。Queue 接口与 List 类似，但它只允许从后面插入，从前面删除。通过消除 List 的随机访问要求，可以创建比现有 ArrayList 和 LinkedList 实现性能更好的 Queue 实现。因为 List 的许多应用程序实际上不需要随机访问，所以Queue 通常可以替代 List，来获得更好的性能。</p></blockquote></blockquote><ol><li><p>弱一致的迭代器</p><p> java.util 包中的集合类都返回 fail-fast 迭代器，这意味着它们假设线程在集合内容中进行迭代时，集合不会更改它的内容。如果 fail-fast 迭代器检测到在迭代过程中进行了更改操作，那么它会抛出 ConcurrentModificationException，这是不可控异常。</p><p> 在迭代过程中不更改集合的要求通常会对许多并发应用程序造成不便。相反，比较好的是它允许并发修改并确保迭代器只要进行合理操作，就可以提供集合的一致视图，如 java.util.concurrent 集合类中的迭代器所做的那样。</p><p> java.util.concurrent 集合返回的迭代器称为弱一致的（weakly consistent）迭代器。对于这些类，如果元素自从迭代开始已经删除，且尚未由 next() 方法返回，那么它将不返回到调用者。如果元素自迭代开始已经添加，那么它可能返回调用者，也可能不返回。在一次迭代中，无论如何更改底层集合，元素不会被返回两次。</p></li><li><p>CopyOnWriteArrayList 和 CopyOnWriteArraySet</p><p> 可以用两种方法创建线程安全支持数据的 List – Vector 或封装 ArrayList 和 Collections.synchronizedList()。java.util.concurrent 包添加了名称繁琐的 CopyOnWriteArrayList。为什么我们想要新的线程安全的List类？为什么Vector还不够？</p><p> 最简单的答案是与迭代和并发修改之间的交互有关。使用 Vector 或使用同步的 List 封装器，返回的迭代器是 fail-fast 的，这意味着如果在迭代过程中任何其他线程修改 List，迭代可能失败。</p></li><li><p>Vector 的非常普遍的应用程序是存储通过组件注册的监听器的列表。当发生适合的事件时，该组件将在监听器的列表中迭代，调用每个监听器。为了防止 ConcurrentModificationException，迭代线程必须复制列表或锁定列表，以便进行整体迭代，而这两种情况都需要大量的性能成本。</p></li><li><p>CopyOnWriteArrayList 类通过每次添加或删除元素时创建支持数组的新副本，避免了这个问题，但是进行中的迭代保持对创建迭代器时的当前副本进行操作。虽然复制也会有一些成本，但是在许多情况下，迭代要比修改多得多，在这些情况下，写入时复制要比其他备用方法具有更好的性能和并发性。</p></li><li><p>如果应用程序需要 Set 语义，而不是 List，那么还有一个 Set 版本 – CopyOnWriteArraySet。</p></li><li><p>ConcurrentHashMap</p><p> 正如已经存在线程安全的 List 的实现，您可以用多种方法创建线程安全的、基于 hash 的 Map – Hashtable，并使用 Collections.synchronizedMap() 封装 HashMap。JDK 5.0 添加了 ConcurrentHashMap 实现，该实现提供了相同的基本线程安全的 Map 功能，但它大大提高了并发性。</p><p> Hashtable 和 synchronizedMap 所采取的获得同步的简单方法（同步 Hashtable 中或者同步的 Map 封装器对象中的每个方法）有两个主要的不足。首先，这种方法对于可伸缩性是一种障碍，因为一次只能有一个线程可以访问 hash 表。同时，这样仍不足以提供真正的线程安全性，许多公用的混合操作仍然需要额外的同步。虽然诸如 get() 和 put() 之类的简单操作可以在不需要额外同步的情况下安全地完成，但还是有一些公用的操作序列，例如迭代或者 put-if-absent（空则放入），需要外部的同步，以避免数据争用。</p><p> Hashtable 和 Collections.synchronizedMap 通过同步每个方法获得线程安全。这意味着当一个线程执行一个 Map 方法时，无论其他线程要对 Map 进行什么样操作，都不能执行，直到第一个线程结束才可以。</p><p> 对比来说，ConcurrentHashMap 允许多个读取几乎总是并发执行，读和写操作通常并发执行，多个同时写入经常并发执行。结果是当多个线程需要访问同一 Map 时，可以获得更高的并发性。</p><p> 在大多数情况下，ConcurrentHashMap 是 Hashtable或 Collections.synchronizedMap(new HashMap()) 的简单替换。然而，其中有一个显著不同，即 ConcurrentHashMap 实例中的同步不锁定映射进行独占使用。实际上，没有办法锁定 ConcurrentHashMap 进行独占使用，它被设计用于进行并发访问。为了使集合不被锁定进行独占使用，还提供了公用的混合操作的其他（原子）方法，如 put-if-absent。ConcurrentHashMap 返回的迭代器是弱一致的，意味着它们将不抛出ConcurrentModificationException ，将进行”合理操作”来反映迭代过程中其他线程对 Map 的修改。</p></li><li><p>队列</p><p> 原始集合框架包含三个接口：List、Map 和 Set。List 描述了元素的有序集合，支持完全随即访问 – 可以在任何位置添加、提取或删除元素。</p><p> LinkedList 类经常用于存储工作元素（等待执行的任务）的列表或队列。然而，List 提供的灵活性比该公用应用程序所需要的多得多，这个应用程序通常在后面插入元素，从前面删除元素。但是要支持完整 List 接口则意味着 LinkedList 对于这项任务不像原来那样有效。Queue 接口比 List 简单得多，仅包含 put() 和 take() 方法，并允许比 LinkedList 更有效的实现。</p><p> Queue 接口还允许实现来确定存储元素的顺序。ConcurrentLinkedQueue 类实现先进先出（first-in-first-out，FIFO）队列，而 PriorityQueue 类实现优先级队列（也称为堆），它对于构建调度器非常有用，调度器必须按优先级或预期的执行时间执行任务。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Queue</span> <span class="keyword">extends</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E x)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchElementException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">element</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchElementException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 实现 Queue 的类是：</p><pre><code> • LinkedList 已经进行了改进来实现 Queue。 • PriorityQueue 非线程安全的优先级对列（堆）实现，根据自然顺序或比较器返回元素。 • ConcurrentLinkedQueue 快速、线程安全的、无阻塞 FIFO 队列。</code></pre></li><li><p>任务管理之线程创建</p><p> 线程最普遍的一个应用程序是创建一个或多个线程，以执行特定类型的任务。Timer 类创建线程来执行 TimerTask 对象，Swing 创建线程来处理 UI 事件。在这两种情况中，在单独线程中执行的任务都假定是短期的，这些线程是为了处理大量短期任务而存在的。</p><p> 在其中每种情况中，这些线程一般都有非常简单的结构：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (no tasks)</span><br><span class="line"></span><br><span class="line">    wait <span class="keyword">for</span> a task;</span><br><span class="line"></span><br><span class="line">  execute the task;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 通过例示从 Thread 获得的对象并调用 Thread.start() 方法来创建线程。可以用两种方法创建线程：通过扩展 Thread 和覆盖 run() 方法，或者通过实现 Runnable 接口和使用 Thread(Runnable) 构造函数：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/* do work */</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread t = <span class="keyword">new</span> WorkerThread();</span><br><span class="line"></span><br><span class="line">t.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 或者：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/* do work */</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重新使用线程</p><p> 因为多个原因，类似 Swing GUI 的框架为事件任务创建单一线程，而不是为每项任务创建新的线程。首先是因为创建线程会有间接成本，所以创建线程来执行简单任务将是一种资源浪费。通过重新使用事件线程来处理多个事件，启动和拆卸成本（随平台而变）会分摊在多个事件上。</p><p> Swing 为事件使用单一后台线程的另一个原因是确保事件不会互相干涉，因为直到前一事件结束，下一事件才开始处理。该方法简化了事件处理程序的编写。</p><p> 使用多个线程，将要做更多的工作来确保一次仅一个线程地执行线程相关的代码。</p></li><li><p>如何不对任务进行管理</p><p> 大多数服务器应用程序（如 Web 服务器、POP 服务器、数据库服务器或文件服务器）代表远程客户机处理请求，这些客户机通常使用 socket 连接到服务器。对于每个请求，通常要进行少量处理（获得该文件的代码块，并将其发送回 socket），但是可能会有大量（且不受限制）的客户机请求服务。</p><p> 用于构建服务器应用程序的简单化模型会为每个请求创建新的线程。下列代码段实现简单的 Web 服务器，它接受端口 80 的 socket 连接，并创建新的线程来处理请求。不幸的是，该代码不是实现 Web 服务器的好方法，因为在重负载条件下它将失败，停止整台服务器。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnreliableWebServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Socket connection = socket.accept();</span><br><span class="line"></span><br><span class="line">      Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          handleRequest(connection);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Don&#x27;t do this!</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Thread(r).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当服务器被请求吞没时，UnreliableWebServer 类不能很好地处理这种情况。每次有请求时，就会创建新的类。根据操作系统和可用内存，可以创建的线程数是有限的。</p><p> 不幸的是，您通常不知道限制是多少 – 只有当应用程序因为 OutOfMemoryError 而崩溃时才发现。</p><p> 如果足够快地在这台服务器上抛出请求的话，最终其中一个线程创建将失败，生成的 Error 会关闭整个应用程序。当一次仅能有效支持很少线程时，没有必要创建上千个</p><p> 线程，无论如何，这样使用资源可能会损害性能。创建线程会使用相当一部分内存，其中包括有两个堆栈（Java 和 C），以及每线程数据结构。如果创建过多线程，其中</p><p> 每个线程都将占用一些 CPU 时间，结果将使用许多内存来支持大量线程，每个线程都运行得很慢。这样就无法很好地使用计算资源。</p></li><li><p>使用线程池解决问题</p><p> 为任务创建新的线程并不一定不好，但是如果创建任务的频率高，而平均任务持续时间低，我们可以看到每项任务创建一个新的线程将产生性能（如果负载不可预知，还有稳定性）问题。</p><p> 如果不是每项任务创建一个新的线程，则服务器应用程序必须采取一些方法来限制一次可以处理的请求数。这意味着每次需要启动新的任务时，它不能仅调用下列代码。</p><p> new Thread(runnable).start()</p><p> 管理一大组小任务的标准机制是组合工作队列和线程池。工作队列就是要处理的任务的队列，前面描述的 Queue 类完全适合。线程池是线程的集合，每个线程都提取公用工作队列。当一个工作线程完成任务处理后，它会返回队列，查看是否有其他任务需要处理。如果有，它会转移到下一个任务，并开始处理。</p><p> 线程池为线程生命周期间接成本问题和资源崩溃问题提供了解决方案。通过对多个任务重新使用线程，创建线程的间接成本将分布到多个任务中。作为一种额外好处，因为请求到达时，线程已经存在，从而可以消除由创建线程引起的延迟。因此，可以立即处理请求，使应用程序更易响应。而且，通过正确调整线程池中的线程数，可以强制超出特定限制的任何请求等待，直到有线程可以处理它，它们等待时所消耗的资源要少于使用额外线程所消耗的资源，这样可以防止资源崩溃。</p></li><li><p>Executor 框架</p><p> java.util.concurrent 包中包含灵活的线程池实现，但是更重要的是，它包含用于管理实现 Runnable 的任务的执行的整个框架。该框架称为 Executor 框架。</p><p> Executor 接口相当简单。它描述将运行 Runnable 的对象：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 任务运行于哪个线程不是由该接口指定的，这取决于使用的 Executor 的实现。它可以运行于后台线程，如 Swing 事件线程，或者运行于线程池，或者调用线程，或者新的线程，它甚至可以运行于其他 JVM！通过同步的 Executor 接口提交任务，从任务执行策略中删除任务提交。Executor 接口独自关注任务提交 – 这是Executor 实现的选择，确定执行策略。这使在部署时调整执行策略（队列限制、池大小、优先级排列等等）更加容易，更改的代码最少。</p><p> java.util.concurrent 中的大多数 Executor 实现还实现 ExecutorService 接口，这是对 Executor 的扩展，它还管理执行服务的生命周期。这使它们更易于管理，并向生命可能比单独 Executor 的生命更长的应用程序提供服务。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                           TimeUnit unit)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// other convenience methods for submitting tasks</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Executor</p><p> java.util.concurrent 包包含多个 Executor 实现，每个实现都实现不同的执行策略。什么是执行策略？执行策略定义何时在哪个线程中运行任务，执行任务可能消耗的资源级别（线程、内存等等），以及如果执行程序超载该怎么办。</p><p> 执行程序通常通过工厂方法例示，而不是通过构造函数。Executors 类包含用于构造许多不同类型的 Executor 实现的静态工厂方法：</p><p> • Executors.newCachedThreadPool() 创建不限制大小的线程池，但是当以前创建的线程可以使用时将重新使用那些线程。如果没有现有线程可用，</p><p> • 将创建新的线程并将其添加到池中。使用不到 60 秒的线程将终止并从缓存中删除。</p><p> • Executors.newFixedThreadPool(int n) 创建线程池，其重新使用在不受限制的队列之外运行的固定线程组。在关闭前，所有线程都会因为执行</p><p> • 过程中的失败而终止，如果需要执行后续任务，将会有新的线程来代替这些线程。</p><p> • Executors.newSingleThreadExecutor() 创建 Executor，其使用在不受限制的队列之外运行的单一工作线程，与 Swing 事件线程非常相似。</p><p> • 保证顺序执行任务，在任何给定时间，不会有多个任务处于活动状态。</p><p> 更可靠的 Web 服务器 – 使用 Executor</p><p> 前面 如何不对任务进行管理 中的代码显示了如何不用编写可靠服务器应用程序。幸运的是，修复这个示例非常简单，只需将 Thread.start() 调用替换为向 Executor 提交任务即可：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReliableWebServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Executor pool =</span><br><span class="line"></span><br><span class="line">    Executors.newFixedThreadPool(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Socket connection = socket.accept();</span><br><span class="line"></span><br><span class="line">      Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          handleRequest(connection);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      pool.execute(r);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 注意，本例与前例之间的区别仅在于 Executor 的创建以及如何提交执行的任务。</p></li></ol><ol start="9"><li>定制 ThreadPoolExecutor</li></ol><blockquote><blockquote><p>Executors 中的 newFixedThreadPool 和 newCachedThreadPool 工厂方法返回的 Executor 是类 ThreadPoolExecutor 的实例，是高度可定制的。<br>通过使用包含 ThreadFactory 变量的工厂方法或构造函数的版本，可以定义池线程的创建。ThreadFactory 是工厂对象，其构造执行程序要使用的新线程。<br>使用定制的线程工厂，创建的线程可以包含有用的线程名称，并且这些线程是守护线程，属于特定线程组或具有特定优先级。<br>下面是线程工厂的例子，它创建守护线程，而不是创建用户线程：</p></blockquote></blockquote><pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line"></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>有时，Executor 不能执行任务，因为它已经关闭或者因为 Executor 使用受限制队列存储等待任务，而该队列已满。在这种情况下，需要咨询执行程序的 RejectedExecutionHandler 来确定如何处理任务 -- 抛出异常（默认情况），放弃任务，在调用者的线程中执行任务，或放弃队列中最早的任务以为新任务腾出空间。ThreadPoolExecutor.setRejectedExecutionHandler 可以设置拒绝的执行处理程序。还可以扩展 ThreadPoolExecutor，并覆盖方法 beforeExecute 和 afterExecute，以添加装置，添加记录，添加计时，重新初始化线程本地变量，或进行其他执行定制。 需要特别考虑的问题    使用 Executor 框架会从执行策略中删除任务提交，一般情况下，人们希望这样，那是因为它允许我们灵活地调整执行策略，不必更改许多位置的代码。然而，当提交代码暗含假设特定执行策略时，存在多种情况，在这些情况下，重要的是选择的 Executor 实现一致的执行策略。    这类情况中的其中的一种就是一些任务同时等待其他任务完成。在这种情况下，当线程池没有足够的线程时，如果所有当前执行的任务都在等待另一项任务，而该任务因为线程池已满不能执行，那么线程池可能会死锁。    另一种相似的情况是一组线程必须作为共同操作组一起工作。在这种情况下，需要确保线程池能够容纳所有线程。    如果应用程序对特定执行程序进行了特定假设，那么应该在 Executor 定义和初始化的附近对这些进行说明，从而使善意的更改不会破坏应用程序的正确功能。调整线程池    创建 Executor 时，人们普遍会问的一个问题是&quot;线程池应该有多大？&quot;。当然，答案取决于硬件和将执行的任务类型（它们是受计算限制或是受 IO 的限制？）。    如果线程池太小，资源可能不能被充分利用，在一些任务还在工作队列中等待执行时，可能会有处理器处于闲置状态。    另一方面，如果线程池太大，则将有许多有效线程，因为大量线程或有效任务使用内存，或者因为每项任务要比使用少量线程有更多上下文切换，性能可能会受损。    所以假设为了使处理器得到充分使用，线程池应该有多大？如果知道系统有多少处理器和任务的计算时间和等待时间的近似比率，Amdahl 法则提供很好的近似公式。    用 WT 表示每项任务的平均等待时间，ST 表示每项任务的平均服务时间（计算时间）。则 WT/ST 是每项任务等待所用时间的百分比。对于 N 处理器系统，池中可以近似有 N*(1+WT/ST) 个线程。    好的消息是您不必精确估计 WT/ST。&quot;合适的&quot;池大小的范围相当大；只需要避免&quot;过大&quot;和&quot;过小&quot;的极端情况即可。</code></pre><ol start="10"><li><p>Future 接口</p><p>Future 接口允许表示已经完成的任务、正在执行过程中的任务或者尚未开始执行的任务。通过 Future 接口，可以尝试取消尚未完成的任务，查询任务已经完成还是取消了，以及提取（或等待）任务的结果值。</p><p>FutureTask 类实现了 Future，并包含一些构造函数，允许将 Runnable 或 Callable（会产生结果的 Runnable）和 Future 接口封装。因为 FutureTask 也实现 Runnable，所以可以只将 FutureTask 提供给 Executor。一些提交方法（如 ExecutorService.submit()）除了提交任务之外，还将返回 Future 接口。</p><p>Future.get() 方法检索任务计算的结果（或如果任务完成，但有异常，则抛出 ExecutionException）。如果任务尚未完成，那么 Future.get() 将被阻塞，直到任务完成；如果任务已经完成，那么它将立即返回结果。</p><p>使用 Future 构建缓存</p><pre><code>该示例代码与 java.util.concurrent 中的多个类关联，突出显示了 Future 的功能。它实现缓存，使用 Future 描述缓存值，该值可能已经计算，或者可能在其他线程中&quot;正在构造&quot;。它利用 ConcurrentHashMap 中的原子 putIfAbsent() 方法，确保仅有一个线程试图计算给定关键字的值。如果其他线程随后请求同一关键字的值，它仅能等待（通过 Future.get() 的帮助）第一个线程完成。因此两个线程不会计算相同的值。</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ConcurrentMap&gt; map = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    Executor executor = Executors.newFixedThreadPool(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FutureTask f = map.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            Callable c = <span class="keyword">new</span> Callable() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> V <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// return value associated with key</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            f = <span class="keyword">new</span> FutureTask(c);</span><br><span class="line"></span><br><span class="line">            FutureTask old = map.putIfAbsent(key, f);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (old == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">                executor.execute(f);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f = old;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CompletionService</p><p>CompletionService 将执行服务与类似 Queue 的接口组合，从任务执行中删除任务结果的处理。CompletionService 接口包含用来提交将要执行的任务的 submit() 方法和用来询问下一完成任务的 take()/poll() 方法。</p><p>CompletionService 允许应用程序结构化，使用 Producer/Consumer 模式，其中生产者创建任务并提交，消费者请求完成任务的结果并处理这些结果。CompletionService 接口由 ExecutorCompletionService 类实现，该类使用 Executor 处理任务并从 CompletionService 导出 submit/poll/take 方法。</p><p>下列代码使用 Executor 和 CompletionService 来启动许多”solver”任务，并使用第一个生成非空结果的任务的结果，然后取消其余任务：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(Executor e, Collection&gt; solvers)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        CompletionService ecs = <span class="keyword">new</span> ExecutorCompletionService(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = solvers.size();</span><br><span class="line"></span><br><span class="line">        List&gt; futures = <span class="keyword">new</span> ArrayList&gt;(n);</span><br><span class="line"></span><br><span class="line">        Result result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Callable s : solvers)</span><br><span class="line"></span><br><span class="line">                futures.add(ecs.submit(s));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    Result r = ecs.take().get();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        result = r;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span>(ExecutionException ignore) &#123;&#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Future f : futures)</span><br><span class="line"></span><br><span class="line">                f.cancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">            use(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java-util-concurrent-中其他类别的有用的类也是同步工具。这组类相互协作，控制一个或多个线程的执行流。"><a href="#java-util-concurrent-中其他类别的有用的类也是同步工具。这组类相互协作，控制一个或多个线程的执行流。" class="headerlink" title="java.util.concurrent 中其他类别的有用的类也是同步工具。这组类相互协作，控制一个或多个线程的执行流。"></a>java.util.concurrent 中其他类别的有用的类也是同步工具。这组类相互协作，控制一个或多个线程的执行流。</h2><p>Semaphore、CyclicBarrier、CountdownLatch 和 Exchanger 类都是同步工具的例子。每个类都有线程可以调用的方法，方法是否被阻塞取决于正在使用的特定同步工具的状态和规则。</p></li><li><p>Semaphore</p><p> Semaphore 类实现标准 Dijkstra 计数信号。计数信号可以认为具有一定数量的许可权，该许可权可以获得或释放。如果有剩余的许可权，acquire() 方法将成功，否则该方法将被阻塞，直到有可用的许可权（通过其他线程释放许可权）。线程一次可以获得多个许可权。</p><p> 计数信号可以用于限制有权对资源进行并发访问的线程数。该方法对于实现资源池或限制 Web 爬虫（Web crawler）中的输出 socket 连接非常有用。</p><p> 注意信号不跟踪哪个线程拥有多少许可权；这由应用程序来决定，以确保何时线程释放许可权，该信号表示其他线程拥有许可权或者正在释放许可权，以及其他线程知道它的许可权已释放。</p></li><li><p>互斥</p><p> 计数信号的一种特殊情况是互斥，或者互斥信号。互斥就是具有单一许可权的计数信号，意味着在给定时间仅一个线程可以具有许可权（也称为二进制信号）。互斥可以用于管理对共享资源的独占访问。</p><p> 虽然互斥许多地方与锁定一样，但互斥还有一个锁定通常没有的其他功能，就是互斥可以由具有许可权的线程之外的其他线程来释放。这在死锁恢复时会非常有用。</p><p> CyclicBarrier 类可以帮助同步，它允许一组线程等待整个线程组到达公共屏障点。CyclicBarrier 是使用整型变量构造的，其确定组中的线程数。当一个线程到达屏障时（通过调用 CyclicBarrier.await()），它会被阻塞，直到所有线程都到达屏障，然后在该点允许所有线程继续执行。该操作与许多家庭逛商业街相似 – 每个家庭成员都自己走，并商定 1:00 在电影院集合。当您到电影院但不是所有人都到了时，您会坐下来等其他人到达。然后所有人一起离开。</p><p> 认为屏障是循环的是因为它可以重新使用；一旦所有线程都已经在屏障处集合并释放，则可以将该屏障重新初始化到它的初始状态。 还可以指定在屏障处等待时的超时；如果在该时间内其余线程还没有到达屏障，则认为屏障被打破，所有正在等待的线程会收到 BrokenBarrierException。</p><p> 下列代码将创建 CyclicBarrier 并启动一组线程，每个线程将计算问题的一部分，等待所有其他线程结束之后，再检查解决方案是否达成一致。如果不一致，那么每个工作线程将开始另一个迭代。该例将使用 CyclicBarrier 变量，它允许注册 Runnable，在所有线程到达屏障但还没有释放任何线程时执行 Runnable。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solver</span> </span>&#123; <span class="comment">// Code sketch</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">final</span> Problem p, <span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> CyclicBarrier barrier =</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> CyclicBarrier(nThreads,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; p.checkConvergence(); &#125;&#125;</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; ++i) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> id = i;</span><br><span class="line"></span><br><span class="line">      Runnable worker = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Segment segment = p.createSegment(id);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!p.converged()) &#123;</span><br><span class="line"></span><br><span class="line">              segment.update();</span><br><span class="line"></span><br><span class="line">              barrier.await();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">catch</span>(Exception e) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Thread(worker).start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CountdownLatch</p><p> CountdownLatch 类与 CyclicBarrier 相似，因为它的角色是对已经在它们中间分摊了问题的一组线程进行协调。它也是使用整型变量构造的，指明计数的初始值，但是与 CyclicBarrier 不同的是，CountdownLatch 不能重新使用。</p><p> 其中，CyclicBarrier 是到达屏障的所有线程的大门，只有当所有线程都已经到达屏障或屏障被打破时，才允许这些线程通过，CountdownLatch 将到达和等待功能分离。任何线程都可以通过调用 countDown() 减少当前计数，这种不会阻塞线程，而只是减少计数。await() 方法的行为与 CyclicBarrier.await() 稍微有所不同，调用 await() 任何线程都会被阻塞，直到闩锁计数减少为零，在该点等待的所有线程才被释放，对 await() 的后续调用将立即返回。</p><p> 当问题已经分解为许多部分，每个线程都被分配一部分计算时，CountdownLatch 非常有用。在工作线程结束时，它们将减少计数，协调线程可以在闩锁处等待当前这一批计算结束，然后继续移至下一批计算。</p><p> 相反地，具有计数 1 的 CountdownLatch 类可以用作”启动大门”，来立即启动一组线程；工作线程可以在闩锁处等待，协调线程减少计数，从而立即释放所有工作线程。下例使用两个 CountdownLatche。一个作为启动大门，一个在所有工作线程结束时释放线程：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">     CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) <span class="comment">// create and start threads</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(startSignal, doneSignal)).start();</span><br><span class="line"></span><br><span class="line">     doSomethingElse();            <span class="comment">// don&#x27;t let them run yet</span></span><br><span class="line"></span><br><span class="line">     startSignal.countDown();      <span class="comment">// let all threads proceed</span></span><br><span class="line"></span><br><span class="line">     doSomethingElse();</span><br><span class="line"></span><br><span class="line">     doneSignal.await();           <span class="comment">// wait for all to finish</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch startSignal;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</span><br><span class="line"></span><br><span class="line">   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.startSignal = startSignal;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.doneSignal = doneSignal;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        startSignal.await();</span><br><span class="line"></span><br><span class="line">        doWork();</span><br><span class="line"></span><br><span class="line">        doneSignal.countDown();</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;&#125; <span class="comment">// return;</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>Exchanger 类方便了两个共同操作线程之间的双向交换；这样，就像具有计数为 2 的 CyclicBarrier，并且两个线程在都到达屏障时可以”交换”一些状态。（Exchanger 模式有时也称为聚集。）</p><p> Exchanger 通常用于一个线程填充缓冲（通过读取 socket），而另一个线程清空缓冲（通过处理从 socket 收到的命令）的情况。当两个线程在屏障处集合时，它们交换缓冲。下列代码说明了这项技术：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FillAndEmpty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   Exchanger exchanger = <span class="keyword">new</span> Exchanger();</span><br><span class="line"></span><br><span class="line">   DataBuffer initialEmptyBuffer = <span class="keyword">new</span> DataBuffer();</span><br><span class="line"></span><br><span class="line">   DataBuffer initialFullBuffer = <span class="keyword">new</span> DataBuffer();</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">FillingLoop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       DataBuffer currentBuffer = initialEmptyBuffer;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (currentBuffer != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">           addToBuffer(currentBuffer);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (currentBuffer.full())</span><br><span class="line"></span><br><span class="line">             currentBuffer = exchanger.exchange(currentBuffer);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123; ... handle ... &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">EmptyingLoop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       DataBuffer currentBuffer = initialFullBuffer;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (currentBuffer != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">           takeFromBuffer(currentBuffer);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (currentBuffer.empty())</span><br><span class="line"></span><br><span class="line">             currentBuffer = exchanger.exchange(currentBuffer);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123; ... handle ...&#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> FillingLoop()).start();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> EmptyingLoop()).start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>锁定和原子之Lock</p><p> Java 语言内置了锁定工具 – synchronized 关键字。当线程获得监视器时（内置锁定），其他线程如果试图获得相同锁定，那么它们将被阻塞，直到第一个线程释放该锁定。同步还确保随后获得相同锁定的线程可以看到之前的线程在具有该锁定时所修改的变量的值，从而确保如果类正确地同步了共享状态的访问权，那么线程将不会看到变量的”失效”值，这是缓存或编译器优化的结果。</p><p> 虽然同步没有什么问题，但它有一些限制，在一些高级应用程序中会造成不便。Lock 接口将内置监视器锁定的锁定行为普遍化，允许多个锁定实现，同时提供一些内置锁定缺少的功能，如计时的等待、可中断的等待、锁定轮询、每个锁定有多个条件等待集合以及无阻塞结构的锁定。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> IE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                    TimeUnit unit)</span> <span class="keyword">throws</span> IE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                    UnsupportedOperationException</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>ReentrantLock</p><p> ReentrantLock 是具有与隐式监视器锁定（使用 synchronized 方法和语句访问）相同的基本行为和语义的 Lock 的实现，但它具有扩展的能力。</p><p> 作为额外收获，在竞争条件下，ReentrantLock 的实现要比现在的 synchronized 实现更具有可伸缩性。（有可能在 JVM 的将来版本中改进 synchronized 的竞争性能。）</p><p> 这意味着当许多线程都竞争相同锁定时，使用 ReentrantLock 的吞吐量通常要比 synchronized 好。换句话说，当许多线程试图访问 ReentrantLock 保护的共享资源时，JVM 将花费较少的时间来调度线程，而用更多个时间执行线程。</p><p> 虽然 ReentrantLock 类有许多优点，但是与同步相比，它有一个主要缺点 – 它可能忘记释放锁定。建议当获得和释放 ReentrantLock 时使用下列结构：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">lock.lock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// perform operations protected by lock</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// restore invariants</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  lock.unlock();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 因为锁定失误（忘记释放锁定）的风险，所以对于基本锁定，强烈建议您继续使用 synchronized，除非真的需要 ReentrantLock 额外的灵活性和可伸缩性。</p><p> ReentrantLock 是用于高级应用程序的高级工具 – 有时需要，但有时用原来的方法就很好。</p></li><li><p>Condition</p><p> 就像 Lock 接口是同步的具体化，Condition 接口是 Object 中 wait() 和 notify() 方法的具体化。Lock 中的一个方法是 newCondition()，它要求锁定向该锁定返回新的 Condition 对象限制。await()、signal() 和 signalAll() 方法类似于 wait()、notify() 和 notifyAll()，但增加了灵活性，每个 Lock 都可以创建多个条件变量。这简化了一些并发算法的实现。</p></li><li><p>ReadWriteLock</p><p> ReentrantLock 实现的锁定规则非常简单 – 每当一个线程具有锁定时，其他线程必须等待，直到该锁定可用。有时，当对数据结构的读取通常多于修改时，可以使用更复杂的称为读写锁定的锁定结构，它允许有多个并发读者，同时还允许一个写入者独占锁定。该方法在一般情况下（只读）提供了更大的并发性，同时在必要时仍提供独占访问的安全性。ReadWriteLock 接口和 ReentrantReadWriteLock 类提供这种功能 – 多读者、单写入者锁定规则，可以用这种功能来保护共享的易变资源。</p></li><li><p>原子变量</p><p> 即使大多数用户将很少直接使用它们，原子变量类（AtomicInteger、AtomicLong、AtomicReference 等等）也有充分理由是最显著的新并发类。这些类公开对 JVM 的低级别改进，允许进行具有高度可伸缩性的原子读-修改-写操作。大多数现代 CPU 都有原子读-修改-写的原语，比如比较并交换（CAS）或加载链接/条件存储（LL/SC）。原子变量类使用硬件提供的最快的并发结构来实现。</p><p> 许多并发算法都是根据对计数器或数据结构的比较并交换操作来定义的。通过暴露高性能的、高度可伸缩的 CAS 操作（以原子变量的形式），用 Java 语言实现高性能、无等待、无锁定的并发算法已经变得可行。</p><p> 几乎 java.util.concurrent 中的所有类都是在 ReentrantLock 之上构建的，ReentrantLock 则是在原子变量类的基础上构建的。所以，虽然仅少数并发专家使用原子变量类，但 java.util.concurrent 类的很多可伸缩性改进都是由它们提供的。</p><p> 原子变量主要用于为原子地更新”热”字段提供有效的、细粒度的方式，”热”字段是指由多个线程频繁访问和更新的字段。另外，原子变量还是计数器或生成序号的自然机制。</p></li><li><p>性能与可伸缩性</p><p>虽然 java.util.concurrent 努力的首要目标是使编写正确、线程安全的类更加容易，但它还有一个次要目标，就是提供可伸缩性。可伸缩性与性能完全不同，实际上，可伸缩性有时要以性能为代价来获得。</p><p>性能是”可以快速执行此任务的程度”的评测。可伸缩性描述应用程序的吞吐量如何表现为它的工作量和可用计算资源增加。可伸缩的程序可以按比例使用更多的处理器、内存或 I/O 带宽来处理更多个工作量。当我们在并发环境中谈论可伸缩性时，我们是在问当许多线程同时访问给定类时，这个类的执行情况。</p><p>java.util.concurrent 中的低级别类 ReentrantLock 和原子变量类的可伸缩性要比内置监视器（同步）锁定高得多。因此，使用 ReentrantLock 或原子变量类来协调共享访问的类也可能更具有可伸缩性。</p></li><li><p>Hashtable 与 ConcurrentHashMap</p><p>作为可伸缩性的例子，ConcurrentHashMap 实现设计的可伸缩性要比其线程安全的上一代 Hashtable 的可伸缩性强得多。Hashtable 一次只允许一个线程访问 Map；ConcurrentHashMap 允许多个读者并发执行，读者与写入者并发执行，以及一些写入者并发执行。因此，如果许多线程频繁访问共享映射，使用 ConcurrentHashMap 的总的吞吐量要比使用 Hashtable 的好。</p><p>下表大致说明了 Hashtable 和 ConcurrentHashMap 之间的可伸缩性差别。在每次运行时，N 个线程并发执行紧密循环，它们从 Hashtable 或 ConcurrentHashMap 中检索随即关键字，60% 的失败检索将执行 put() 操作，2% 的成功检索执行 remove() 操作。测试在运行 Linux 的双处理器 Xeon 系统中执行。数据显示 10,000,000 个迭代的运行时间，对于 ConcurrentHashMap，标准化为一个线程的情况。可以看到直到许多线程，ConcurrentHashMap 的性能仍保持可伸缩性，而 Hashtable 的性能在出现锁定竞争时几乎立即下降。</p><p>与通常的服务器应用程序相比，这个测试中的线程数看起来很少。然而，因为每个线程未进行其他操作，仅是重复地选择使用该表，所以这样可以模拟在执行一些实际工作的情况下使用该表的大量线程的竞争。</p><table><thead><tr><th align="center">线程</th><th align="center">ConcurrentHashMap</th><th align="center">Hashtable</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1.0</td><td align="center">1.51</td></tr><tr><td align="center">2</td><td align="center">1.44</td><td align="center">17.09</td></tr><tr><td align="center">4</td><td align="center">1.83</td><td align="center">29.9</td></tr><tr><td align="center">8</td><td align="center">4.06</td><td align="center">54.06</td></tr><tr><td align="center">16</td><td align="center">7.5</td><td align="center">119.44</td></tr><tr><td align="center">32</td><td align="center">15.32</td><td align="center">237.2</td></tr></tbody></table></li><li><p>Lock 与 synchronized 与原子</p><p>下列基准说明了使用 java.util.concurrent 可能改进可伸缩性的例子。该基准将模拟旋转骰子，使用线性同余随机数生成器。有三个可用的随机数生成器的实现：一个使用同步来管理生成器的状态（单一变量），一个使用 ReentrantLock，另一个则使用 AtomicLong。下图显示了在 8-way Ultrasparc3 系统上，逐渐增加线程数量时这三个版本的相对吞吐量。（该图对原子变量方法的可伸缩性描述比较保守。）</p></li></ol><ol start="13"><li><p>公平与不公平</p><p>java.util.concurrent 中许多类中的另外一个定制元素是”公平”的问题。公平锁定或公平信号是指在其中根据先进先出（FIFO）的原则给与线程锁定或信号。ReentrantLock、Semaphore 和 ReentrantReadWriteLock 的构造函数都可以使用变量确定锁定是否公平，或者是否允许闯入（线程获得锁定，即使它们等待的时间不是最长）。</p><p>虽然闯入锁定的想法可能有些可笑，但实际上不公平、闯入的锁定非常普遍，且通常很受欢迎。使用同步访问的内置锁定不是公平锁定（且没有办法使它们公平）。相反，它们提供较弱的生病保证，要求所有线程最终都将获得锁定。</p><p>大多数应用程序选择（且应该选择）闯入锁定而不是公平锁定的原因是性能。在大多数情况下，完全的公平不是程序正确性的要求，真正公平的成本相当高。下表向前面的面板中的表中添加了第四个数据集，并由一个公平锁定管理对 PRNG 状态的访问。注意闯入锁定与公平锁定之间吞吐量的巨大差别。</p></li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><pre><code>java.util.concurrent 包中包含大量有用的构建快，可以用它们来改进并发类的性能、可伸缩性、线程安全和可维护性。通过这些构建快，应该可以不再需要在您的代码中大量使用同步、wait/notify 和 Thread.start()，而用更高级别、标准化的、高性能并发实用程序来替换它们。Exchanger,CyclicBarrier,Synchronizer</code></pre><hr><p>本文由 blog博主Caoer（草儿）原创，此处为转载。</p><p>由于原文两张图片不方便显示,这里暂时去掉，转载时本博(<a href="http://www.blogjava.net/mlh123caoer/archive/2007/10/24/155474.html)%E9%87%8D%E6%96%B0%E5%BC%95%E7%94%A8%E4%BA%86%E5%9B%BE%E7%89%87%EF%BC%8C%E5%B9%B6%E8%B0%83%E6%95%B4%E4%BA%86%E7%89%88%E9%9D%A2%E3%80%82">http://www.blogjava.net/mlh123caoer/archive/2007/10/24/155474.html)重新引用了图片，并调整了版面。</a></p><p>如原创作者认为本文侵权，请通知本博。</p><blockquote><blockquote><p><a href="http://tutorials.jenkov.com/java-concurrency/index.html">并发参考学习</a></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo</title>
      <link href="2016/10/13/dubbo/"/>
      <url>2016/10/13/dubbo/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo在项目中的作用"><a href="#Dubbo在项目中的作用" class="headerlink" title="Dubbo在项目中的作用"></a>Dubbo在项目中的作用</h2><p>分布式服务架构</p><ol><li><p>当服务越来越多时，服务URL配置管理变得非常困难，F5硬件负载均衡器的单点压力也越来越大。此时需要一个服务注册中心，动态的注册和发现服务，使服务的位置透明。<br>并通过在消费方获取服务提供方地址列表，实现软负载均衡和Failover，降低对F5硬件负载均衡器的依赖，也能减少部分成本。</p></li><li><p>当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。<br>这时，需要自动画出应用间的依赖关系图，以帮助架构师理清理关系。</p></li><li><p>接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？<br>为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。<br>其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。</p></li></ol><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ol><li>Provider: 暴露服务的服务提供方。</li><li>Consumer: 调用远程服务的服务消费方。</li><li>Registry: 服务注册与发现的注册中心。</li><li>Monitor: 统计服务的调用次调和调用时间的监控中心。</li><li>Container: 服务运行容器。</li></ol><h3 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h3><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
            <tag> 服务治理 </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paxos</title>
      <link href="2016/09/16/paxos/"/>
      <url>2016/09/16/paxos/</url>
      
        <content type="html"><![CDATA[<h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><p>1982，Lamport 提出了一种计算机容错理论，并于1900年论证。<br>这是一种<br>基于消传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一。</p><blockquote><p>时间时钟、面包店算法、拜占庭将军及paxos算法的创建性容错</p></blockquote><h2 id="paxos的目的"><a href="#paxos的目的" class="headerlink" title="paxos的目的"></a>paxos的目的</h2><p>  提高分布式系统容错性的一致性算法</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>  一致性算法</p><h2 id="算法三个角色："><a href="#算法三个角色：" class="headerlink" title="算法三个角色："></a>算法三个角色：</h2><p>  Proposer<br>  Acceptor<br>  Learner</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><h3 id="paxos-描述："><a href="#paxos-描述：" class="headerlink" title="paxos 描述："></a>paxos 描述：</h3><p>  参与者之间可以进行通信，可以记录一些信息，来确定最终的值<br>  消息内容不会被篡改</p><h3 id="知行学社的分布式系统与Paxos算法-对paxos算法核心思想的描述"><a href="#知行学社的分布式系统与Paxos算法-对paxos算法核心思想的描述" class="headerlink" title="知行学社的分布式系统与Paxos算法 对paxos算法核心思想的描述"></a>知行学社的分布式系统与Paxos算法 对paxos算法核心思想的描述</h3><ul><li><p>在抢占式访问权的基础上引入多acceptor</p></li><li><p>保证一个epoch,只有一个proposer运行，proposer按照epoch递增的顺序依次运行。</p></li><li><p>新的epoch的proposer采用后者认同前者的思路运行。</p></li><li><p>在肯定旧epoch无法生成确定性取值时，新的epoch 会提交自己的取值。不会冲突。</p></li><li><p>一旦旧epoch形成确定性取值，新epoch肯定可以获取到此取值，并且会认同此取值，不会破坏。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 一致性算法 </tag>
            
            <tag> CAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC下完成人脸检测代码环境构建</title>
      <link href="2016/09/15/MAC%E4%B8%8B%E5%AE%8C%E6%88%90%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%BB%A3%E7%A0%81%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/"/>
      <url>2016/09/15/MAC%E4%B8%8B%E5%AE%8C%E6%88%90%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%BB%A3%E7%A0%81%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>工作中用到图片的截图，但在使用过程中出现了一个尴尬的问题，就是截图时，有的人没有了头<br>，只留下身子.</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>通过代码来检测出头部所以位置，然后来决定载哪些区域（目前，只是对一个人进行剪切。</p><h2 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h2><ol><li><p>找到一个合适的类库来进行人头位置检测</p><pre><code> _python-opencv_</code></pre></li><li><p>使用python 对人裁剪范围进行处理(GraphicsMagick)得到想要的区域</p></li></ol><h2 id="正题-如何在MAC上安装开发环境"><a href="#正题-如何在MAC上安装开发环境" class="headerlink" title="正题 如何在MAC上安装开发环境"></a>正题 如何在MAC上安装开发环境</h2><p>利用  python-opencv 库<br><a href="http://www.pyimagesearch.com/2015/06/15/install-opencv-3-0-and-python-2-7-on-osx/">http://www.pyimagesearch.com/2015/06/15/install-opencv-3-0-and-python-2-7-on-osx/</a></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=<span class="regexp">/usr/</span>local \</span><br><span class="line">-D PYTHON2_PACKAGES_PATH=~<span class="regexp">/.virtualenvs/</span>cv<span class="regexp">/lib/</span>python2.<span class="number">7</span>/site-packages \</span><br><span class="line">-D</span><br><span class="line">PYTHON2_LIBRARY=<span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>python<span class="regexp">/2.7.10/</span>Frameworks<span class="regexp">/Python.framework/</span>Versions<span class="regexp">/2.7/</span>bin</span><br><span class="line">\</span><br><span class="line">-D PYTHON2_INCLUDE_DIR=<span class="regexp">/usr/</span>local<span class="regexp">/Frameworks/</span>Python.framework/Headers \</span><br><span class="line">-D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">-D BUILD_EXAMPLES=ON \</span><br><span class="line">-D OPENCV_EXTRA_MODULES_PATH=~<span class="regexp">/opencv_contrib/m</span>odules ..</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation">http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation</a></p> <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">brew</span> <span class="string">tap homebrew/science</span></span><br><span class="line"><span class="attr">brew</span> <span class="string">install opencv3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html">http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 图片处理 </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第N次百望山到植物园</title>
      <link href="2016/09/12/%E7%AC%ACN%E6%AC%A1%E7%99%BE%E6%9C%9B%E5%B1%B1%E5%88%B0%E6%A4%8D%E7%89%A9%E5%9B%AD/"/>
      <url>2016/09/12/%E7%AC%ACN%E6%AC%A1%E7%99%BE%E6%9C%9B%E5%B1%B1%E5%88%B0%E6%A4%8D%E7%89%A9%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么是N次"><a href="#为什么是N次" class="headerlink" title="为什么是N次"></a>为什么是N次</h2><p>2015年已经多次走这样同一个路线</p><h2 id="为什么第N次记录了一下"><a href="#为什么第N次记录了一下" class="headerlink" title="为什么第N次记录了一下"></a>为什么第N次记录了一下</h2><p>之前来走的时候都是正常13公里，到植物园进行小息游园后坐公交回家。但是这次遇到了一些事情，也许今后不会再次走这条路，故在此进行记录</p><h2 id="百望山路段"><a href="#百望山路段" class="headerlink" title="百望山路段"></a>百望山路段</h2><p>不得不说百望山发展之迅速，从去年到今天常走的路基本上都已经修成了马路，真的是‘大功’ 一件，这样子人们就不用走泥路了，也不用那么接地气了  <del>~</del></p><h2 id="百望山到黑山头路段"><a href="#百望山到黑山头路段" class="headerlink" title="百望山到黑山头路段"></a>百望山到黑山头路段</h2><p>这段路不算长，也就二三公里的样子，不过曾经一个人走过N次。清醒的记得去年走的一幕幕，黑黑的，阴阴的，凉凉的，热热的，鸟儿到处都是，有时甚至还有蛐蛐在歌唱。真可以说精神上的放松。期间老婆也走过一两次，由于全程走下来比较累，基本上都是我一个人在走。<br>基本上每次走完，一周都感到比较轻松。</p><h2 id="黑山头到冷泉村防火道"><a href="#黑山头到冷泉村防火道" class="headerlink" title="黑山头到冷泉村防火道"></a>黑山头到冷泉村防火道</h2><p>这路其实都一两个比较大的景点，也许只有我自己认为那算做景点吧！</p><h3 id="山泉"><a href="#山泉" class="headerlink" title="山泉"></a>山泉</h3><p>若想去山泉取水，每次要多走2公里。一般情况下会想去但是由于后面路程的问题会选择赶路。这次我去了，其实也是被迫了基本上。嘿嘿</p><h3 id="天泉寺"><a href="#天泉寺" class="headerlink" title="天泉寺"></a>天泉寺</h3><p>今天才知道这个寺届是 <code>天泉寺</code> 之前走到这里总感觉是一片废墟，从没想过这地如此的大。这次到这里，发现有人在整修，并且已经把原来的地基轮廓都已经整理出来。<br>在这里呆了差不多一个小时，感叹时间的厉害，也感叹我们在时间长流中是那么微不足道。<br>后来又来到寺庙傍边的佛塔傍边，从佛塔的视角可以看清楚整个寺庙的全景。于是我便非常想知道，这个寺庙到底经历了哪些历史…</p><p><img src="/images/tianquansi/IMG_1938.jpg"><br><img src="/images/tianquansi/IMG_1939.jpg"><br><img src="/images/tianquansi/IMG_1940.jpg"><br><img src="/images/tianquansi/IMG_1941.jpg"><br><img src="/images/tianquansi/IMG_1942.jpg"><br><img src="/images/tianquansi/IMG_1943.jpg"><br><img src="/images/tianquansi/IMG_1944.jpg"><br><img src="/images/tianquansi/IMG_1947.jpg"><br><img src="/images/tianquansi/IMG_1948.jpg"><br><img src="/images/tianquansi/IMG_1949.jpg"><br><img src="/images/tianquansi/IMG_1950.jpg"><br><img src="/images/tianquansi/IMG_1951.jpg"><br><img src="/images/tianquansi/IMG_1958.jpg"><br><img src="/images/tianquansi/IMG_1959.jpg"><br><img src="/images/tianquansi/IMG_1963.jpg"></p><h2 id="冷泉村到植物园"><a href="#冷泉村到植物园" class="headerlink" title="冷泉村到植物园"></a>冷泉村到植物园</h2><p>这次走了一半，在去植物园的路已经被我们解放军战士把守，说是军事重地，人民不能进入。我问了一下，他们说可以从别的地方翻跃过去。同时我也看到有一帮人从这些士兵可见的范围内进行翻跃围墙。有一种说不出来的心情充上心头，但感觉在我们体制下好多类似的事情发生，从而又感叹了一些国家怎么样才能提高全民素质等等事情～～～～</p><p>我可不想去翻墙，我还是回寺庙再去看看，同时去喝些泉水，也好久没有去泉眼了。<br>今天泉水非常多，有一位好心的兄弟给帮我搞了一水袋。我便带着回家了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>不知道下次什么时候才能再进行穿越，希望放开这块路线供大家穿越。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
            <tag> 运动 </tag>
            
            <tag> 爬山 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片处理环境构建</title>
      <link href="2016/09/12/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/"/>
      <url>2016/09/12/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对存储的文件进行并发处理，由于处理的图片量比较大。<br>图片处理又比较耗内存，为防止影响正常的服务，故将其与业务服务分开部署</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>python+uwsgi+imagemagick</p><h2 id="环境安装："><a href="#环境安装：" class="headerlink" title="环境安装："></a>环境安装：</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>配置</span><br><span class="line">     <span class="number">16</span>Core,<span class="number">16</span>G内存，<span class="number">50</span>G硬盘</span><br><span class="line"><span class="number">2.</span>端口</span><br><span class="line">    <span class="number">13814</span>（fcp），<span class="number">8010</span>(http)</span><br><span class="line"><span class="number">3.</span>安装 graphicsmagick</span><br><span class="line">     jasper<span class="number">-1.900</span><span class="number">.1</span>.zip  jpegsrc.v9a.tar.gz</span><br><span class="line"></span><br><span class="line">wget http:<span class="comment">//www.imagemagick.org/download/delegates/jpegsrc.v9a.tar.gz</span></span><br><span class="line">wget http:<span class="comment">//www.ece.uvic.ca/~frodo/jasper/software/jasper-1.900.1.zip</span></span><br><span class="line">gm 命令ln /usr/local/graphicsmagick/bin/gm usr/bin/gm</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>装音频插件和字体</span><br><span class="line">http:<span class="comment">//my.oschina.net/ethan09/blog/372435?fromerr=WsZSucMx</span></span><br><span class="line">安装微软雅黑字体</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>python版本升级</span><br><span class="line">http:<span class="comment">//blog.csdn.net/jcjc918/article/details/11022345  由于django必须要用2.7，所以这里要进行升级</span></span><br><span class="line">注意修改完后  要修改/usr/bin/supervisord,/usr/bin/supervisorctl 的头为/usr/bin/python2<span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>重新安装pip和c++库</span><br><span class="line">wget https:<span class="comment">//bootstrap.pypa.io/get-pip.py</span></span><br><span class="line">python <span class="keyword">get</span>-pip.py</span><br><span class="line"></span><br><span class="line">安装c++库</span><br><span class="line">sudo yum install GraphicsMagick-c++-devel</span><br><span class="line">sudo yum install boost-devel</span><br><span class="line"><span class="number">7.</span>安装python插件</span><br><span class="line"></span><br><span class="line">sudo pip install -r requirements.txt</span><br><span class="line">requirements.txt内容</span><br><span class="line">Django==<span class="number">1.9</span><span class="number">.7</span></span><br><span class="line">beautifulsoup4==<span class="number">4.4</span><span class="number">.1</span></span><br><span class="line">protobuf==<span class="number">2.6</span><span class="number">.1</span></span><br><span class="line">pgmagick==<span class="number">0.6</span><span class="number">.2</span></span><br><span class="line">uWSGI==<span class="number">2.0</span><span class="number">.13</span><span class="number">.1</span></span><br><span class="line">wsgiref==<span class="number">0.1</span><span class="number">.2</span></span><br><span class="line">django-log-request-id==<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>安装nginx</span><br><span class="line">yum install nginx</span><br><span class="line"><span class="number">9.</span>安装uwsgi</span><br><span class="line">sudo yum install uwsgi</span><br><span class="line">sudo yum install uwsgi-plugin-python</span><br><span class="line"></span><br><span class="line">nginx配置</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">  uwsgi_pass unix:<span class="comment">///tmp/uwsgi.sock;</span></span><br><span class="line">  include /etc/nginx/uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">client_max_body_size <span class="number">20</span>M;</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>安装图片处理服务</span><br><span class="line">cd /opt/fs/</span><br><span class="line">git clone http:<span class="comment">//git.firstshare.cn/Qixin/FSPythonWSGIProcess.git</span></span><br><span class="line">cd FSPythonWSGIProcess</span><br><span class="line"></span><br><span class="line">uwsgi --ini online_uwsgi.ini --buffer-size <span class="number">20971520</span>   --daemonize ./logs/uwsgi.log</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>异常</span><br><span class="line">*** Starting uWSGI <span class="number">2.0</span><span class="number">.12</span> (<span class="number">64</span>bit) on [Tue Jun <span class="number">14</span> <span class="number">16</span>:<span class="number">36</span>:<span class="number">20</span> <span class="number">2016</span>] ***</span><br><span class="line">compiled with version: <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> (Red Hat <span class="number">4.4</span><span class="number">.7</span><span class="number">-16</span>) on <span class="number">02</span> January <span class="number">2016</span> <span class="number">19</span>:<span class="number">53</span>:<span class="number">13</span></span><br><span class="line">os: Linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">-573.8</span><span class="number">.1</span>.el6.x86_64 #<span class="number">1</span> SMP Tue Nov <span class="number">10</span> <span class="number">18</span>:<span class="number">01</span>:<span class="number">38</span> UTC <span class="number">2015</span></span><br><span class="line">nodename: vlnx160170.fsceshi.com</span><br><span class="line">machine: x86_64</span><br><span class="line">clock source: unix</span><br><span class="line">pcre jit disabled</span><br><span class="line">detected number of CPU cores: <span class="number">4</span></span><br><span class="line">current working directory: /home/wans/FSPythonWSGIProcess</span><br><span class="line">writing pidfile to /tmp/FsPythonWSGIProcess.pid</span><br><span class="line">detected binary path: /usr/sbin/uwsgi</span><br><span class="line">your processes number limit <span class="keyword">is</span> <span class="number">1024</span></span><br><span class="line">your memory page size <span class="keyword">is</span> <span class="number">4096</span> bytes</span><br><span class="line">detected max file descriptor number: <span class="number">60000</span></span><br><span class="line">lock engine: pthread robust mutexes</span><br><span class="line">thunder lock: disabled (you can enable it with --thunder-lock)</span><br><span class="line">uwsgi socket <span class="number">0</span> bound to UNIX address /tmp/uwsgi.sock fd <span class="number">4</span></span><br><span class="line">your server socket listen backlog <span class="keyword">is</span> limited to <span class="number">100</span> connections</span><br><span class="line">your mercy <span class="keyword">for</span> graceful operations on workers <span class="keyword">is</span> <span class="number">60</span> seconds</span><br><span class="line">mapped <span class="number">1476277</span> bytes (<span class="number">1441</span> KB) <span class="keyword">for</span> <span class="number">10</span> cores</span><br><span class="line">*** Operational MODE: preforking ***</span><br><span class="line">*** no app loaded. going <span class="keyword">in</span> full dynamic mode ***</span><br><span class="line"></span><br><span class="line">关闭nginx   ,启动uwsgi后再启动nginx</span><br><span class="line"></span><br><span class="line">优化点：</span><br><span class="line"><span class="number">1.</span>调整nginx</span><br><span class="line">worker_processes     <span class="number">4</span>;</span><br><span class="line">worker_cpu_affinity <span class="number">1000</span> <span class="number">0100</span> <span class="number">0010</span> <span class="number">0001</span>;</span><br><span class="line"><span class="number">2.</span>#cluster</span><br><span class="line">upstream backend&#123;</span><br><span class="line">server unix:<span class="comment">///tmp/uwsgi.sock;</span></span><br><span class="line">server unix:<span class="comment">///tmp/uwsgi1.sock;</span></span><br><span class="line">server unix:<span class="comment">///tmp/uwsgi2.sock;</span></span><br><span class="line">server unix:<span class="comment">///tmp/uwsgi3.sock;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">                    include uwsgi_params;</span><br><span class="line">uwsgi_pass backend;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">问题总结:</span><br><span class="line"><span class="number">1.</span>yum安装遇到如下类似问题:</span><br><span class="line">        yum install uwsgi</span><br><span class="line">        Loaded plugins: fastestmirror</span><br><span class="line">        Loading mirror speeds <span class="keyword">from</span> cached hostfile</span><br><span class="line">         * base: mirrors.btte.net</span><br><span class="line">         * extras: mirrors.btte.net</span><br><span class="line">         * updates: mirrors<span class="number">.163</span>.com</span><br><span class="line">        No package uwsgi available.</span><br><span class="line">        Error: Nothing to <span class="keyword">do</span></span><br><span class="line">   解决方案,添加epl至yum的源即可:</span><br><span class="line">   yum install http:<span class="comment">//mirrors.isu.net.sa/pub/fedora/fedora-epel/7/x86_64/e/epel-release-7-6.noarch.rpm</span></span><br><span class="line">   参考文档:https:<span class="comment">//fedoraproject.org/wiki/EPEL/zh-cn</span></span><br><span class="line">   </span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
            <tag> fastcgi </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的音乐目录</title>
      <link href="2016/01/10/%E6%88%91%E7%9A%84%E9%9F%B3%E4%B9%90%E7%9B%AE%E5%BD%95/"/>
      <url>2016/01/10/%E6%88%91%E7%9A%84%E9%9F%B3%E4%B9%90%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Django</p></li><li><p>当我老了</p></li><li><p>朋友</p></li><li><p>冬季到台北来看你</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将amr,caf转mp3</title>
      <link href="2015/12/27/%E5%B0%86amr,caf%E8%BD%ACmp3/"/>
      <url>2015/12/27/%E5%B0%86amr,caf%E8%BD%ACmp3/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><hr><p><code>公司原有文件存储现在要用java进行重构，其中涉及到Android和ios上的音频问题。</code></p><ol><li><p>Android录音是格式是amr，在电脑上一般是播放不出来的，必须要进行转码。</p></li><li><p>iPhone录音传上来的是caf，在android上是不能进行播放的。</p></li></ol><p><code>由于上面的问题，我们要进行文件的转换，另外还有一个需求就是，amr转wav ,这里我们将amr和caf统一转换为map3,另外提供一个接口进行amr2wav的转换。 在网上参考了许多，总结下来还都是调用ffmpeg 进行想着音频的转换。总也来说比较简单。这里时间的关系 ，也不可能去研究底层编解码的东西。</code></p><hr><h1 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h1><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装<a href="https://www.ffmpeg.org/ffmpeg.html#Audio-Options">ffmpeg</a></h2><ul><li>参考<a href="http://my.oschina.net/ethan09/blog/372435">http://my.oschina.net/ethan09/blog/372435</a></li></ul><h2 id="查看当前ffmpeg对mp3的编解码支持情况"><a href="#查看当前ffmpeg对mp3的编解码支持情况" class="headerlink" title="查看当前ffmpeg对mp3的编解码支持情况"></a>查看当前ffmpeg对mp3的编解码支持情况</h2><pre><code>    ffmpeg -codecs|grep mp3                                             D.A.L. mp3                  MP3 (MPEG audio layer 3) (decoders: mp3 mp3float )     D.A.L. mp3adu               ADU (Application Data Unit) MP3 (MPEG audio layer 3) (decoders: mp3adu mp3adufloat )     D.A.L. mp3on4               MP3onMP4 (decoders: mp3on4 mp3on4float )     </code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>ffmpeg: error while loading shared libraries: libavdevice.so.53: cannot open shared object file: No such file or directory</li></ul><pre><code>      ffmpeg正常安装后执行ffmpeg时出现如下错误：      解决办法：      vi /etc/ld.so.conf      加入：/usr/local/lib      执行ldconfig</code></pre><ul><li><p>ffmpeg -i test.amr test.mp3<br>ffmpeg: error while loading shared libraries: libavdevice.so.56: cannot open shared object file: No such file or directory</p><pre><code> &lt;http://www.tjcarroll.org/?p=51&gt;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 音频转换 </tag>
            
            <tag> arm </tag>
            
            <tag> mp3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FASTDFS</title>
      <link href="2015/12/08/FASTFS/"/>
      <url>2015/12/08/FASTFS/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.oschina.net/p/fastdfs">基本介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 存储 </tag>
            
            <tag> fastfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工作与学习</title>
      <link href="2015/12/08/git%E5%B7%A5%E4%BD%9C%E4%B8%8E%E5%AD%A6%E4%B9%A0/"/>
      <url>2015/12/08/git%E5%B7%A5%E4%BD%9C%E4%B8%8E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="tag的作用与学习"><a href="#tag的作用与学习" class="headerlink" title="tag的作用与学习"></a>tag的作用与学习</h3><ul><li><p>git tag ‘name’ -m ‘desc’ 创建</p></li><li><p>git tag -d ‘name’ 删除</p></li><li><p>git tag -l  查看</p></li><li><p>git push –tags 提交</p></li><li><p>git push origin :refs/tags/tags_name</p></li></ul><h3 id="git-在使用项目中的实践模型"><a href="#git-在使用项目中的实践模型" class="headerlink" title="git 在使用项目中的实践模型"></a>git 在使用项目中的实践模型</h3><ol><li>master</li><li>release-6.1</li><li>develop</li><li>hotfix-xxx</li><li>release-release-6.1-xx</li></ol><h3 id="批量删除tag"><a href="#批量删除tag" class="headerlink" title="批量删除tag"></a>批量删除tag</h3><p>git tag |grep -v ‘v7.2.25-log_report_v9-20200909’ | xargs -I {} git tag -d {}</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
            <tag> 代码仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis致命错误的出现</title>
      <link href="2015/11/22/redis%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF%E7%9A%84%E5%87%BA%E7%8E%B0/"/>
      <url>2015/11/22/redis%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF%E7%9A%84%E5%87%BA%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>#错误描述<br>我们将文件缓存到redis,但是在线上出现了一个问题，就是A企业群中发的文件，在B企业群中看文件时却看到了A企业群中的图片。</p><p>#经排查，结果如下：</p><p>##案例代码如下：</p><pre><code>    import com.google.common.collect.Lists;    import org.apache.commons.lang3.StringUtils;    import org.apache.commons.pool2.impl.GenericObjectPoolConfig;    import org.slf4j.Logger;    import org.slf4j.LoggerFactory;    import redis.clients.jedis.Jedis;    import redis.clients.jedis.JedisPool;    import java.util.Arrays;    import java.util.Collections;    import java.util.List;    import java.util.concurrent.*;    /**     * Created by Aaron on 15/11/12.     */    public class FileRedisFactory &#123;        private static Logger log = LoggerFactory.getLogger(FileRedisFactory.class);        public ThreadPoolExecutor threadPoolExecutor;        // 格式为 ： 127.0.0.1:6379#0;127.0.0.2:6379#1    IP:PORT#index        private String hosts;        private String password;        private int size;        private List&lt;JedisPool&gt; pools=Lists.newArrayList();//连接池        public FileRedisFactory(String hosts, String password) &#123;            this.hosts = hosts;            this.password = password;            this.init(hosts, password);        &#125;        public FileRedisFactory(String hosts) &#123;            this.hosts = hosts;            this.init(hosts, null);        &#125;        private synchronized void init(String hosts, String password) &#123;            if (StringUtils.isNotEmpty(hosts)) &#123;                String[] hostsArray = hosts.split(&quot;;&quot;);                List&lt;String&gt; hostList = Arrays.asList(hostsArray);                Collections.sort(hostList);                System.out.println(hostList);                for (String host : hostList) &#123;                    try &#123;                        String[] uriDb=host.split(&quot;#&quot;);                        String[] host_port = uriDb[0].split(&quot;:&quot;);                        String ip = host_port[0];                        String port = host_port[1];                        int index=uriDb.length&gt;0?Integer.valueOf(uriDb[1]):0;                        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();                        poolConfig.setMaxTotal(16);                        poolConfig.setMaxIdle(16);                        if (StringUtils.isNotEmpty(password)) &#123;                            pools.add(new JedisPool(poolConfig, ip, Integer.valueOf(port), 2000, password, index));                        &#125; else &#123;                            pools.add(new JedisPool(poolConfig, ip, Integer.valueOf(port), 2000, null, index));                        &#125;                    &#125; catch (Exception e) &#123;                        pools = Lists.newArrayList();                        e.printStackTrace();                        log.error(&quot;[ShardedRedisFactory] [initByShard] [error] [hosts:&quot; + hosts + &quot;] [password:&quot; + password + &quot;]&quot;, e);                    &#125;                &#125;                size = pools.size();            &#125;            this.threadPoolExecutor = new ThreadPoolExecutor(10,20,3, TimeUnit.MINUTES,new LinkedBlockingDeque&lt;&gt;(),new ThreadPoolExecutor.DiscardPolicy());            // 构造池            log.info(&quot;[ShardedRedisFactory] [initByShard] [success] [hosts:&#123;&#125;] [password:&#123;&#125;] [masterName:&#123;&#125;] [pool:&#123;&#125;]&quot;, hosts, password);        &#125;        private JedisPool getJedisPool(int c) &#123;            int index = c % size;            return pools.get(index);        &#125;        private static int getIndexFromPath(String path) &#123;            String first=path.split(&quot;\\.&quot;)[0];            return  first.charAt(first.length() - 1);        &#125;        /**         * @param filePath file path         * @return         */        public byte[] get(String filePath) &#123;            if (cacheIsAvailable()) return null;            JedisPool jedisPool = getJedisPool(getIndexFromPath(filePath));            Jedis jedis = null;            try &#123;                jedis = jedisPool.getResource();                return jedis.get(filePath.getBytes());            &#125; catch (Exception e) &#123;                log.error(e.getMessage());                return null;            &#125; finally &#123;                if (jedis != null)                    jedisPool.returnResource(jedis);            &#125;        &#125;        public void asynSet(String filePath, byte[] datas)&#123;            if (cacheIsAvailable()) return;            threadPoolExecutor.execute(()-&gt;&#123;                    JedisPool jedisPool = getJedisPool(getIndexFromPath(filePath));                    Jedis jedis = null;                    try &#123;                        jedis = jedisPool.getResource();                        jedis.set(filePath.getBytes(), datas);                    &#125; catch (Exception e) &#123;                        log.error(e.getMessage());                    &#125; finally &#123;                        if (jedis != null)                            jedisPool.returnResource(jedis);                    &#125;            &#125;);        &#125;        private boolean cacheIsAvailable() &#123;            if(pools.size()==0)&#123;                return true;            &#125;            return false;        &#125;    &#125;</code></pre><p>##测试代码如下</p><pre><code>        public static void main(String[] args) &#123;            FileRedisFactory fileRedisFactory = new FileRedisFactory(&quot;172.31.xxx.xxx:6379#0;172.31.xx.xxx:6379#1;172.31.xxx.xxx:6379#2;172.31.xxx.xxx:6379#3&quot;);            System.out.println(fileRedisFactory);            Map&lt;String,String&gt; map=new HashMap&lt;&gt;();            for(int i=0;i&lt;20;i++)&#123;                map.put(&quot;&quot;+i,&quot;&quot;+i);            &#125;            for (int j = 0; j &lt;50 ; j++) &#123;                Thread thread=new Thread()&#123;                    @Override                    public void run() &#123;                        while(true)&#123;                            Set&lt;String&gt; s=map.keySet();                            s.forEach(i-&gt;&#123;                                fileRedisFactory.set(i + &quot;&quot;, (i + &quot;&quot;).getBytes());                            &#125;);                        &#125;                    &#125;                &#125;;                thread.start();            &#125;            for (int k = 0; k &lt;50 ; k++) &#123;                Thread thread=new Thread()&#123;                    @Override                    public void run() &#123;                        while(true)&#123;                            Set&lt;String&gt; s=map.keySet();                            s.forEach(i-&gt;&#123;                                byte[] first=fileRedisFactory.get(i+&quot;&quot;);                                if(first==null)&#123;                                    System.out.println(i+&quot;&quot;+first);                                    return;                                &#125;                                try&#123;                                String temp=(new String(first));                                if(!temp.equals(i+&quot;&quot;))&#123;                                    System.out.println(i+&quot;======&quot;+temp);                                    System.exit(-1);                                &#125;&#125;catch(Exception e)&#123;                                    e.printStackTrace();                                &#125;                            &#125;);                        &#125;                    &#125;                &#125;;                thread.start();            &#125;        &#125;</code></pre><p>若你和连接到redis服务器之间的网络不是很稳定<br>在运行时，我们会发现，有奇怪的现像出现：</p><pre><code>    1======2    3======8</code></pre><p>这时，我们就在对redis操作时，异常的地方修改成如下代码：</p><pre><code>    catch (Exception e) &#123;          log.error(e.getMessage());          e.printStackTrace();          return null;    &#125; </code></pre><p>就会看到报TimeOut的Exception</p><pre><code>我们将：        &lt;dependency&gt;            &lt;groupId&gt;redis.clients&lt;/groupId&gt;            &lt;artifactId&gt;jedis&lt;/artifactId&gt;            &lt;version&gt;2.6.2&lt;/version&gt;        &lt;/dependency&gt;替换成：        &lt;dependency&gt;            &lt;groupId&gt;redis.clients&lt;/groupId&gt;            &lt;artifactId&gt;jedis&lt;/artifactId&gt;            &lt;version&gt;2.7.3&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>这时我们去Google上查询的同时也看了一下新的代码，<br>     我们原来用的：</p><pre><code>    jedisPool.returnResource(jedis); 已经变成了：   /**    * @deprecated starting from Jedis 3.0 this method won&#39;t exist. Resouce cleanup should be done    *             using @see &#123;@link redis.clients.jedis.Jedis#close()&#125;    */   @Deprecated   public void returnResource(final Jedis resource) &#123;     if (resource != null) &#123;       try &#123;         resource.resetState();         returnResourceObject(resource);       &#125; catch (Exception e) &#123;         returnBrokenResource(resource);         throw new JedisException(&quot;Could not return the resource to the pool&quot;, e);       &#125;     &#125;   &#125;</code></pre><p>同时我们也查到了一个文章<a href="http://www.cnblogs.com/wcd144140/p/4883139.html">JedisPool异常Jedis链接处理</a></p><p>#修改后的代码：</p><pre><code>import com.google.common.collect.Lists;import org.apache.commons.lang3.StringUtils;import org.apache.commons.pool2.impl.GenericObjectPoolConfig;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.concurrent.*;/** * Created by Aaron on 15/11/12. */public class FileRedisFactory &#123;    private static Logger log = LoggerFactory.getLogger(FileRedisFactory.class);    public ThreadPoolExecutor threadPoolExecutor;    // 格式为 ： 127.0.0.1:6379#0;127.0.0.2:6379#1    IP:PORT#index    private String hosts;    private String password;    private int size;    private List&lt;JedisPool&gt; pools=Lists.newArrayList();//连接池    public FileRedisFactory(String hosts, String password) &#123;        this.hosts = hosts;        this.password = password;        this.init(hosts, password);    &#125;    public FileRedisFactory(String hosts) &#123;        this.hosts = hosts;        this.init(hosts, null);    &#125;    private synchronized void init(String hosts, String password) &#123;        if (StringUtils.isNotEmpty(hosts)) &#123;            String[] hostsArray = hosts.split(&quot;;&quot;);            List&lt;String&gt; hostList = Arrays.asList(hostsArray);            Collections.sort(hostList);            System.out.println(hostList);            for (String host : hostList) &#123;                try &#123;                    String[] uriDb=host.split(&quot;#&quot;);                    String[] host_port = uriDb[0].split(&quot;:&quot;);                    String ip = host_port[0];                    String port = host_port[1];                    int index=uriDb.length&gt;0?Integer.valueOf(uriDb[1]):0;                    GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();                    poolConfig.setMaxTotal(16);                    poolConfig.setMaxIdle(16);                    if (StringUtils.isNotEmpty(password)) &#123;                        pools.add(new JedisPool(poolConfig, ip, Integer.valueOf(port), 2000, password, index));                    &#125; else &#123;                        pools.add(new JedisPool(poolConfig, ip, Integer.valueOf(port), 2000, null, index));                    &#125;                &#125; catch (Exception e) &#123;                    pools = Lists.newArrayList();                    log.error(&quot;[ShardedRedisFactory] [initByShard] [error] [hosts:&quot; + hosts + &quot;] [password:&quot; + password + &quot;]&quot;, e);                &#125;            &#125;            size = pools.size();        &#125;        this.threadPoolExecutor = new ThreadPoolExecutor(10,20,3, TimeUnit.MINUTES,new LinkedBlockingDeque&lt;&gt;(50),new ThreadPoolExecutor.DiscardPolicy());        // 构造池        log.info(&quot;[ShardedRedisFactory] [initByShard] [success] [hosts:&#123;&#125;] [password:&#123;&#125;] [masterName:&#123;&#125;] [pool:&#123;&#125;]&quot;, hosts, password);    &#125;    private JedisPool getJedisPool(int c) &#123;        int index = c % size;        return pools.get(index);    &#125;    private static int getIndexFromPath(String path) &#123;        String first=path.split(&quot;\\.&quot;)[0];        return  first.charAt(first.length() - 1);    &#125;    /**     * @param filePath file path     * @return     */    public byte[] get(String filePath) &#123;        if (cacheIsAvailable()) return null;        JedisPool jedisPool = getJedisPool(getIndexFromPath(filePath));        Jedis jedis = null;        try &#123;            jedis = jedisPool.getResource();            return jedis.get(filePath.getBytes());        &#125; catch (Exception e) &#123;            log.error(e.getMessage());            return null;        &#125; finally &#123;            if (jedis != null)                jedis.close();        &#125;    &#125;    public String set(String filePath, byte[] datas) &#123;        if (cacheIsAvailable()) return null;        JedisPool jedisPool = getJedisPool(getIndexFromPath(filePath));        Jedis jedis = null;        try &#123;            jedis = jedisPool.getResource();            return jedis.set(filePath.getBytes(), datas);        &#125; catch (Exception e) &#123;            log.error(e.getMessage());            return null;        &#125; finally &#123;            if (jedis != null)                jedis.close();        &#125;    &#125;    public void asynSet(String filePath, byte[] datas,long expx)&#123;        if (cacheIsAvailable()) return;        threadPoolExecutor.execute(()-&gt;&#123;                JedisPool jedisPool = getJedisPool(getIndexFromPath(filePath));                Jedis jedis = null;                try &#123;                    jedis = jedisPool.getResource();                    jedis.set(filePath.getBytes(), datas,&quot;NX&quot;.getBytes(),&quot;EX&quot;.getBytes(),expx);                &#125; catch (Exception e) &#123;                    log.error(e.getMessage());                &#125; finally &#123;                    if (jedis != null)                        jedis.close();                &#125;        &#125;);    &#125;    private boolean cacheIsAvailable() &#123;        if(pools.size()==0)&#123;            return true;        &#125;        return false;    &#125;&#125;</code></pre><p>#总结：</p><ol><li>在使用做新功能时，方便时要添加开关或合理的回滚方案，方便快速的回滚减少事故的影响</li><li>排查错误，一查到底</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 问题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 缓存 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible</title>
      <link href="2015/10/30/ansible%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2015/10/30/ansible%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#<a href="http://sofar.blog.51cto.com/353572/1579894">ansible</a></p><pre><code>apt-get install ansible</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter</title>
      <link href="2015/10/10/jmeter%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
      <url>2015/10/10/jmeter%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>##JMeter是用来做什么的</p><blockquote><p>是一个Apache的一个开源程序，一个100%的针对压力模块和功能压力测试纯Java应用，最初是专门为Web应用程序而设计 的，但是目前已经扩展到别的功能 测试。</p></blockquote><ul><li><p>能做什么？</p><p>用来测试动态 和 静态资源(Webservices(SOAP/REST),Web dynamic languages -PHP,JAva,ASP.NET,Files,etc.Jav)</p></li></ul><p>##如何本地进行服务压力测试</p><ul><li><p>在lib下建一个文件夹，如tests，将所有自己用到的jar，放到这个文件夹中。</p></li><li><p>将自己的测试jar放到 lib/ext下面</p></li><li><p>将自己的程序依赖的jar文件夹，配置到配置文件<br>user.classpath=../lib/tests</p></li></ul><p>##如何分发到不同的机器进行压力测试</p><blockquote><p>参考官方文档<a href="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf</a></p></blockquote><p>##聚合分析</p><pre><code>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值#Samples：表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，也可以以Transaction 为单位显示平均响应时间Median：中位数，也就是 50％ 用户的响应时间90% Line：90％ 用户的响应时间Note：关于 50％ 和 90％ 并发用户数的含义，请参考下文http://www.cnblogs.com/jackei/archive/2006/11/11/557972.htmlMin：最小响应时间Max：最大响应时间Error%：本次测试中出现错误的请求的数量/请求的总数Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数KB/Sec：每秒从服务器端接收到的数据量，相当于LoadRunner中的Throughput/Sec</code></pre><p>###问题</p><p>####Jmeter-server启动失败：Cannot start. Unable to get local host IP address. is a loopback address</p><pre><code>    在Windows下启动Jmeter非常顺利，转到Linux下居然启动失败。    想起之前 遇到“/etc/hosts文件设置不对导致Jboss启动失败”， 立马把焦点指向/etc/hosts。    果然还是这个问题，贴/etc/hosts示例：    127.0.0.1       localhost.localdomain localhost    10.20.10.31   higkoo.rdev.company.net higkoo    执行命令`hostname`查看当前机器名如果当前机器名与/etc/hosts不一致 ，可手动先执行成一次`hostname yourhostname`或直接加到jmeter-server文件中（注意机器名中不要含域信息，譬如：myname.rdev.company.com。这样设置仍然启动失败）。    由/etc/hosts文件导致启动失败的错误有：    1    Created remote object: UnicastServerRef [liveRef: [endpoint:[10.20.10.31:62090](local),objID:[2c639f6d:12794fca52a:-7fff, 712947915258586677]]]    Server failed to start: java.rmi.RemoteException: Cannot start. higkoo is a loopback address.    2    Created remote object: UnicastServerRef [liveRef: [endpoint:[10.20.10.31:38796](local),objID:[-b0d822e:12794fee8b1:-7fff, 8314597152635832475]]]    Server failed to start: java.rmi.RemoteException: Cannot start. Unable to get local host IP address.</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 测试 </tag>
            
            <tag> 性能测试 </tag>
            
            <tag> 压力测试 </tag>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper学习及项目实践</title>
      <link href="2015/09/25/zookeeper%E5%AD%A6%E4%B9%A0%E5%8F%8A%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>2015/09/25/zookeeper%E5%AD%A6%E4%B9%A0%E5%8F%8A%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. 。</p></blockquote></blockquote><pre><code>它设计一种新的数据结构——Znode，然后在该数据结构的基础上定义了一些原语，也就是一些关于该数据结构的一些操作。有了这些数据结构和原语还不够，因为我们的ZooKeeper是工作在一个分布式的环境下，我们的服务是通过消息以网络的形式发送给我们的分布式应用程序，所以还需要一个通知机制——Watcher机制。那么总结一下，ZooKeeper所提供的服务主要是通过：数据结构+原语+watcher机制，三个部分来实现的。</code></pre><h2 id="使用场景下会使用zookeeper"><a href="#使用场景下会使用zookeeper" class="headerlink" title="使用场景下会使用zookeeper"></a>使用场景下会使用zookeeper</h2><ol><li>项目中在监控mongodb的oplog来进行同步数据库的变更给别的部门.若想做的多机互备,就需要使用到分布式锁,由一台机器进行对oplog的变化进行同步</li><li>项目在定时发送提醒,多台服务器进行周期扫库操作,也同样用到了1中的分布式锁</li><li>假设我们有20个搜索引擎的服务器(每个负责总索引中的一部分的搜索任务)和一个总服务器(负责向这20个搜索引擎的服务器发出搜索请求并合并结果集)，一个备用的总服务器(负责当总服务器宕机时替换总服务器)，一个web的cgi(向总服务器发出搜索请求)。搜索引擎的服务器中的15个服务器提供搜索服务，5个服务器正在生成索引。这20个搜索引擎的服务器经常要让正在提供搜索服务的服务器停止提供服务开始生成索引，或生成索引的服务器已经把索引生成完成可以提供搜索服务了。使用Zookeeper可以保证总服务器自动感知有多少提供搜索引擎的服务器并向这些服务器发出搜索请求，当总服务器宕机时自动启用备用的总服务器.—<a href="https://www.oschina.net/p/zookeeper">分布式系统协调 ZooKeeper</a></li></ol><h2 id="zookeeper来源是什么"><a href="#zookeeper来源是什么" class="headerlink" title="zookeeper来源是什么?"></a>zookeeper来源是什么?</h2><p>ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务，它提供了一项基本服务：分布式锁服务。由于ZooKeeper的开源特性，后来我们的开发者在分布式锁的基础上，摸索了出了其他的使用方法：配置维护、组服务、分布式消息队列、分布式通知/协调等。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ol><li>每个Server在内存中存储了一份数据；</li><li>Zookeeper启动时，将从实例中选举一个leader（Leader选举算法采用了<a href="/2016/09/16/Paxos/">Paxos协议</a>；Paxos核心思想：当多数Server写成功，则任务数据写成功。故 Server数目一般为奇数）；</li><li>Leader负责处理数据更新等操作（<a href="http://blog.jobbole.com/104985/">Zab协议</a>）；</li><li>一个更新操作成功，当且仅当大多数Server在内存中成功修改数据。</li></ol><h2 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h2><ol><li>Leader 负责进行投票的发起和决议,更新系统状态</li><li>Learner–&gt;跟随者Follower 用于接收客户请求并向客户端返回结果,在选择中参与投票</li><li>Learner–&gt;观察者Observer 可以接收客户端连接,将写请求转发给Leader节点,但其不参悟投票过程,只同步Leader的状态.其目的是为了扩展系统,提高读取速度</li><li>client 请求发起方</li></ol><h2 id="具体用在哪里"><a href="#具体用在哪里" class="headerlink" title="具体用在哪里"></a>具体用在哪里</h2><ol><li>配置管理,一处修改,监听者进行更新</li><li>命名服务</li><li>分布式锁 即 Leader Election</li><li>集群管理</li><li>队列管理</li></ol><h2 id="Zookeeper文件系统"><a href="#Zookeeper文件系统" class="headerlink" title="Zookeeper文件系统"></a>Zookeeper文件系统</h2><p>   每个子目录项如 NameService 都被称作为znode，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。<br>   有四种类型的znode：</p><ol><li>PERSISTENT-持久化目录节点:客户端与zookeeper断开连接后，该节点依旧存在</li><li>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点:客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</li><li>EPHEMERAL-临时目录节点:客户端与zookeeper断开连接后，该节点被删除</li><li>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点:客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</li></ol><h2 id="Zookeeper的特点"><a href="#Zookeeper的特点" class="headerlink" title="Zookeeper的特点"></a>Zookeeper的特点</h2><ol><li>最终一致性：为客户端展示同一视图，这是zookeeper最重要的功能。</li><li>可靠性：如果消息被到一台服务器接受，那么它将被所有的服务器接受。</li><li>实时性：Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</li><li>等待无关（wait-free）：慢的或者失效的client不干预快速的client的请求。</li><li>原子性：更新只能成功或者失败，没有中间状态。</li><li>顺序性：所有Server，同一消息发布顺序一致。</li></ol><h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><ol><li>分布式锁的场景使用</li></ol><pre><code><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server x.x.x.x:4180</span><br><span class="line"></span><br><span class="line">ls /key</span><br><span class="line"></span><br><span class="line">&gt;[data, leader]</span><br><span class="line"></span><br><span class="line">[zk: x.x.x.x:4180(CONNECTED) 6] get /key/leader</span><br><span class="line"></span><br><span class="line">cZxid = 0xc1098cd0b0</span><br><span class="line">ctime = Sun Jul 16 13:10:01 CST 2017</span><br><span class="line">mZxid = 0xc1098cd0b0</span><br><span class="line">mtime = Sun Jul 16 13:10:01 CST 2017</span><br><span class="line">pZxid = 0xc112aec1c0</span><br><span class="line">cversion = 152</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 2</span><br><span class="line"></span><br><span class="line">[zk: x.x.x.x:4180(CONNECTED) 7] ls /key/leader</span><br><span class="line">[_c_7ea9234d-3973-4e1d-8a6a-e2e30062cdc4-latch-0000000076, _c_5444e12a-c7ef-48bb-8ee6-271eea4a1c29-latch-0000000075]</span><br><span class="line">[zk: x.x.x.x:4180(CONNECTED) 8] get /key/leader/_c_7ea9234d-3973-4e1d-8a6a-e2e30062cdc4-latch-0000000076</span><br><span class="line">24</span><br><span class="line">cZxid = 0xc112aec1c0</span><br><span class="line">ctime = Fri Mar 30 16:58:50 CST 2018</span><br><span class="line">mZxid = 0xc112aec1c0</span><br><span class="line">mtime = Fri Mar 30 16:58:50 CST 2018</span><br><span class="line">pZxid = 0xc112aec1c0</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0xd5848ddc5ec71f6</span><br><span class="line">dataLength = 2</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line">[zk: x.x.x.x:4180(CONNECTED) 9] get /key/leader/_c_5444e12a-c7ef-48bb-8ee6-271eea4a1c29-latch-0000000075</span><br><span class="line">5</span><br><span class="line">cZxid = 0xc1123e0f90</span><br><span class="line">ctime = Tue Mar 27 10:55:03 CST 2018</span><br><span class="line">mZxid = 0xc1123e0f90</span><br><span class="line">mtime = Tue Mar 27 10:55:03 CST 2018</span><br><span class="line">pZxid = 0xc1123e0f90</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x259977a5b1b3de0</span><br><span class="line">dataLength = 1</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="经典文章链接"><a href="#经典文章链接" class="headerlink" title="经典文章链接"></a>经典文章链接</h2><p><a href="https://segmentfault.com/a/1190000012185902">zookeeper系列</a><br><a href="https://blog.csdn.net/gaoshan12345678910/article/details/67638657">Leader选举</a><br><a href="https://www.cnblogs.com/jsStudyjj/p/5360740.html">基本概念</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protobuf是什么</title>
      <link href="2015/09/22/Protobuf%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>2015/09/22/Protobuf%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎来到protocol buffer的开发者指南文档，一种语言无关、平台无关、扩展性好的用于通信协议、数据存储的结构化数据串行化方法。本文档面向希望使用protocol buffer的Java、C++或Python开发者。这个概览介绍了protocol buffer，并告诉你如何开始，你随后可以跟随<a href="http://code.google.com/apis/protocolbuffers/docs/tutorials.html">编程指导</a>深入了解<a href="http://code.google.com/apis/protocolbuffers/docs/encoding.html">protocol buffer编码方式</a>。<a href="http://code.google.com/apis/protocolbuffers/docs/reference/overview.html">API参考文档</a>同样也是提供了这三种编程语言的版本，不够<a href="http://code.google.com/apis/protocolbuffers/docs/proto.html">协议语言</a>和<a href="http://code.google.com/apis/protocolbuffers/docs/style.html">样式</a>指导都是编写 .proto 文件。</p></blockquote><h4 id="什么是protocol-buffer"><a href="#什么是protocol-buffer" class="headerlink" title="什么是protocol buffer"></a>什么是<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/">protocol buffer</a></h4><p>ProtocolBuffer是用于结构化数据串行化的灵活、高效、自动的方法，有如XML，不过它更小、更快、也更简单。你可以定义自己的数据结构，然后使用代码生成器生成的代码来读写这个数据结构。你甚至可以在无需重新部署程序的情况下更新数据结构。</p><h4 id="他们如何工作"><a href="#他们如何工作" class="headerlink" title="他们如何工作"></a>他们如何工作</h4><p>你首先需要在一个 .proto 文件中定义你需要做串行化的数据结构信息。每个ProtocolBuffer信息是一小段逻辑记录，包含一系列的键值对。这里有个非常简单的 .proto 文件定义了个人信息:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">    required string name=<span class="number">1</span>;</span><br><span class="line">    required int32 id=<span class="number">2</span>;</span><br><span class="line">    optional string email=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span> </span>&#123;</span><br><span class="line">        MOBILE=<span class="number">0</span>;</span><br><span class="line">        HOME=<span class="number">1</span>;</span><br><span class="line">        WORK=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message PhoneNumber &#123;</span><br><span class="line">        required string number=<span class="number">1</span>;</span><br><span class="line">        optional PhoneType type=<span class="number">2</span> [<span class="keyword">default</span>=HOME];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeated PhoneNumber phone=<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有如你所见，消息格式很简单，每个消息类型拥有一个或多个特定的数字字段，每个字段拥有一个名字和一个值类型。值类型可以是数字(整数或浮点)、布尔型、字符串、原始字节或者其他ProtocolBuffer类型，还允许数据结构的分级。你可以指定可选字段，必选字段和重复字段。你可以在<a href="http://code.google.com/apis/protocolbuffers/docs/proto.html">proto.html</a>找到更多关于如何编写 .proto 文件的信息。</p><p>一旦你定义了自己的报文格式(message)，你就可以运行ProtocolBuffer编译器，将你的 .proto 文件编译成特定语言的类。</p><h4 id="为什么不用XML"><a href="#为什么不用XML" class="headerlink" title="为什么不用XML?"></a>为什么不用XML?</h4><p>ProtocolBuffer拥有多项比XML更高级的串行化结构数据的特性，ProtocolBuffer：</p><pre><code>    更简单    小3-10倍    快20-100倍    更少的歧义    可以方便的生成数据存取类 </code></pre><p>例如，让我们看看如何在XML中建模Person的name和email字段:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">email</span>&gt;</span>jdoe@example.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的ProtocolBuffer报文则如下:</p><p>ProtocolBuffer的文本表示<br>这不是正常时使用的二进制数据</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">person</span> &#123;</span><br><span class="line">    <span class="attribute">name</span>: <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">    email: <span class="string">&quot;jdoe@example.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这个报文编码到ProtocolBuffer的<a href="http://code.google.com/apis/protocolbuffers/docs/encoding.html">二进制格式</a>时(上面的文本仅用于调试和编辑)，它只需要28字节和100-200ns的解析时间。而XML的版本需要69字节(除去空白)和 5000-10000ns的解析时间。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之创建型模式</title>
      <link href="2015/09/13/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2015/09/13/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>##创建型模式<br>这六个模式都是与创建对象相关的</p><ul><li>简单工厂模式（Simple Factory）；</li><li>工厂方法模式（Factory Method）；</li><li>抽象工厂模式（Abstract Factory）；</li><li>创建者模式（Builder）；</li><li>原型模式（Prototype）；</li><li>单例模式（Singleton）；</li></ul><h3 id="简单工厂模式-Simple-Factory-；"><a href="#简单工厂模式-Simple-Factory-；" class="headerlink" title="简单工厂模式(Simple Factory)；"></a>简单工厂模式(Simple Factory)；</h3><h3 id="工厂方法模式-Factory-Method-；"><a href="#工厂方法模式-Factory-Method-；" class="headerlink" title="工厂方法模式(Factory Method)；"></a>工厂方法模式(Factory Method)；</h3><p>建立一个工厂类，对实现同一接口的类进行实例化创建。</p><img  src='/images/pattern/factory_1.png' class='col-xs-12 thumbnail'/>``<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IParser</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">parse</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONParser</span> <span class="keyword">implements</span> <span class="title">IParser</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parse</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//create json string</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;class:&quot;</span>+obj.getClass()+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLParser</span> <span class="keyword">implements</span> <span class="title">IParser</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parse</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//create xml string....</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;object&gt;&lt;class&gt;&quot;</span>+obj.getClass()+<span class="string">&quot;&lt;/class&gt;&lt;/object&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParserFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String  TYPE_XML=<span class="string">&quot;xml&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String  TYPE_JSON=<span class="string">&quot;json&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IParser <span class="title">buildParser</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> ParserFactory.TYPE_XML:<span class="keyword">return</span> <span class="keyword">new</span> XMLParser();</span><br><span class="line">            <span class="keyword">case</span> ParserFactory.TYPE_JSON:<span class="keyword">return</span> <span class="keyword">new</span> JSONParser();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       IParser parser= ParserFactory.buildParser(ParserFactory.TYPE_JSON);</span><br><span class="line">        System.out.print(parser.parse(parser));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output &#123;class:JSONParser&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式-Abstract-Factory-；"><a href="#抽象工厂模式-Abstract-Factory-；" class="headerlink" title="抽象工厂模式(Abstract Factory)；"></a>抽象工厂模式(Abstract Factory)；</h3><p>工厂方法，每创建一个新的类时，就要个性类工厂类，这样拓展性比较差，如何能通过不个性工厂类而进行扩展呢。这里就用到了抽象工厂模式，就是创建多个工厂，一旦要增加新的类型就增加一个新的工厂，不需要修改现有代码。</p><img  src='/images/pattern/abstractfactory.png' class='col-xs-12 thumbnail'/>基于上面代码将ParserFactory工厂类用一个抽象工厂类和两个子工厂类进行代替<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> design.pattern.factory.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractParserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> IParser <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONParserFactory</span> <span class="keyword">extends</span> <span class="title">AbstractParserFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">IParser <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONParser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLParserFactory</span> <span class="keyword">extends</span> <span class="title">AbstractParserFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">IParser <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLParser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="建造者模式-Builder-；"><a href="#建造者模式-Builder-；" class="headerlink" title="建造者模式(Builder)；"></a>建造者模式(Builder)；</h3><p><code>GoF这样定义：</code></p><blockquote><p>建造者模式：是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><img  src='/images/pattern/builder.png' class='col-xs-12 thumbnail'/>咱们这里以创建应用为例，这里我们创建两个应用，考试系统和CRM系统，创建过程是，需求->原型图->开发计划->表设计->架构设计->功能实现->测试->交付 大概是这样一个简单的过程,这里就会看到同样的构建过程得到不同的表示。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;String&gt; impleProcess=<span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String imple)</span></span>&#123;</span><br><span class="line">        impleProcess.add(imple);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector&lt;String&gt; <span class="title">getImpleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> impleProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProjectBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Project <span class="title">getProject</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeRequirement</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makePrototype</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeScheduler</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTables</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeAppFrameWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">programming</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamProjectBuilder</span> <span class="keyword">implements</span> <span class="title">IProjectBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Project project;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExamProjectBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project = <span class="keyword">new</span> Project();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Project <span class="title">getProject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> project;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRequirement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建考试系统需求&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建考试原型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建考试计划&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建考试系统表&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeAppFrameWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建考试应用架构&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">programming</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;考试应用代码实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;测试考试应用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;交付考试应用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CRMProjectBuilder</span> <span class="keyword">implements</span> <span class="title">IProjectBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRMProjectBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project = <span class="keyword">new</span> Project();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Project <span class="title">getProject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> project;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Project project;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRequirement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建CRM系统需求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建CRM原型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建CRM计划&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建CRM系统表&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeAppFrameWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;创建CRM应用架构&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">programming</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;CRM应用代码实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;测试CRM应用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.project.process(<span class="string">&quot;交付CRM应用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IProjectBuilder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(IProjectBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Project <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder.makeRequirement();</span><br><span class="line">        <span class="keyword">this</span>.builder.makePrototype();</span><br><span class="line">        <span class="keyword">this</span>.builder.makeScheduler();</span><br><span class="line">        <span class="keyword">this</span>.builder.makeAppFrameWork();</span><br><span class="line">        <span class="keyword">this</span>.builder.makeTables();</span><br><span class="line">        <span class="keyword">this</span>.builder.programming();</span><br><span class="line">        <span class="keyword">this</span>.builder.test();</span><br><span class="line">        <span class="keyword">this</span>.builder.delivery();</span><br><span class="line">        <span class="keyword">return</span> builder.getProject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Director  director = <span class="keyword">new</span> Director(<span class="keyword">new</span> CRMProjectBuilder());</span><br><span class="line">        Project project = director.process();</span><br><span class="line">        System.out.println(project.getImpleProcess());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出  [创建CRM系统需求, 创建CRM原型, 创建CRM计划, 创建CRM应用架构, 创建CRM系统表, CRM应用代码实现, 测试CRM应用, 交付CRM应用]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原型模式-Prototype-；"><a href="#原型模式-Prototype-；" class="headerlink" title="原型模式(Prototype)；"></a>原型模式(Prototype)；</h3><p>GoF这样定义：</p><blockquote><p>用原型实例指定创建对象的种类,并且通过拷贝这个原型来创建新的对象。 </p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepClonePrototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector&lt;String&gt; attrs=<span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Object pro=<span class="keyword">new</span> DeepClonePrototype().deepClone();</span><br><span class="line">        System.out.println(pro.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单例模式-Singleton-；"><a href="#单例模式-Singleton-；" class="headerlink" title="单例模式(Singleton)；"></a>单例模式(Singleton)；</h3><blockquote><p>保证一个类仅有一个实例,并提供一个访问它的全局访问点。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        System.out.print(instance.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之结构型模式</title>
      <link href="2015/09/13/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2015/09/13/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>##结构型模式</p><p>描述在面向对象设计中，类和对象的几种结构关系，设计好了会为后续代码的维护带来很大的方便。</p><ul><li>外观模式（Facade）；</li><li>适配器模式（Adapter）；</li><li>代理模式（Proxy）；</li><li>装饰模式（Decorator）；</li><li>桥模式（Bridge）；</li><li>组合模式（Composite）；</li><li>享元模式（Flyweight）;</li></ul><p>###外观模式（Facade）又称门面模式；<br>GoF这样定义:</p><blockquote><p>为子系统中的一组接口提供一个一致的界面, Facade 模式定义了一个高层 接口,这个接口使得这一子系统更加容易使用。</p></blockquote><p>外观模式，在我理解就是给一组对象提供一个对外统计的操作方式 ，让外部使用者不用操心内部工作。如一个汽车，一个电脑，你点开机，硬盘，CPU，内存，显卡就都开始工作了，关机时也一样。这里对我们操作者来说其实就是一个开关。</p><img  src='/images/pattern/facade.png' class='col-xs-12 thumbnail'/>``<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        Computer computer=<span class="keyword">new</span> Computer();</span><br><span class="line">        computer.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------shutdown-----------&quot;</span>);</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.facade;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> GraphicsCard graphicsCard;</span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = <span class="keyword">new</span> CPU();</span><br><span class="line">        <span class="keyword">this</span>.memory = <span class="keyword">new</span> Memory();</span><br><span class="line">        <span class="keyword">this</span>.graphicsCard = <span class="keyword">new</span> GraphicsCard();</span><br><span class="line">        <span class="keyword">this</span>.disk = <span class="keyword">new</span> Disk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu.startup();</span><br><span class="line">        <span class="keyword">this</span>.memory.startup();</span><br><span class="line">        <span class="keyword">this</span>.disk.startup();</span><br><span class="line">        <span class="keyword">this</span>.graphicsCard.startup();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.graphicsCard.shutdown();</span><br><span class="line">        <span class="keyword">this</span>.disk.shutdown();</span><br><span class="line">        <span class="keyword">this</span>.memory.shutdown();</span><br><span class="line">        <span class="keyword">this</span>.cpu.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Disk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicsCard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><pre><code>CPU启动Memory启动Disk启动GraphicsCard启动--------shutdown-----------GraphicsCard关闭Disk关闭Memory关闭CPU关闭</code></pre><p>###适配器模式（Adapter）；<br>GoF这样定义:</p><blockquote><p>将一个类的接口转换成客户希望的另外一个接口。 Adapter 模式使得原本 由于接口不兼容而不能一起工作的那些类可以一起工作。</p></blockquote><p>我的事例理解：如咱们家中常用的洗衣机，当我们要与我们的水龙头进行对接时，中间要借助一个中间者“转换头”，它在这里就起到了适配作用。</p><img  src='/images/pattern/adapter1.png' class='col-xs-12 thumbnail'/>``<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WashingMachine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectPort</span><span class="params">(IWashFaucetAdapter washportadapter)</span></span>&#123;</span><br><span class="line">        System.out.print(washportadapter.outToWashingPort()+<span class="string">&quot; success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWashFaucetAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">outToWashingPort</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WashingFaucetAdapter</span> <span class="keyword">extends</span> <span class="title">Faucet</span> <span class="keyword">implements</span> <span class="title">IWashFaucetAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">outToWashingPort</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="string">&quot;transform&quot;</span>+<span class="keyword">this</span>.port()+<span class="string">&quot; to washing port!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> * 水龙头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Faucet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">port</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;facucet port .....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;facucet port&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建水龙头、洗衣机、镶接头</span></span><br><span class="line">        WashingMachine washingMachine=<span class="keyword">new</span> WashingMachine();</span><br><span class="line">        WashingFaucetAdapter washingFaucetAdapter= <span class="keyword">new</span> WashingFaucetAdapter();</span><br><span class="line"><span class="comment">//        进行适配</span></span><br><span class="line">        washingMachine.connectPort(washingFaucetAdapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><pre><code>facucet port .....transformfacucet port to washing port! success!</code></pre><p>###代理模式（Proxy）；<br>GoF这样定义:</p><blockquote><p>为其他对象提供一个代理以控制对这个对象的访问。</p></blockquote><p>这里就以找工作为例吧，现在我们找工作都会通过找工作平台来进行找工作，因为他们有资源，他们比较专业。我们告诉他们要找什么样的工作他们就会给我们推荐什么样的工作，在这个环节中，类似51job,100offer这样的平台就是所谓的招聘代理。<br>他代理公司进行招人。同时也方便了我们去找工作。</p><img  src='/images/pattern/adapter1.png' class='col-xs-12 thumbnail'/><p><code>下面是代码实现：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRecruitment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recruitment</span><span class="params">(String user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FounderWork</span> <span class="keyword">implements</span> <span class="title">IRecruitment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recruitment</span><span class="params">(String user)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;招聘员工&quot;</span>+user+<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkProxy</span> <span class="keyword">implements</span> <span class="title">IRecruitment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IRecruitment recruitment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.recruitment = <span class="keyword">new</span> FounderWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recruitment</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.recruitment.recruitment(user);</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;进行招聘前工作准备！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;进行招聘完成后工作收尾！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WorkProxy().recruitment(<span class="string">&quot;Aaron&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>WorkProxy进行招聘前工作准备！FounderWork招聘员工Aaron成功！WorkProxy进行招聘完成后工作收尾！</code></pre><p>###装饰模式（Decorator）；<br>GoF这样定义:</p><blockquote><p>动态地给一个对象添加一些额外的职责。就扩展功能而言, Decorator 模 式比生成子类方式更为灵活。</p></blockquote><p>我们可以拿我们的扩音器为例，假如一个mp3的有声音，那么它的声音不是很大，稍微远一点我们就不能听到了，这里就会用一个扩音器，放在mp3旁边，离稍微远点也能享受音乐的快乐了。</p><p>这里，扩音器就是装饰器，他使mp3的声音变大。有时扩音器也可以改变声音的音质，变的更好听。</p><img  src='/images/pattern/decorator.png' class='col-xs-12 thumbnail'/><p><code>下面是代码实现：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISoundable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MP3</span> <span class="keyword">implements</span> <span class="title">ISoundable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;small sound from mp3!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundDecorator</span> <span class="keyword">implements</span> <span class="title">ISoundable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ISoundable soundable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoundDecorator</span><span class="params">(ISoundable soundable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.soundable = soundable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.soundable.sound();</span><br><span class="line">        System.out.println(<span class="string">&quot;make sound beautiful&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;make sound aloud &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SoundDecorator(<span class="keyword">new</span> MP3()).sound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>small sound from mp3!make sound beautifulmake sound aloud </code></pre><p>###桥接模式（Bridge）；<br>GoF这样定义:</p><blockquote><p>将抽象部分与它的实现部分分离,使它们都可以独立地变化。</p></blockquote><p>这里还举一个生活中常用到的例子，洗衣机有多种，但我们当我们没有接到水龙头上的管子时，我们可以去商店里买，这里可能会有大小长短各不相同的管子，但都可以与我们的洗衣机相连接进行使用。</p><p>这里我们变化的是多种洗衣机和多种管子，我们为洗衣机做一个抽像类。可以设置不同的管子。</p><img  src='/images/pattern/bridge.png' class='col-xs-12 thumbnail'/>``<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPip</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">color</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> * 水龙头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedPip</span> <span class="keyword">implements</span> <span class="title">IPip</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">color</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Red&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> * 水龙头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BluePip</span> <span class="keyword">implements</span> <span class="title">IPip</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">color</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;blue pip&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractWashingMachine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IPip pip;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPip <span class="title">getPip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPip</span><span class="params">(IPip pip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pip = pip;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot; set &quot;</span>+pip.color()+<span class="string">&quot; &quot;</span>+pip.getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaWashingMachine</span> <span class="keyword">extends</span> <span class="title">AbstractWashingMachine</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierWashingMachine</span> <span class="keyword">extends</span> <span class="title">AbstractWashingMachine</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HaierWashingMachine().setPip(<span class="keyword">new</span> BluePip());</span><br><span class="line">        <span class="keyword">new</span> HaierWashingMachine().setPip(<span class="keyword">new</span> RedPip());</span><br><span class="line">        <span class="keyword">new</span> ChinaWashingMachine().setPip(<span class="keyword">new</span> BluePip());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>HaierWashingMachine set blue pip BluePipHaierWashingMachine set Red RedPipChinaWashingMachine set blue pip BluePip</code></pre><p>###组合模式（Composite）；<br>GoF这样定义:</p><blockquote><p>将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使 得客户对单个对象和复合对象的使用具有一致性。</p></blockquote><p>这里我们最常见的就是公司与部门的关系，其实就是整体与部分的关系。</p><img  src='/images/pattern/composite.png' class='col-xs-12 thumbnail'/><p><code>代码</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCompany</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;AbstractCompany&gt; companys=<span class="keyword">new</span> Vector&lt;AbstractCompany&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;deep;i++)&#123;</span><br><span class="line">            sb.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="keyword">this</span>.getCompanys().size();</span><br><span class="line">        <span class="keyword">if</span> (l &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.getCompanys().get(i).display(deep+<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector&lt;AbstractCompany&gt; <span class="title">getCompanys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> companys;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCompany</span><span class="params">(AbstractCompany company)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.companys.remove(company);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCompany</span><span class="params">(AbstractCompany company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.companys.add(company);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.composite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">extends</span> <span class="title">AbstractCompany</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.composite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TechDepartment</span> <span class="keyword">extends</span> <span class="title">AbstractCompany</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TechDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TechDepartment</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.composite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UIDepartment</span> <span class="keyword">extends</span> <span class="title">AbstractCompany</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIDepartment</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.composite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractCompany company = <span class="keyword">new</span> Company(<span class="string">&quot;总公司&quot;</span>);</span><br><span class="line">        AbstractCompany abc = <span class="keyword">new</span> TechDepartment(<span class="string">&quot;技术一部&quot;</span>);</span><br><span class="line">        company.addCompany(abc);</span><br><span class="line">        abc = <span class="keyword">new</span> TechDepartment(<span class="string">&quot;技术二部&quot;</span>);</span><br><span class="line">        company.addCompany(abc);</span><br><span class="line">        abc = <span class="keyword">new</span> TechDepartment(<span class="string">&quot;技术三部&quot;</span>);</span><br><span class="line">        company.addCompany(abc);</span><br><span class="line">        abc = <span class="keyword">new</span> UIDepartment(<span class="string">&quot;UI一部&quot;</span>);</span><br><span class="line">        company.addCompany(abc);</span><br><span class="line">        abc = <span class="keyword">new</span> UIDepartment(<span class="string">&quot;UI二部&quot;</span>);</span><br><span class="line">        company.addCompany(abc);</span><br><span class="line">        abc = <span class="keyword">new</span> UIDepartment(<span class="string">&quot;UI三部&quot;</span>);</span><br><span class="line">        company.addCompany(abc);</span><br><span class="line">        AbstractCompany abc1 = <span class="keyword">new</span> UIDepartment(<span class="string">&quot;UI一组&quot;</span>);</span><br><span class="line">        abc.addCompany(abc1);</span><br><span class="line">        abc1 = <span class="keyword">new</span> UIDepartment(<span class="string">&quot;UI二组&quot;</span>);</span><br><span class="line">        abc.addCompany(abc1);</span><br><span class="line">        abc1 = <span class="keyword">new</span> UIDepartment(<span class="string">&quot;UI三组&quot;</span>);</span><br><span class="line">        abc.addCompany(abc1);</span><br><span class="line">        company.display(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>输出：</code></p><pre><code>总公司        技术一部        技术二部        技术三部        UI一部        UI二部        UI三部                UI一组                UI二组                UI三组</code></pre><p>###享元模式（Flyweight）<br>GoF这样定义:</p><blockquote><p>运用共享技术有效地支持大量细粒度的对象。</p></blockquote><p>咱们这里会想到数据库连接池，对，就是它，咱们先看一下类图。</p><img  src='/images/pattern/flayweight.png' class='col-xs-12 thumbnail'/>`示例代码如下：`<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.flayweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Connection&gt; pool;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionPool instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolSize=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mysql&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConnectionPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pool=<span class="keyword">new</span> Vector&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(driverClassName);</span><br><span class="line">                pool.add(DriverManager.getConnection(url, username, password));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ConnectionPool <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance=<span class="keyword">new</span> ConnectionPool();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(pool.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            connection=pool.get(<span class="number">0</span>);</span><br><span class="line">            pool.remove(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">        pool.add(<span class="number">0</span>,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.flayweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ConnectionPool pool=ConnectionPool.getInstance();</span><br><span class="line">        Connection connection=pool.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection=pool.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        pool.release(connection);</span><br><span class="line">        connection=pool.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>com.mysql.jdbc.JDBC4Connection@2d8e6db6com.mysql.jdbc.JDBC4Connection@23ab930dcom.mysql.jdbc.JDBC4Connection@23ab930d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA设计模式之行为型模式</title>
      <link href="2015/09/13/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2015/09/13/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>##行为型模式</p><p>对象的创建和结构定义好后，就是他们的行为的设计了。</p><ul><li>模板方法模式（Template Method）；</li><li>观察者模式（Observer）；</li><li>状态模式（State）；</li><li>策略模式（Strategy）；</li><li>职责链模式（Chain of Responsibility）；</li><li>命令模式（Command）；</li><li>访问者模式（Visitor）；</li><li>调停者模式（Mediator）；</li><li>备忘录模式（Memento）；</li><li>迭代器模式（Iterator）；</li><li>解释器模式（Interpreter）；</li></ul><h2 id="模板方法模式（Template-Method）；"><a href="#模板方法模式（Template-Method）；" class="headerlink" title="模板方法模式（Template Method）；"></a>模板方法模式（Template Method）；</h2><p>GoF这样定义:</p><blockquote><p>定义一个操作中的算法的骨架,而将一些步骤延迟到子类中。<br> Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><p>这里我们以画布上画画为例,我们定义一抽象类，其中定义一个渲染方法，渲染时有两个步骤，一个画背景，二能画主体，三加印章。<br>咱们这里画一个圆和画一个矩形，抽象类中定义渲染时的先后流程，具体的实现有具体的子类进行实现。</p><div class="col-xs-12"><img  src='/images/pattern/templatemethod.png' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div><p><code>代码如下：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.temlatemothod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractShape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.drawBackground();</span><br><span class="line">        <span class="keyword">this</span>.drawGraphics();</span><br><span class="line">        <span class="keyword">this</span>.drawSignature();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawSignature</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawGraphics</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.temlatemothod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleShape</span> <span class="keyword">extends</span> <span class="title">AbstractShape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSignature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw circle signature!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw circle background! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawGraphics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw circle graphics!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.temlatemothod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectShape</span> <span class="keyword">extends</span> <span class="title">AbstractShape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSignature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw rect signature!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw rect background! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawGraphics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw rect graphics!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.temlatemothod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> CircleShape().render();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> RectShape().render();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>输出结果：</code></p><pre><code>draw circle background! draw circle graphics!draw circle signature!-----draw circle background! draw circle graphics!draw circle signature!</code></pre><h2 id="观察者模式（Observer）；"><a href="#观察者模式（Observer）；" class="headerlink" title="观察者模式（Observer）；"></a>观察者模式（Observer）；</h2><p>GoF这样定义:</p><blockquote><p>定义对象间的一种一对多的依赖关系 , 以便当一个对象的状态发生改变时 , 所有依赖于它的对象都得到通知并自动刷新。</p></blockquote><p>我们常常会遇到，当一个事件发生时，会有一些监听者进行相应的响应。这里我们的例子是， 当GPS发生变化时，它的订阅者的update的方法就会被调用。</p><div class="col-xs-12">    <img  src='/images/pattern/observer.png' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div>`下面是示例代码：`<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers=<span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observers)&#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPSSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Point point;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(Point point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.point=point;</span><br><span class="line">        <span class="keyword">this</span>.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;_&quot;</span>+<span class="keyword">this</span>.hashCode()+<span class="string">&quot; observer:&quot;</span>+subject.getClass().getSimpleName()+<span class="string">&quot; position changed;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        GPSSubject subject=<span class="keyword">new</span> GPSSubject();</span><br><span class="line">        subject.addObserver(<span class="keyword">new</span> MapObserver());</span><br><span class="line">        Observer observer1=<span class="keyword">null</span>;</span><br><span class="line">        subject.addObserver(observer1=<span class="keyword">new</span> MapObserver());</span><br><span class="line">        subject.move(<span class="keyword">new</span> Point(<span class="number">200</span>, <span class="number">400</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;remove one observer from subject&#x27;s observer list!&quot;</span>);</span><br><span class="line">        subject.removeObserver(observer1);</span><br><span class="line">        subject.move(<span class="keyword">new</span> Point(<span class="number">200</span>,<span class="number">400</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="状态模式（State）；"><a href="#状态模式（State）；" class="headerlink" title="状态模式（State）；"></a>状态模式（State）；</h2><blockquote><p>GoF这样定义: 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它<br>所属的类。</p></blockquote><div class="col-xs-12">    <img  src='/images/pattern/state.png' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div><p><code>以下是示例代码：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> <span class="keyword">extends</span> <span class="title">AbstractLifeState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OpeningState openingState = <span class="keyword">new</span> OpeningState();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ClosingState closingState = <span class="keyword">new</span> ClosingState();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RunningState runningState = <span class="keyword">new</span> RunningState();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StoppingState stoppingState = <span class="keyword">new</span> StoppingState();</span><br><span class="line">    <span class="keyword">private</span> AbstractLifeState lifeState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractLifeState <span class="title">getLifeState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lifeState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLifeState</span><span class="params">(AbstractLifeState lifeState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lifeState = lifeState;</span><br><span class="line">        <span class="keyword">this</span>.lifeState.setContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lifeState.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lifeState.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lifeState.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lifeState.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLifeState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpeningState</span> <span class="keyword">extends</span> <span class="title">AbstractLifeState</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate close&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.context.setLifeState(Context.closingState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate run&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.context.setLifeState(Context.runningState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate stop&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.context.setLifeState(Context.stoppingState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunningState</span> <span class="keyword">extends</span> <span class="title">AbstractLifeState</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate open&quot;</span>);</span><br><span class="line">        context.setLifeState(Context.openingState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate close&quot;</span>);</span><br><span class="line">        context.setLifeState(Context.closingState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate stop&quot;</span>);</span><br><span class="line">        context.setLifeState(Context.stoppingState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoppingState</span> <span class="keyword">extends</span> <span class="title">AbstractLifeState</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate stop&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosingState</span> <span class="keyword">extends</span> <span class="title">AbstractLifeState</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate open&quot;</span>);</span><br><span class="line">        context.setLifeState(Context.openingState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;: operate close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate run&quot;</span>);</span><br><span class="line">        context.setLifeState(Context.runningState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;: operate stop&quot;</span>);</span><br><span class="line">        context.setLifeState(Context.stoppingState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> design.pattern.flayweight.ConnectionPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Context context=<span class="keyword">new</span> Context();</span><br><span class="line">        context.setLifeState(Context.closingState);</span><br><span class="line">        context.open();</span><br><span class="line">        context.run();</span><br><span class="line">        context.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="策略模式（Strategy）；"><a href="#策略模式（Strategy）；" class="headerlink" title="策略模式（Strategy）；"></a>策略模式（Strategy）；</h2><p>GoF这样定义:</p><blockquote><p>定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换。</p></blockquote><p>计算器的实现，其中计算的</p><div class="col-xs-12"><img src='/images/pattern/strategy.png' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div><p><code>以下是示例代码：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalculate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCalculate</span> <span class="keyword">implements</span> <span class="title">ICalculate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivisionCalculate</span> <span class="keyword">implements</span> <span class="title">ICalculate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubtractionCalculate</span> <span class="keyword">implements</span> <span class="title">ICalculate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ICalculate calculate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(ICalculate calculate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.calculate=calculate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICalculate <span class="title">getCalculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalculate</span><span class="params">(ICalculate calculate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.calculate = calculate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.calculate.calculate(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Context context =<span class="keyword">new</span> Context(<span class="keyword">new</span> AddCalculate());</span><br><span class="line">        <span class="keyword">double</span> result=context.calculate(<span class="number">20.0</span>,<span class="number">30.3</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        context.setCalculate(<span class="keyword">new</span> DivisionCalculate());</span><br><span class="line">        System.out.println(context.calculate(<span class="number">20</span>,<span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>结果输出：</code></p><pre><code>50.30.5</code></pre><h2 id="职责链模式（Chain-of-Responsibility）；"><a href="#职责链模式（Chain-of-Responsibility）；" class="headerlink" title="职责链模式（Chain of Responsibility）；"></a>职责链模式（Chain of Responsibility）；</h2><p>GoF这样定义:</p><blockquote><p>典型的事例就是我们在Spring中的拦截器和Servlet中的Filter，它们都是现成的责任链模式。</p></blockquote><div class="col-xs-12"><img  src='/images/pattern/ResponsibilityChain.png' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div>`以下是示例代码：`<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.responsibilitychain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getSuccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.responsibilitychain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getSuccessor()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName()+<span class="string">&quot;,处理请求，并调用下一个处理者&quot;</span>);</span><br><span class="line">            getSuccessor().process();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName()+<span class="string">&quot;,仅处理，无下一处理者&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.responsibilitychain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getSuccessor()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName()+<span class="string">&quot;,处理请求，并调用下一个处理者&quot;</span>);</span><br><span class="line">            getSuccessor().process();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName()+<span class="string">&quot;,仅处理，无下一处理者&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.responsibilitychain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler validate = <span class="keyword">new</span> ValidateHandler();</span><br><span class="line">        Handler handler = <span class="keyword">new</span> LoggerHandler();</span><br><span class="line">        validate.setSuccessor(handler);</span><br><span class="line">        validate.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>输出：</code></p><pre><code>ValidateHandler,处理请求，并调用下一个处理者LoggerHandler,仅处理，无下一处理者</code></pre><h2 id="命令模式（Command）；"><a href="#命令模式（Command）；" class="headerlink" title="命令模式（Command）；"></a>命令模式（Command）；</h2><p>GoF这样定义:</p><blockquote><p>将一个请求封装为一个对象,从而使你可用不同的请求对客户进行参数 化;对请求排队或记录请求日志,以及支持可取消的操作。</p></blockquote><blockquote><blockquote><p><a href="http://www.cnblogs.com/java-my-life/archive/2012/06/01/2526972.html">AudioPlayer系统(转)</a></p></blockquote></blockquote><p>  　　小女孩茱丽(Julia)有一个盒式录音机，此录音机有播音(Play)、倒带(Rewind)和停止(Stop)功能，录音机的键盘便是请求者(Invoker)角色；茱丽(Julia)是客户端角色，而录音机便是接收者角色。Command类扮演抽象命令角色，而PlayCommand、StopCommand和RewindCommand便是具体命令类。茱丽(Julia)不需要知道播音(play)、倒带(rewind)和停止(stop)功能是怎么具体执行的，这些命令执行的细节全都由键盘(Keypad)具体实施。茱丽(Julia)只需要在键盘上按下相应的键便可以了。</p><p>  　　录音机是典型的命令模式。录音机按键把客户端与录音机的操作细节分割开来。</p><div class="col-xs-12"><img  src='/images/pattern/command.png' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div>`以下是示例代码：`<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioPlay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rewind</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒带....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;停止....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AudioPlay audioPlay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayCommand</span><span class="params">(AudioPlay audioPlay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.audioPlay = audioPlay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.audioPlay.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RewindCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AudioPlay audioPlay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RewindCommand</span><span class="params">(AudioPlay audioPlay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.audioPlay = audioPlay;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.audioPlay.rewind();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AudioPlay audioPlay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StopCommand</span><span class="params">(AudioPlay audioPlay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.audioPlay = audioPlay;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.audioPlay.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Keypad</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command playCommand;</span><br><span class="line">    <span class="keyword">private</span> Command rewindCommand;</span><br><span class="line">    <span class="keyword">private</span> Command stopCommand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlayCommand</span><span class="params">(Command playCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.playCommand = playCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRewindCommand</span><span class="params">(Command rewindCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rewindCommand = rewindCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopCommand</span><span class="params">(Command stopCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stopCommand = stopCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        playCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rewind</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rewindCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stopCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> design.pattern.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Aaron on 15/9/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AudioPlay audioPlay = <span class="keyword">new</span> AudioPlay();</span><br><span class="line">        PlayCommand playCommand = <span class="keyword">new</span> PlayCommand(audioPlay);</span><br><span class="line">        RewindCommand rewindCommand = <span class="keyword">new</span> RewindCommand(audioPlay);</span><br><span class="line">        StopCommand stopCommand = <span class="keyword">new</span> StopCommand(audioPlay);</span><br><span class="line"></span><br><span class="line">        Keypad keypad=<span class="keyword">new</span> Keypad();</span><br><span class="line">        keypad.setPlayCommand(playCommand);</span><br><span class="line">        keypad.setRewindCommand(rewindCommand);</span><br><span class="line">        keypad.setStopCommand(stopCommand);</span><br><span class="line"></span><br><span class="line">        keypad.play();</span><br><span class="line">        keypad.rewind();</span><br><span class="line">        keypad.stop();</span><br><span class="line">        keypad.play();</span><br><span class="line">        keypad.stop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>输出结果：</code></p><pre><code>播放....倒带....停止....播放....停止....</code></pre><h2 id="访问者模式（Visitor）；"><a href="#访问者模式（Visitor）；" class="headerlink" title="访问者模式（Visitor）；"></a>访问者模式（Visitor）；</h2><p>GoF这样定义:</p><blockquote><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元<br>素的类的前提下定义作用于这些元素的新操作。</p></blockquote><div class="col-xs-12"><img  src='' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div>`以下是示例代码：`<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">## 调停者模式（Mediator）；</span><br><span class="line">GoF这样定义:</span><br><span class="line">&gt;用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用,从而使其耦合松散,而且可以独立地改变它们之间的交互</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-xs-12&quot;</span>&gt;</span><br><span class="line">&lt;img  src=<span class="string">&#x27;&#x27;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;col-lg-offset-3 col-lg-6 col-xs-12 thumbnail&#x27;</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`以下是示例代码：`</span><br><span class="line">```java</span><br></pre></td></tr></table></figure>## 备忘录模式（Memento）；GoF这样定义:> 在不破坏封装性的前提下,捕获一个对象的内部状态,并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。<div class="col-xs-12"><img  src='' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div>`以下是示例代码：`<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">## 迭代器模式（Iterator）；</span><br><span class="line">GoF这样定义:</span><br><span class="line">&gt;提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示。</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-xs-12&quot;</span>&gt;</span><br><span class="line">&lt;img  src=<span class="string">&#x27;&#x27;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;col-lg-offset-3 col-lg-6 col-xs-12 thumbnail&#x27;</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`以下是示例代码：`</span><br><span class="line">```java</span><br></pre></td></tr></table></figure>##解释器模式（Interpreter）GoF这样定义:>给定一个语言,定义它的文法的一种表示,并定义一个解释器,该解释器使用该表示来解释语言中的句子。<div class="col-xs-12"><img  src='' class='col-lg-offset-3 col-lg-6 col-xs-12 thumbnail'/></div>`以下是示例代码：````java```°]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中使用的工具整理</title>
      <link href="2015/09/13/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/"/>
      <url>2015/09/13/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2015目前我日常工作中常用的工具，在这里进行一次整理备份</p></blockquote><ul><li>IntelliJ IDEA</li><li>Web Storm</li><li>PyCharm</li><li>MindPreview Lite</li><li>SQLPro <a href="http://www.macsqlclient.com/">http://www.macsqlclient.com/</a></li><li>rdm</li><li>redis</li><li>mongodb</li><li>zkcli</li><li>alfred</li><li>hexo </li></ul><p>zsh + iterm + powerline</p>]]></content>
      
      
      <categories>
          
          <category> 日常工具 </category>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVN日常使用</title>
      <link href="2015/09/13/MVN%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
      <url>2015/09/13/MVN%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工作中日常使用</p></blockquote><p>#command</p><p>跳过测试进行</p><pre><code>mvn  -Dmaven.test.skip=true package</code></pre><h1 id="指定打包的环境"><a href="#指定打包的环境" class="headerlink" title="指定打包的环境"></a>指定打包的环境</h1><pre><code>mvn -DskipTests clean package -P FTE2</code></pre><blockquote><p>mvn -U clean package -Dmaven.test.skip=true -pl biz/pom.xml -am<br>    <a href="http://www.mzone.cc/article/277.html">maven中snapshot快照库和release发布库的区别和作用</a></p></blockquote><blockquote><p>mvn -am -DskipTests -U -pl biz-web clean package       </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java thread 多线程 ExecutorService</title>
      <link href="2015/09/12/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutorService/"/>
      <url>2015/09/12/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutorService/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程 Executors</title>
      <link href="2015/09/12/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutors/"/>
      <url>2015/09/12/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutors/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor 源码分析</title>
      <link href="2015/09/12/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BThreadPoolExecutor/"/>
      <url>2015/09/12/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BThreadPoolExecutor/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class="line"><span class="comment"> * Expert Group and released to the public domain, as explained at</span></span><br><span class="line"><span class="comment"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *一个ExecutorService执行每个被提交入到线程池中的任务，通过Executors工厂方法进行配置。</span></span><br><span class="line"><span class="comment"> *线程池处理两种不同的问题：通过减少每个任务调用的开销、提供边界和资源管理，包括线程，</span></span><br><span class="line"><span class="comment"> *任务集合的执行，从而改进了执行大量异步任务时的性能问题。ThreadPoolExcecutor也维护着一</span></span><br><span class="line"><span class="comment"> *些统计数据，如已完成任务的数目。</span></span><br><span class="line"><span class="comment"> *面对一个提供了许多可调用参数和可扩展性的hooks.程序员通常比较喜欢用Executors的工厂方法。</span></span><br><span class="line"><span class="comment"> *如Executors.newCachedThreadPool(无限大小的线程池，自动线程回收)、Executors.newFixedThreadPool</span></span><br><span class="line"><span class="comment"> *(固定大小的线程池)、Executors.newSingleThreadExecutor(单个后台线程)，为最常用的场</span></span><br><span class="line"><span class="comment"> *景进行预配置。或者，使用这个类进行手动配置实现同样的效果的线程池，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 核心和最大的线程池</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ThreadPoolExecutor会根据线程池的大小配置corePoolSize和maximumPoolSize来自动调整池的大小，</span></span><br><span class="line"><span class="comment"> *可以通过getPoolSize查看池的大小。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When a new task is submitted in method &#123;<span class="doctag">@link</span> #execute(Runnable)&#125;,</span></span><br><span class="line"><span class="comment"> * and fewer than corePoolSize threads are running, a new thread is</span></span><br><span class="line"><span class="comment"> * created to handle the request, even if other worker threads are</span></span><br><span class="line"><span class="comment"> * idle.  If there are more than corePoolSize but less than</span></span><br><span class="line"><span class="comment"> * maximumPoolSize threads running, a new thread will be created only</span></span><br><span class="line"><span class="comment"> * if the queue is full.  By setting corePoolSize and maximumPoolSize</span></span><br><span class="line"><span class="comment"> * the same, you create a fixed-size thread pool. By setting</span></span><br><span class="line"><span class="comment"> * maximumPoolSize to an essentially unbounded value such as &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * Integer.MAX_VALUE&#125;, you allow the pool to accommodate an arbitrary</span></span><br><span class="line"><span class="comment"> * number of concurrent tasks. Most typically, core and maximum pool</span></span><br><span class="line"><span class="comment"> * sizes are set only upon construction, but they may also be changed</span></span><br><span class="line"><span class="comment"> * dynamically using &#123;<span class="doctag">@link</span> #setCorePoolSize&#125; and &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #setMaximumPoolSize&#125;. &lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;On-demand construction&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;By default, even core threads are initially created and</span></span><br><span class="line"><span class="comment"> * started only when new tasks arrive, but this can be overridden</span></span><br><span class="line"><span class="comment"> * dynamically using method &#123;<span class="doctag">@link</span> #prestartCoreThread&#125; or &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #prestartAllCoreThreads&#125;.  You probably want to prestart threads if</span></span><br><span class="line"><span class="comment"> * you construct the pool with a non-empty queue. &lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Creating new threads&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;New threads are created using a &#123;<span class="doctag">@link</span> ThreadFactory&#125;.  If not</span></span><br><span class="line"><span class="comment"> * otherwise specified, a &#123;<span class="doctag">@link</span> Executors#defaultThreadFactory&#125; is</span></span><br><span class="line"><span class="comment"> * used, that creates threads to all be in the same &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * ThreadGroup&#125; and with the same &#123;<span class="doctag">@code</span> NORM_PRIORITY&#125; priority and</span></span><br><span class="line"><span class="comment"> * non-daemon status. By supplying a different ThreadFactory, you can</span></span><br><span class="line"><span class="comment"> * alter the thread&#x27;s name, thread group, priority, daemon status,</span></span><br><span class="line"><span class="comment"> * etc. If a &#123;<span class="doctag">@code</span> ThreadFactory&#125; fails to create a thread when asked</span></span><br><span class="line"><span class="comment"> * by returning null from &#123;<span class="doctag">@code</span> newThread&#125;, the executor will</span></span><br><span class="line"><span class="comment"> * continue, but might not be able to execute any tasks. Threads</span></span><br><span class="line"><span class="comment"> * should possess the &quot;modifyThread&quot; &#123;<span class="doctag">@code</span> RuntimePermission&#125;. If</span></span><br><span class="line"><span class="comment"> * worker threads or other threads using the pool do not possess this</span></span><br><span class="line"><span class="comment"> * permission, service may be degraded: configuration changes may not</span></span><br><span class="line"><span class="comment"> * take effect in a timely manner, and a shutdown pool may remain in a</span></span><br><span class="line"><span class="comment"> * state in which termination is possible but not completed.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Keep-alive times&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;If the pool currently has more than corePoolSize threads,</span></span><br><span class="line"><span class="comment"> * excess threads will be terminated if they have been idle for more</span></span><br><span class="line"><span class="comment"> * than the keepAliveTime (see &#123;<span class="doctag">@link</span> #getKeepAliveTime(TimeUnit)&#125;).</span></span><br><span class="line"><span class="comment"> * This provides a means of reducing resource consumption when the</span></span><br><span class="line"><span class="comment"> * pool is not being actively used. If the pool becomes more active</span></span><br><span class="line"><span class="comment"> * later, new threads will be constructed. This parameter can also be</span></span><br><span class="line"><span class="comment"> * changed dynamically using method &#123;<span class="doctag">@link</span> #setKeepAliveTime(long,</span></span><br><span class="line"><span class="comment"> * TimeUnit)&#125;.  Using a value of &#123;<span class="doctag">@code</span> Long.MAX_VALUE&#125; &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * TimeUnit#NANOSECONDS&#125; effectively disables idle threads from ever</span></span><br><span class="line"><span class="comment"> * terminating prior to shut down. By default, the keep-alive policy</span></span><br><span class="line"><span class="comment"> * applies only when there are more than corePoolSize threads. But</span></span><br><span class="line"><span class="comment"> * method &#123;<span class="doctag">@link</span> #allowCoreThreadTimeOut(boolean)&#125; can be used to</span></span><br><span class="line"><span class="comment"> * apply this time-out policy to core threads as well, so long as the</span></span><br><span class="line"><span class="comment"> * keepAliveTime value is non-zero. &lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Queuing&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;Any &#123;<span class="doctag">@link</span> BlockingQueue&#125; may be used to transfer and hold</span></span><br><span class="line"><span class="comment"> * submitted tasks.  The use of this queue interacts with pool sizing:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; If fewer than corePoolSize threads are running, the Executor</span></span><br><span class="line"><span class="comment"> * always prefers adding a new thread</span></span><br><span class="line"><span class="comment"> * rather than queuing.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; If corePoolSize or more threads are running, the Executor</span></span><br><span class="line"><span class="comment"> * always prefers queuing a request rather than adding a new</span></span><br><span class="line"><span class="comment"> * thread.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; If a request cannot be queued, a new thread is created unless</span></span><br><span class="line"><span class="comment"> * this would exceed maximumPoolSize, in which case, the task will be</span></span><br><span class="line"><span class="comment"> * rejected.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There are three general strategies for queuing:</span></span><br><span class="line"><span class="comment"> * &lt;ol&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; &lt;em&gt; Direct handoffs.&lt;/em&gt; A good default choice for a work</span></span><br><span class="line"><span class="comment"> * queue is a &#123;<span class="doctag">@link</span> SynchronousQueue&#125; that hands off tasks to threads</span></span><br><span class="line"><span class="comment"> * without otherwise holding them. Here, an attempt to queue a task</span></span><br><span class="line"><span class="comment"> * will fail if no threads are immediately available to run it, so a</span></span><br><span class="line"><span class="comment"> * new thread will be constructed. This policy avoids lockups when</span></span><br><span class="line"><span class="comment"> * handling sets of requests that might have internal dependencies.</span></span><br><span class="line"><span class="comment"> * Direct handoffs generally require unbounded maximumPoolSizes to</span></span><br><span class="line"><span class="comment"> * avoid rejection of new submitted tasks. This in turn admits the</span></span><br><span class="line"><span class="comment"> * possibility of unbounded thread growth when commands continue to</span></span><br><span class="line"><span class="comment"> * arrive on average faster than they can be processed.  &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&lt;em&gt; Unbounded queues.&lt;/em&gt; Using an unbounded queue (for</span></span><br><span class="line"><span class="comment"> * example a &#123;<span class="doctag">@link</span> LinkedBlockingQueue&#125; without a predefined</span></span><br><span class="line"><span class="comment"> * capacity) will cause new tasks to wait in the queue when all</span></span><br><span class="line"><span class="comment"> * corePoolSize threads are busy. Thus, no more than corePoolSize</span></span><br><span class="line"><span class="comment"> * threads will ever be created. (And the value of the maximumPoolSize</span></span><br><span class="line"><span class="comment"> * therefore doesn&#x27;t have any effect.)  This may be appropriate when</span></span><br><span class="line"><span class="comment"> * each task is completely independent of others, so tasks cannot</span></span><br><span class="line"><span class="comment"> * affect each others execution; for example, in a web page server.</span></span><br><span class="line"><span class="comment"> * While this style of queuing can be useful in smoothing out</span></span><br><span class="line"><span class="comment"> * transient bursts of requests, it admits the possibility of</span></span><br><span class="line"><span class="comment"> * unbounded work queue growth when commands continue to arrive on</span></span><br><span class="line"><span class="comment"> * average faster than they can be processed.  &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&lt;em&gt;Bounded queues.&lt;/em&gt; A bounded queue (for example, an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ArrayBlockingQueue&#125;) helps prevent resource exhaustion when</span></span><br><span class="line"><span class="comment"> * used with finite maximumPoolSizes, but can be more difficult to</span></span><br><span class="line"><span class="comment"> * tune and control.  Queue sizes and maximum pool sizes may be traded</span></span><br><span class="line"><span class="comment"> * off for each other: Using large queues and small pools minimizes</span></span><br><span class="line"><span class="comment"> * CPU usage, OS resources, and context-switching overhead, but can</span></span><br><span class="line"><span class="comment"> * lead to artificially low throughput.  If tasks frequently block (for</span></span><br><span class="line"><span class="comment"> * example if they are I/O bound), a system may be able to schedule</span></span><br><span class="line"><span class="comment"> * time for more threads than you otherwise allow. Use of small queues</span></span><br><span class="line"><span class="comment"> * generally requires larger pool sizes, which keeps CPUs busier but</span></span><br><span class="line"><span class="comment"> * may encounter unacceptable scheduling overhead, which also</span></span><br><span class="line"><span class="comment"> * decreases throughput.  &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Rejected tasks&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;New tasks submitted in method &#123;<span class="doctag">@link</span> #execute(Runnable)&#125; will be</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;rejected&lt;/em&gt; when the Executor has been shut down, and also when</span></span><br><span class="line"><span class="comment"> * the Executor uses finite bounds for both maximum threads and work queue</span></span><br><span class="line"><span class="comment"> * capacity, and is saturated.  In either case, the &#123;<span class="doctag">@code</span> execute&#125; method</span></span><br><span class="line"><span class="comment"> * invokes the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * RejectedExecutionHandler#rejectedExecution(Runnable, ThreadPoolExecutor)&#125;</span></span><br><span class="line"><span class="comment"> * method of its &#123;<span class="doctag">@link</span> RejectedExecutionHandler&#125;.  Four predefined handler</span></span><br><span class="line"><span class="comment"> * policies are provided:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ol&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; In the default &#123;<span class="doctag">@link</span> ThreadPoolExecutor.AbortPolicy&#125;, the</span></span><br><span class="line"><span class="comment"> * handler throws a runtime &#123;<span class="doctag">@link</span> RejectedExecutionException&#125; upon</span></span><br><span class="line"><span class="comment"> * rejection. &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; In &#123;<span class="doctag">@link</span> ThreadPoolExecutor.CallerRunsPolicy&#125;, the thread</span></span><br><span class="line"><span class="comment"> * that invokes &#123;<span class="doctag">@code</span> execute&#125; itself runs the task. This provides a</span></span><br><span class="line"><span class="comment"> * simple feedback control mechanism that will slow down the rate that</span></span><br><span class="line"><span class="comment"> * new tasks are submitted. &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; In &#123;<span class="doctag">@link</span> ThreadPoolExecutor.DiscardPolicy&#125;, a task that</span></span><br><span class="line"><span class="comment"> * cannot be executed is simply dropped.  &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;In &#123;<span class="doctag">@link</span> ThreadPoolExecutor.DiscardOldestPolicy&#125;, if the</span></span><br><span class="line"><span class="comment"> * executor is not shut down, the task at the head of the work queue</span></span><br><span class="line"><span class="comment"> * is dropped, and then execution is retried (which can fail again,</span></span><br><span class="line"><span class="comment"> * causing this to be repeated.) &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * It is possible to define and use other kinds of &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * RejectedExecutionHandler&#125; classes. Doing so requires some care</span></span><br><span class="line"><span class="comment"> * especially when policies are designed to work only under particular</span></span><br><span class="line"><span class="comment"> * capacity or queuing policies. &lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Hook methods&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;This class provides &#123;<span class="doctag">@code</span> protected&#125; overridable</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #beforeExecute(Thread, Runnable)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #afterExecute(Runnable, Throwable)&#125; methods that are called</span></span><br><span class="line"><span class="comment"> * before and after execution of each task.  These can be used to</span></span><br><span class="line"><span class="comment"> * manipulate the execution environment; for example, reinitializing</span></span><br><span class="line"><span class="comment"> * ThreadLocals, gathering statistics, or adding log entries.</span></span><br><span class="line"><span class="comment"> * Additionally, method &#123;<span class="doctag">@link</span> #terminated&#125; can be overridden to perform</span></span><br><span class="line"><span class="comment"> * any special processing that needs to be done once the Executor has</span></span><br><span class="line"><span class="comment"> * fully terminated.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If hook or callback methods throw exceptions, internal worker</span></span><br><span class="line"><span class="comment"> * threads may in turn fail and abruptly terminate.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Queue maintenance&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;Method &#123;<span class="doctag">@link</span> #getQueue()&#125; allows access to the work queue</span></span><br><span class="line"><span class="comment"> * for purposes of monitoring and debugging.  Use of this method for</span></span><br><span class="line"><span class="comment"> * any other purpose is strongly discouraged.  Two supplied methods,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #remove(Runnable)&#125; and &#123;<span class="doctag">@link</span> #purge&#125; are available to</span></span><br><span class="line"><span class="comment"> * assist in storage reclamation when large numbers of queued tasks</span></span><br><span class="line"><span class="comment"> * become cancelled.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;Finalization&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;A pool that is no longer referenced in a program &lt;em&gt;AND&lt;/em&gt;</span></span><br><span class="line"><span class="comment"> * has no remaining threads will be &#123;<span class="doctag">@code</span> shutdown&#125; automatically. If</span></span><br><span class="line"><span class="comment"> * you would like to ensure that unreferenced pools are reclaimed even</span></span><br><span class="line"><span class="comment"> * if users forget to call &#123;<span class="doctag">@link</span> #shutdown&#125;, then you must arrange</span></span><br><span class="line"><span class="comment"> * that unused threads eventually die, by setting appropriate</span></span><br><span class="line"><span class="comment"> * keep-alive times, using a lower bound of zero core threads and/or</span></span><br><span class="line"><span class="comment"> * setting &#123;<span class="doctag">@link</span> #allowCoreThreadTimeOut(boolean)&#125;.  &lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/dl&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Extension example&lt;/b&gt;. Most extensions of this class</span></span><br><span class="line"><span class="comment"> * override one or more of the protected hook methods. For example,</span></span><br><span class="line"><span class="comment"> * here is a subclass that adds a simple pause/resume feature:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * class PausableThreadPoolExecutor extends ThreadPoolExecutor &#123;</span></span><br><span class="line"><span class="comment"> *   private boolean isPaused;</span></span><br><span class="line"><span class="comment"> *   private ReentrantLock pauseLock = new ReentrantLock();</span></span><br><span class="line"><span class="comment"> *   private Condition unpaused = pauseLock.newCondition();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public PausableThreadPoolExecutor(...) &#123; super(...); &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   protected void beforeExecute(Thread t, Runnable r) &#123;</span></span><br><span class="line"><span class="comment"> *     super.beforeExecute(t, r);</span></span><br><span class="line"><span class="comment"> *     pauseLock.lock();</span></span><br><span class="line"><span class="comment"> *     try &#123;</span></span><br><span class="line"><span class="comment"> *       while (isPaused) unpaused.await();</span></span><br><span class="line"><span class="comment"> *     &#125; catch (InterruptedException ie) &#123;</span></span><br><span class="line"><span class="comment"> *       t.interrupt();</span></span><br><span class="line"><span class="comment"> *     &#125; finally &#123;</span></span><br><span class="line"><span class="comment"> *       pauseLock.unlock();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public void pause() &#123;</span></span><br><span class="line"><span class="comment"> *     pauseLock.lock();</span></span><br><span class="line"><span class="comment"> *     try &#123;</span></span><br><span class="line"><span class="comment"> *       isPaused = true;</span></span><br><span class="line"><span class="comment"> *     &#125; finally &#123;</span></span><br><span class="line"><span class="comment"> *       pauseLock.unlock();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public void resume() &#123;</span></span><br><span class="line"><span class="comment"> *     pauseLock.lock();</span></span><br><span class="line"><span class="comment"> *     try &#123;</span></span><br><span class="line"><span class="comment"> *       isPaused = false;</span></span><br><span class="line"><span class="comment"> *       unpaused.signalAll();</span></span><br><span class="line"><span class="comment"> *     &#125; finally &#123;</span></span><br><span class="line"><span class="comment"> *       pauseLock.unlock();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The main pool control state, ctl, is an atomic integer packing</span></span><br><span class="line"><span class="comment">     * two conceptual fields</span></span><br><span class="line"><span class="comment">     *   workerCount, indicating the effective number of threads</span></span><br><span class="line"><span class="comment">     *   runState,    indicating whether running, shutting down etc</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * In order to pack them into one int, we limit workerCount to</span></span><br><span class="line"><span class="comment">     * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2</span></span><br><span class="line"><span class="comment">     * billion) otherwise representable. If this is ever an issue in</span></span><br><span class="line"><span class="comment">     * the future, the variable can be changed to be an AtomicLong,</span></span><br><span class="line"><span class="comment">     * and the shift/mask constants below adjusted. But until the need</span></span><br><span class="line"><span class="comment">     * arises, this code is a bit faster and simpler using an int.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The workerCount is the number of workers that have been</span></span><br><span class="line"><span class="comment">     * permitted to start and not permitted to stop.  The value may be</span></span><br><span class="line"><span class="comment">     * transiently different from the actual number of live threads,</span></span><br><span class="line"><span class="comment">     * for example when a ThreadFactory fails to create a thread when</span></span><br><span class="line"><span class="comment">     * asked, and when exiting threads are still performing</span></span><br><span class="line"><span class="comment">     * bookkeeping before terminating. The user-visible pool size is</span></span><br><span class="line"><span class="comment">     * reported as the current size of the workers set.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The runState provides the main lifecycle control, taking on values:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   RUNNING:  Accept new tasks and process queued tasks</span></span><br><span class="line"><span class="comment">     *   SHUTDOWN: Don&#x27;t accept new tasks, but process queued tasks</span></span><br><span class="line"><span class="comment">     *   STOP:     Don&#x27;t accept new tasks, don&#x27;t process queued tasks,</span></span><br><span class="line"><span class="comment">     *             and interrupt in-progress tasks</span></span><br><span class="line"><span class="comment">     *   TIDYING:  All tasks have terminated, workerCount is zero,</span></span><br><span class="line"><span class="comment">     *             the thread transitioning to state TIDYING</span></span><br><span class="line"><span class="comment">     *             will run the terminated() hook method</span></span><br><span class="line"><span class="comment">     *   TERMINATED: terminated() has completed</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The numerical order among these values matters, to allow</span></span><br><span class="line"><span class="comment">     * ordered comparisons. The runState monotonically increases over</span></span><br><span class="line"><span class="comment">     * time, but need not hit each state. The transitions are:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * RUNNING -&gt; SHUTDOWN</span></span><br><span class="line"><span class="comment">     *    On invocation of shutdown(), perhaps implicitly in finalize()</span></span><br><span class="line"><span class="comment">     * (RUNNING or SHUTDOWN) -&gt; STOP</span></span><br><span class="line"><span class="comment">     *    On invocation of shutdownNow()</span></span><br><span class="line"><span class="comment">     * SHUTDOWN -&gt; TIDYING</span></span><br><span class="line"><span class="comment">     *    When both queue and pool are empty</span></span><br><span class="line"><span class="comment">     * STOP -&gt; TIDYING</span></span><br><span class="line"><span class="comment">     *    When pool is empty</span></span><br><span class="line"><span class="comment">     * TIDYING -&gt; TERMINATED</span></span><br><span class="line"><span class="comment">     *    When the terminated() hook method has completed</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Threads waiting in awaitTermination() will return when the</span></span><br><span class="line"><span class="comment">     * state reaches TERMINATED.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Detecting the transition from SHUTDOWN to TIDYING is less</span></span><br><span class="line"><span class="comment">     * straightforward than you&#x27;d like because the queue may become</span></span><br><span class="line"><span class="comment">     * empty after non-empty and vice versa during SHUTDOWN state, but</span></span><br><span class="line"><span class="comment">     * we can only terminate if, after seeing that it is empty, we see</span></span><br><span class="line"><span class="comment">     * that workerCount is 0 (which sometimes entails a recheck -- see</span></span><br><span class="line"><span class="comment">     * below).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Packing and unpacking ctl</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Bit field accessors that don&#x27;t require unpacking ctl.</span></span><br><span class="line"><span class="comment">     * These depend on the bit layout and on workerCount being never negative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">runStateLessThan</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &lt; s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">runStateAtLeast</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt;= s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &lt; SHUTDOWN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to CAS-increment the workerCount field of ctl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndIncrementWorkerCount</span><span class="params">(<span class="keyword">int</span> expect)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctl.compareAndSet(expect, expect + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to CAS-decrement the workerCount field of ctl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndDecrementWorkerCount</span><span class="params">(<span class="keyword">int</span> expect)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctl.compareAndSet(expect, expect - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decrements the workerCount field of ctl. This is called only on</span></span><br><span class="line"><span class="comment">     * abrupt termination of a thread (see processWorkerExit). Other</span></span><br><span class="line"><span class="comment">     * decrements are performed within getTask.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decrementWorkerCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (! compareAndDecrementWorkerCount(ctl.get()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The queue used for holding tasks and handing off to worker</span></span><br><span class="line"><span class="comment">     * threads.  We do not require that workQueue.poll() returning</span></span><br><span class="line"><span class="comment">     * null necessarily means that workQueue.isEmpty(), so rely</span></span><br><span class="line"><span class="comment">     * solely on isEmpty to see if the queue is empty (which we must</span></span><br><span class="line"><span class="comment">     * do for example when deciding whether to transition from</span></span><br><span class="line"><span class="comment">     * SHUTDOWN to TIDYING).  This accommodates special-purpose</span></span><br><span class="line"><span class="comment">     * queues such as DelayQueues for which poll() is allowed to</span></span><br><span class="line"><span class="comment">     * return null even if it may later return non-null when delays</span></span><br><span class="line"><span class="comment">     * expire.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Lock held on access to workers set and related bookkeeping.</span></span><br><span class="line"><span class="comment">     * While we could use a concurrent set of some sort, it turns out</span></span><br><span class="line"><span class="comment">     * to be generally preferable to use a lock. Among the reasons is</span></span><br><span class="line"><span class="comment">     * that this serializes interruptIdleWorkers, which avoids</span></span><br><span class="line"><span class="comment">     * unnecessary interrupt storms, especially during shutdown.</span></span><br><span class="line"><span class="comment">     * Otherwise exiting threads would concurrently interrupt those</span></span><br><span class="line"><span class="comment">     * that have not yet interrupted. It also simplifies some of the</span></span><br><span class="line"><span class="comment">     * associated statistics bookkeeping of largestPoolSize etc. We</span></span><br><span class="line"><span class="comment">     * also hold mainLock on shutdown and shutdownNow, for the sake of</span></span><br><span class="line"><span class="comment">     * ensuring workers set is stable while separately checking</span></span><br><span class="line"><span class="comment">     * permission to interrupt and actually interrupting.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set containing all worker threads in pool. Accessed only when</span></span><br><span class="line"><span class="comment">     * holding mainLock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Wait condition to support awaitTermination</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tracks largest attained pool size. Accessed only under</span></span><br><span class="line"><span class="comment">     * mainLock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Counter for completed tasks. Updated only on termination of</span></span><br><span class="line"><span class="comment">     * worker threads. Accessed only under mainLock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * All user control parameters are declared as volatiles so that</span></span><br><span class="line"><span class="comment">     * ongoing actions are based on freshest values, but without need</span></span><br><span class="line"><span class="comment">     * for locking, since no internal invariants depend on them</span></span><br><span class="line"><span class="comment">     * changing synchronously with respect to other actions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory for new threads. All threads are created using this</span></span><br><span class="line"><span class="comment">     * factory (via method addWorker).  All callers must be prepared</span></span><br><span class="line"><span class="comment">     * for addWorker to fail, which may reflect a system or user&#x27;s</span></span><br><span class="line"><span class="comment">     * policy limiting the number of threads.  Even though it is not</span></span><br><span class="line"><span class="comment">     * treated as an error, failure to create threads may result in</span></span><br><span class="line"><span class="comment">     * new tasks being rejected or existing ones remaining stuck in</span></span><br><span class="line"><span class="comment">     * the queue.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * We go further and preserve pool invariants even in the face of</span></span><br><span class="line"><span class="comment">     * errors such as OutOfMemoryError, that might be thrown while</span></span><br><span class="line"><span class="comment">     * trying to create threads.  Such errors are rather common due to</span></span><br><span class="line"><span class="comment">     * the need to allocate a native stack in Thread.start, and users</span></span><br><span class="line"><span class="comment">     * will want to perform clean pool shutdown to clean up.  There</span></span><br><span class="line"><span class="comment">     * will likely be enough memory available for the cleanup code to</span></span><br><span class="line"><span class="comment">     * complete without encountering yet another OutOfMemoryError.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handler called when saturated or shutdown in execute.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Timeout in nanoseconds for idle threads waiting for work.</span></span><br><span class="line"><span class="comment">     * Threads use this timeout when there are more than corePoolSize</span></span><br><span class="line"><span class="comment">     * present or if allowCoreThreadTimeOut. Otherwise they wait</span></span><br><span class="line"><span class="comment">     * forever for new work.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> keepAliveTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If false (default), core threads stay alive even when idle.</span></span><br><span class="line"><span class="comment">     * If true, core threads use keepAliveTime to time out waiting</span></span><br><span class="line"><span class="comment">     * for work.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Core pool size is the minimum number of workers to keep alive</span></span><br><span class="line"><span class="comment">     * (and not allow to time out etc) unless allowCoreThreadTimeOut</span></span><br><span class="line"><span class="comment">     * is set, in which case the minimum is zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maximum pool size. Note that the actual maximum is internally</span></span><br><span class="line"><span class="comment">     * bounded by CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> maximumPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default rejected execution handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RejectedExecutionHandler defaultHandler =</span><br><span class="line">        <span class="keyword">new</span> AbortPolicy();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Permission required for callers of shutdown and shutdownNow.</span></span><br><span class="line"><span class="comment">     * We additionally require (see checkShutdownAccess) that callers</span></span><br><span class="line"><span class="comment">     * have permission to actually interrupt threads in the worker set</span></span><br><span class="line"><span class="comment">     * (as governed by Thread.interrupt, which relies on</span></span><br><span class="line"><span class="comment">     * ThreadGroup.checkAccess, which in turn relies on</span></span><br><span class="line"><span class="comment">     * SecurityManager.checkAccess). Shutdowns are attempted only if</span></span><br><span class="line"><span class="comment">     * these checks pass.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * All actual invocations of Thread.interrupt (see</span></span><br><span class="line"><span class="comment">     * interruptIdleWorkers and interruptWorkers) ignore</span></span><br><span class="line"><span class="comment">     * SecurityExceptions, meaning that the attempted interrupts</span></span><br><span class="line"><span class="comment">     * silently fail. In the case of shutdown, they should not fail</span></span><br><span class="line"><span class="comment">     * unless the SecurityManager has inconsistent policies, sometimes</span></span><br><span class="line"><span class="comment">     * allowing access to a thread and sometimes not. In such cases,</span></span><br><span class="line"><span class="comment">     * failure to actually interrupt threads may disable or delay full</span></span><br><span class="line"><span class="comment">     * termination. Other uses of interruptIdleWorkers are advisory,</span></span><br><span class="line"><span class="comment">     * and failure to actually interrupt will merely delay response to</span></span><br><span class="line"><span class="comment">     * configuration changes so is not handled exceptionally.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RuntimePermission shutdownPerm =</span><br><span class="line">        <span class="keyword">new</span> RuntimePermission(<span class="string">&quot;modifyThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class Worker mainly maintains interrupt control state for</span></span><br><span class="line"><span class="comment">     * threads running tasks, along with other minor bookkeeping.</span></span><br><span class="line"><span class="comment">     * This class opportunistically extends AbstractQueuedSynchronizer</span></span><br><span class="line"><span class="comment">     * to simplify acquiring and releasing a lock surrounding each</span></span><br><span class="line"><span class="comment">     * task execution.  This protects against interrupts that are</span></span><br><span class="line"><span class="comment">     * intended to wake up a worker thread waiting for a task from</span></span><br><span class="line"><span class="comment">     * instead interrupting a task being run.  We implement a simple</span></span><br><span class="line"><span class="comment">     * non-reentrant mutual exclusion lock rather than use</span></span><br><span class="line"><span class="comment">     * ReentrantLock because we do not want worker tasks to be able to</span></span><br><span class="line"><span class="comment">     * reacquire the lock when they invoke pool control methods like</span></span><br><span class="line"><span class="comment">     * setCorePoolSize.  Additionally, to suppress interrupts until</span></span><br><span class="line"><span class="comment">     * the thread actually starts running tasks, we initialize lock</span></span><br><span class="line"><span class="comment">     * state to a negative value, and clear it upon start (in</span></span><br><span class="line"><span class="comment">     * runWorker).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This class will never be serialized, but we provide a</span></span><br><span class="line"><span class="comment">         * serialVersionUID to suppress a javac warning.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6138294804551838833L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">        <span class="keyword">final</span> Thread thread;</span><br><span class="line">        <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">        Runnable firstTask;</span><br><span class="line">        <span class="comment">/** Per-thread task counter */</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates with given first task and thread from ThreadFactory.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> firstTask the first task (null if none)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Worker(Runnable firstTask) &#123;</span><br><span class="line">            setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">            <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">            <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            runWorker(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lock methods</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// The value 0 represents the unlocked state.</span></span><br><span class="line">        <span class="comment">// The value 1 represents the locked state.</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>        </span>&#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> tryAcquire(<span class="number">1</span>); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>      </span>&#123; release(<span class="number">1</span>); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> isHeldExclusively(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Thread t;</span><br><span class="line">            <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t.interrupt();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Methods for setting control state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transitions runState to given target, or leaves it alone if</span></span><br><span class="line"><span class="comment">     * already at least the given target.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetState the desired state, either SHUTDOWN or STOP</span></span><br><span class="line"><span class="comment">     *        (but not TIDYING or TERMINATED -- use tryTerminate for that)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">advanceRunState</span><span class="params">(<span class="keyword">int</span> targetState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (runStateAtLeast(c, targetState) ||</span><br><span class="line">                ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c))))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transitions to TERMINATED state if either (SHUTDOWN and pool</span></span><br><span class="line"><span class="comment">     * and queue empty) or (STOP and pool empty).  If otherwise</span></span><br><span class="line"><span class="comment">     * eligible to terminate but workerCount is nonzero, interrupts an</span></span><br><span class="line"><span class="comment">     * idle worker to ensure that shutdown signals propagate. This</span></span><br><span class="line"><span class="comment">     * method must be called following any action that might make</span></span><br><span class="line"><span class="comment">     * termination possible -- reducing worker count or removing tasks</span></span><br><span class="line"><span class="comment">     * from the queue during shutdown. The method is non-private to</span></span><br><span class="line"><span class="comment">     * allow access from ScheduledThreadPoolExecutor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">                runStateAtLeast(c, TIDYING) ||</span><br><span class="line">                (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// Eligible to terminate</span></span><br><span class="line">                interruptIdleWorkers(ONLY_ONE);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        terminated();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</span><br><span class="line">                        termination.signalAll();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else retry on failed CAS</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Methods for controlling interrupts to worker threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If there is a security manager, makes sure caller has</span></span><br><span class="line"><span class="comment">     * permission to shut down threads in general (see shutdownPerm).</span></span><br><span class="line"><span class="comment">     * If this passes, additionally makes sure the caller is allowed</span></span><br><span class="line"><span class="comment">     * to interrupt each worker thread. This might not be true even if</span></span><br><span class="line"><span class="comment">     * first check passed, if the SecurityManager treats some threads</span></span><br><span class="line"><span class="comment">     * specially.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkShutdownAccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecurityManager security = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            security.checkPermission(shutdownPerm);</span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">                    security.checkAccess(w.thread);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Interrupts all threads, even if active. Ignores SecurityExceptions</span></span><br><span class="line"><span class="comment">     * (in which case some threads may remain uninterrupted).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptWorkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">                w.interruptIfStarted();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Interrupts threads that might be waiting for tasks (as</span></span><br><span class="line"><span class="comment">     * indicated by not being locked) so they can check for</span></span><br><span class="line"><span class="comment">     * termination or configuration changes. Ignores</span></span><br><span class="line"><span class="comment">     * SecurityExceptions (in which case some threads may remain</span></span><br><span class="line"><span class="comment">     * uninterrupted).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyOne If true, interrupt at most one worker. This is</span></span><br><span class="line"><span class="comment">     * called only from tryTerminate when termination is otherwise</span></span><br><span class="line"><span class="comment">     * enabled but there are still other workers.  In this case, at</span></span><br><span class="line"><span class="comment">     * most one waiting worker is interrupted to propagate shutdown</span></span><br><span class="line"><span class="comment">     * signals in case all threads are currently waiting.</span></span><br><span class="line"><span class="comment">     * Interrupting any arbitrary thread ensures that newly arriving</span></span><br><span class="line"><span class="comment">     * workers since shutdown began will also eventually exit.</span></span><br><span class="line"><span class="comment">     * To guarantee eventual termination, it suffices to always</span></span><br><span class="line"><span class="comment">     * interrupt only one idle worker, but shutdown() interrupts all</span></span><br><span class="line"><span class="comment">     * idle workers so that redundant workers exit promptly, not</span></span><br><span class="line"><span class="comment">     * waiting for a straggler task to finish.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptIdleWorkers</span><span class="params">(<span class="keyword">boolean</span> onlyOne)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Worker w : workers) &#123;</span><br><span class="line">                Thread t = w.thread;</span><br><span class="line">                <span class="keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        t.interrupt();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        w.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (onlyOne)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Common form of interruptIdleWorkers, to avoid having to</span></span><br><span class="line"><span class="comment">     * remember what the boolean argument means.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptIdleWorkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        interruptIdleWorkers(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ONLY_ONE = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Misc utilities, most of which are also exported to</span></span><br><span class="line"><span class="comment">     * ScheduledThreadPoolExecutor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invokes the rejected execution handler for the given command.</span></span><br><span class="line"><span class="comment">     * Package-protected for use by ScheduledThreadPoolExecutor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">reject</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        handler.rejectedExecution(command, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs any further cleanup following run state transition on</span></span><br><span class="line"><span class="comment">     * invocation of shutdown.  A no-op here, but used by</span></span><br><span class="line"><span class="comment">     * ScheduledThreadPoolExecutor to cancel delayed tasks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onShutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * State check needed by ScheduledThreadPoolExecutor to</span></span><br><span class="line"><span class="comment">     * enable running tasks during shutdown.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shutdownOK true if should return true if SHUTDOWN</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isRunningOrShutdown</span><span class="params">(<span class="keyword">boolean</span> shutdownOK)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line">        <span class="keyword">return</span> rs == RUNNING || (rs == SHUTDOWN &amp;&amp; shutdownOK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Drains the task queue into a new list, normally using</span></span><br><span class="line"><span class="comment">     * drainTo. But if the queue is a DelayQueue or any other kind of</span></span><br><span class="line"><span class="comment">     * queue for which poll or drainTo may fail to remove some</span></span><br><span class="line"><span class="comment">     * elements, it deletes them one by one.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Runnable&gt; <span class="title">drainQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; q = workQueue;</span><br><span class="line">        ArrayList&lt;Runnable&gt; taskList = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</span><br><span class="line">        q.drainTo(taskList);</span><br><span class="line">        <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Runnable r : q.toArray(<span class="keyword">new</span> Runnable[<span class="number">0</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (q.remove(r))</span><br><span class="line">                    taskList.add(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> taskList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Methods for creating, running and cleaning up after workers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Checks if a new worker can be added with respect to current</span></span><br><span class="line"><span class="comment">     * pool state and the given bound (either core or maximum). If so,</span></span><br><span class="line"><span class="comment">     * the worker count is adjusted accordingly, and, if possible, a</span></span><br><span class="line"><span class="comment">     * new worker is created and started, running firstTask as its</span></span><br><span class="line"><span class="comment">     * first task. This method returns false if the pool is stopped or</span></span><br><span class="line"><span class="comment">     * eligible to shut down. It also returns false if the thread</span></span><br><span class="line"><span class="comment">     * factory fails to create a thread when asked.  If the thread</span></span><br><span class="line"><span class="comment">     * creation fails, either due to the thread factory returning</span></span><br><span class="line"><span class="comment">     * null, or due to an exception (typically OutOfMemoryError in</span></span><br><span class="line"><span class="comment">     * Thread.start()), we roll back cleanly.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstTask the task the new thread should run first (or</span></span><br><span class="line"><span class="comment">     * null if none). Workers are created with an initial first task</span></span><br><span class="line"><span class="comment">     * (in method execute()) to bypass queuing when there are fewer</span></span><br><span class="line"><span class="comment">     * than corePoolSize threads (in which case we always start one),</span></span><br><span class="line"><span class="comment">     * or when the queue is full (in which case we must bypass queue).</span></span><br><span class="line"><span class="comment">     * Initially idle threads are usually created via</span></span><br><span class="line"><span class="comment">     * prestartCoreThread or to replace other dying workers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> core if true use corePoolSize as bound, else</span></span><br><span class="line"><span class="comment">     * maximumPoolSize. (A boolean indicator is used here rather than a</span></span><br><span class="line"><span class="comment">     * value to ensure reads of fresh values after checking other pool</span></span><br><span class="line"><span class="comment">     * state).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if successful</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">        retry:</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">                ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                   firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                   ! workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                    wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                    <span class="keyword">break</span> retry;</span><br><span class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                    <span class="keyword">continue</span> retry;</span><br><span class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                    t.start();</span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Rolls back the worker thread creation.</span></span><br><span class="line"><span class="comment">     * - removes worker from workers, if present</span></span><br><span class="line"><span class="comment">     * - decrements worker count</span></span><br><span class="line"><span class="comment">     * - rechecks for termination, in case the existence of this</span></span><br><span class="line"><span class="comment">     *   worker was holding up termination</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addWorkerFailed</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (w != <span class="keyword">null</span>)</span><br><span class="line">                workers.remove(w);</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            tryTerminate();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs cleanup and bookkeeping for a dying worker. Called</span></span><br><span class="line"><span class="comment">     * only from worker threads. Unless completedAbruptly is set,</span></span><br><span class="line"><span class="comment">     * assumes that workerCount has already been adjusted to account</span></span><br><span class="line"><span class="comment">     * for exit.  This method removes thread from worker set, and</span></span><br><span class="line"><span class="comment">     * possibly terminates the pool or replaces the worker if either</span></span><br><span class="line"><span class="comment">     * it exited due to user task exception or if fewer than</span></span><br><span class="line"><span class="comment">     * corePoolSize workers are running or queue is non-empty but</span></span><br><span class="line"><span class="comment">     * there are no workers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w the worker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> completedAbruptly if the worker died due to user exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (completedAbruptly) <span class="comment">// If abrupt, then workerCount wasn&#x27;t adjusted</span></span><br><span class="line">            decrementWorkerCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            completedTaskCount += w.completedTasks;</span><br><span class="line">            workers.remove(w);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tryTerminate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!completedAbruptly) &#123;</span><br><span class="line">                <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</span><br><span class="line">                <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty())</span><br><span class="line">                    min = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (workerCountOf(c) &gt;= min)</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs blocking or timed wait for a task, depending on</span></span><br><span class="line"><span class="comment">     * current configuration settings, or returns null if this worker</span></span><br><span class="line"><span class="comment">     * must exit because of any of:</span></span><br><span class="line"><span class="comment">     * 1. There are more than maximumPoolSize workers (due to</span></span><br><span class="line"><span class="comment">     *    a call to setMaximumPoolSize).</span></span><br><span class="line"><span class="comment">     * 2. The pool is stopped.</span></span><br><span class="line"><span class="comment">     * 3. The pool is shutdown and the queue is empty.</span></span><br><span class="line"><span class="comment">     * 4. This worker timed out waiting for a task, and timed-out</span></span><br><span class="line"><span class="comment">     *    workers are subject to termination (that is,</span></span><br><span class="line"><span class="comment">     *    &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut || workerCount &gt; corePoolSize&#125;)</span></span><br><span class="line"><span class="comment">     *    both before and after the timed wait, and if the queue is</span></span><br><span class="line"><span class="comment">     *    non-empty, this worker is not the last thread in the pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> task, or null if the worker must exit, in which case</span></span><br><span class="line"><span class="comment">     *         workerCount is decremented</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">                decrementWorkerCount();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">            <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">                &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runnable r = timed ?</span><br><span class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                    workQueue.take();</span><br><span class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                timedOut = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">                timedOut = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Main worker run loop.  Repeatedly gets tasks from queue and</span></span><br><span class="line"><span class="comment">     * executes them, while coping with a number of issues:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. We may start out with an initial task, in which case we</span></span><br><span class="line"><span class="comment">     * don&#x27;t need to get the first one. Otherwise, as long as pool is</span></span><br><span class="line"><span class="comment">     * running, we get tasks from getTask. If it returns null then the</span></span><br><span class="line"><span class="comment">     * worker exits due to changed pool state or configuration</span></span><br><span class="line"><span class="comment">     * parameters.  Other exits result from exception throws in</span></span><br><span class="line"><span class="comment">     * external code, in which case completedAbruptly holds, which</span></span><br><span class="line"><span class="comment">     * usually leads processWorkerExit to replace this thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. Before running any task, the lock is acquired to prevent</span></span><br><span class="line"><span class="comment">     * other pool interrupts while the task is executing, and then we</span></span><br><span class="line"><span class="comment">     * ensure that unless pool is stopping, this thread does not have</span></span><br><span class="line"><span class="comment">     * its interrupt set.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. Each task run is preceded by a call to beforeExecute, which</span></span><br><span class="line"><span class="comment">     * might throw an exception, in which case we cause thread to die</span></span><br><span class="line"><span class="comment">     * (breaking loop with completedAbruptly true) without processing</span></span><br><span class="line"><span class="comment">     * the task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4. Assuming beforeExecute completes normally, we run the task,</span></span><br><span class="line"><span class="comment">     * gathering any of its thrown exceptions to send to afterExecute.</span></span><br><span class="line"><span class="comment">     * We separately handle RuntimeException, Error (both of which the</span></span><br><span class="line"><span class="comment">     * specs guarantee that we trap) and arbitrary Throwables.</span></span><br><span class="line"><span class="comment">     * Because we cannot rethrow Throwables within Runnable.run, we</span></span><br><span class="line"><span class="comment">     * wrap them within Errors on the way out (to the thread&#x27;s</span></span><br><span class="line"><span class="comment">     * UncaughtExceptionHandler).  Any thrown exception also</span></span><br><span class="line"><span class="comment">     * conservatively causes thread to die.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5. After task.run completes, we call afterExecute, which may</span></span><br><span class="line"><span class="comment">     * also throw an exception, which will also cause thread to</span></span><br><span class="line"><span class="comment">     * die. According to JLS Sec 14.20, this exception is the one that</span></span><br><span class="line"><span class="comment">     * will be in effect even if task.run throws.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The net effect of the exception mechanics is that afterExecute</span></span><br><span class="line"><span class="comment">     * and the thread&#x27;s UncaughtExceptionHandler have as accurate</span></span><br><span class="line"><span class="comment">     * information as we can provide about any problems encountered by</span></span><br><span class="line"><span class="comment">     * user code.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w the worker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        Thread wt = Thread.currentThread();</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">                <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">                <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">                <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Public constructors and methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">     * parameters and default thread factory and rejected execution handler.</span></span><br><span class="line"><span class="comment">     * It may be more convenient to use one of the &#123;<span class="doctag">@link</span> Executors&#125; factory</span></span><br><span class="line"><span class="comment">     * methods instead of this general purpose constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">     *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">     *        pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">     *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">     *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">     *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">     *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">     * parameters and default rejected execution handler.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">     *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">     *        pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">     *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">     *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">     *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">     *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">     *        creates a new thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> threadFactory&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             threadFactory, defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">     * parameters and default thread factory.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">     *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">     *        pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">     *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">     *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">     *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">     *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">     *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">     * parameters.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">     *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">     *        pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">     *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">     *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">     *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">     *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">     *        creates a new thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">     *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes the given task sometime in the future.  The task</span></span><br><span class="line"><span class="comment">     * may execute in a new thread or in an existing pooled thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If the task cannot be submitted for execution, either because this</span></span><br><span class="line"><span class="comment">     * executor has been shutdown or because its capacity has been reached,</span></span><br><span class="line"><span class="comment">     * the task is handled by the current &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command the task to execute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></span><br><span class="line"><span class="comment">     *         cannot be accepted for execution</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">         * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">         * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">         * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">         * and so reject the task.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initiates an orderly shutdown in which previously submitted</span></span><br><span class="line"><span class="comment">     * tasks are executed, but no new tasks will be accepted.</span></span><br><span class="line"><span class="comment">     * Invocation has no additional effect if already shut down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method does not wait for previously submitted tasks to</span></span><br><span class="line"><span class="comment">     * complete execution.  Use &#123;<span class="doctag">@link</span> #awaitTermination awaitTermination&#125;</span></span><br><span class="line"><span class="comment">     * to do that.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SecurityException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkShutdownAccess();</span><br><span class="line">            advanceRunState(SHUTDOWN);</span><br><span class="line">            interruptIdleWorkers();</span><br><span class="line">            onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        tryTerminate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to stop all actively executing tasks, halts the</span></span><br><span class="line"><span class="comment">     * processing of waiting tasks, and returns a list of the tasks</span></span><br><span class="line"><span class="comment">     * that were awaiting execution. These tasks are drained (removed)</span></span><br><span class="line"><span class="comment">     * from the task queue upon return from this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method does not wait for actively executing tasks to</span></span><br><span class="line"><span class="comment">     * terminate.  Use &#123;<span class="doctag">@link</span> #awaitTermination awaitTermination&#125; to</span></span><br><span class="line"><span class="comment">     * do that.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;There are no guarantees beyond best-effort attempts to stop</span></span><br><span class="line"><span class="comment">     * processing actively executing tasks.  This implementation</span></span><br><span class="line"><span class="comment">     * cancels tasks via &#123;<span class="doctag">@link</span> Thread#interrupt&#125;, so any task that</span></span><br><span class="line"><span class="comment">     * fails to respond to interrupts may never terminate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SecurityException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Runnable&gt; tasks;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkShutdownAccess();</span><br><span class="line">            advanceRunState(STOP);</span><br><span class="line">            interruptWorkers();</span><br><span class="line">            tasks = drainQueue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        tryTerminate();</span><br><span class="line">        <span class="keyword">return</span> tasks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ! isRunning(ctl.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if this executor is in the process of terminating</span></span><br><span class="line"><span class="comment">     * after &#123;<span class="doctag">@link</span> #shutdown&#125; or &#123;<span class="doctag">@link</span> #shutdownNow&#125; but has not</span></span><br><span class="line"><span class="comment">     * completely terminated.  This method may be useful for</span></span><br><span class="line"><span class="comment">     * debugging. A return of &#123;<span class="doctag">@code</span> true&#125; reported a sufficient</span></span><br><span class="line"><span class="comment">     * period after shutdown may indicate that submitted tasks have</span></span><br><span class="line"><span class="comment">     * ignored or suppressed interruption, causing this executor not</span></span><br><span class="line"><span class="comment">     * to properly terminate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if terminating but not yet terminated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTerminating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">return</span> ! isRunning(c) &amp;&amp; runStateLessThan(c, TERMINATED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> runStateAtLeast(ctl.get(), TERMINATED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runStateAtLeast(ctl.get(), TERMINATED))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                nanos = termination.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invokes &#123;<span class="doctag">@code</span> shutdown&#125; when this executor is no longer</span></span><br><span class="line"><span class="comment">     * referenced and it has no threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the thread factory used to create new threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadFactory the new thread factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if threadFactory is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getThreadFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThreadFactory</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadFactory == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the thread factory used to create new threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current thread factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setThreadFactory(ThreadFactory)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadFactory <span class="title">getThreadFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets a new handler for unexecutable tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler the new handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if handler is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getRejectedExecutionHandler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRejectedExecutionHandler</span><span class="params">(RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the current handler for unexecutable tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setRejectedExecutionHandler(RejectedExecutionHandler)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RejectedExecutionHandler <span class="title">getRejectedExecutionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the core number of threads.  This overrides any value set</span></span><br><span class="line"><span class="comment">     * in the constructor.  If the new value is smaller than the</span></span><br><span class="line"><span class="comment">     * current value, excess existing threads will be terminated when</span></span><br><span class="line"><span class="comment">     * they next become idle.  If larger, new threads will, if needed,</span></span><br><span class="line"><span class="comment">     * be started to execute any queued tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize the new core size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getCorePoolSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCorePoolSize</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">int</span> delta = corePoolSize - <span class="keyword">this</span>.corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(ctl.get()) &gt; corePoolSize)</span><br><span class="line">            interruptIdleWorkers();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We don&#x27;t really know how many new threads are &quot;needed&quot;.</span></span><br><span class="line">            <span class="comment">// As a heuristic, prestart enough new workers (up to new</span></span><br><span class="line">            <span class="comment">// core size) to handle the current number of tasks in</span></span><br><span class="line">            <span class="comment">// queue, but stop if queue becomes empty while doing so.</span></span><br><span class="line">            <span class="keyword">int</span> k = Math.min(delta, workQueue.size());</span><br><span class="line">            <span class="keyword">while</span> (k-- &gt; <span class="number">0</span> &amp;&amp; addWorker(<span class="keyword">null</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (workQueue.isEmpty())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the core number of threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the core number of threads</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setCorePoolSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCorePoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> corePoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starts a core thread, causing it to idly wait for work. This</span></span><br><span class="line"><span class="comment">     * overrides the default policy of starting core threads only when</span></span><br><span class="line"><span class="comment">     * new tasks are executed. This method will return &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     * if all core threads have already been started.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if a thread was started</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prestartCoreThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workerCountOf(ctl.get()) &lt; corePoolSize &amp;&amp;</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Same as prestartCoreThread except arranges that at least one</span></span><br><span class="line"><span class="comment">     * thread is started even if corePoolSize is 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ensurePrestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(ctl.get());</span><br><span class="line">        <span class="keyword">if</span> (wc &lt; corePoolSize)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wc == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starts all core threads, causing them to idly wait for work. This</span></span><br><span class="line"><span class="comment">     * overrides the default policy of starting core threads only when</span></span><br><span class="line"><span class="comment">     * new tasks are executed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads started</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">prestartAllCoreThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (addWorker(<span class="keyword">null</span>, <span class="keyword">true</span>))</span><br><span class="line">            ++n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if this pool allows core threads to time out and</span></span><br><span class="line"><span class="comment">     * terminate if no tasks arrive within the keepAlive time, being</span></span><br><span class="line"><span class="comment">     * replaced if needed when new tasks arrive. When true, the same</span></span><br><span class="line"><span class="comment">     * keep-alive policy applying to non-core threads applies also to</span></span><br><span class="line"><span class="comment">     * core threads. When false (the default), core threads are never</span></span><br><span class="line"><span class="comment">     * terminated due to lack of incoming tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if core threads are allowed to time out,</span></span><br><span class="line"><span class="comment">     *         else &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowsCoreThreadTimeOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allowCoreThreadTimeOut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the policy governing whether core threads may time out and</span></span><br><span class="line"><span class="comment">     * terminate if no tasks arrive within the keep-alive time, being</span></span><br><span class="line"><span class="comment">     * replaced if needed when new tasks arrive. When false, core</span></span><br><span class="line"><span class="comment">     * threads are never terminated due to lack of incoming</span></span><br><span class="line"><span class="comment">     * tasks. When true, the same keep-alive policy applying to</span></span><br><span class="line"><span class="comment">     * non-core threads applies also to core threads. To avoid</span></span><br><span class="line"><span class="comment">     * continual thread replacement, the keep-alive time must be</span></span><br><span class="line"><span class="comment">     * greater than zero when setting &#123;<span class="doctag">@code</span> true&#125;. This method</span></span><br><span class="line"><span class="comment">     * should in general be called before the pool is actively used.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value &#123;<span class="doctag">@code</span> true&#125; if should time out, else &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if value is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">     *         and the current keep-alive time is not greater than zero</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allowCoreThreadTimeOut</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &amp;&amp; keepAliveTime &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Core threads must have nonzero keep alive times&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value != allowCoreThreadTimeOut) &#123;</span><br><span class="line">            allowCoreThreadTimeOut = value;</span><br><span class="line">            <span class="keyword">if</span> (value)</span><br><span class="line">                interruptIdleWorkers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the maximum allowed number of threads. This overrides any</span></span><br><span class="line"><span class="comment">     * value set in the constructor. If the new value is smaller than</span></span><br><span class="line"><span class="comment">     * the current value, excess existing threads will be</span></span><br><span class="line"><span class="comment">     * terminated when they next become idle.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize the new maximum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the new maximum is</span></span><br><span class="line"><span class="comment">     *         less than or equal to zero, or</span></span><br><span class="line"><span class="comment">     *         less than the &#123;<span class="doctag">@linkplain</span> #getCorePoolSize core pool size&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getMaximumPoolSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaximumPoolSize</span><span class="params">(<span class="keyword">int</span> maximumPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maximumPoolSize &lt;= <span class="number">0</span> || maximumPoolSize &lt; corePoolSize)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(ctl.get()) &gt; maximumPoolSize)</span><br><span class="line">            interruptIdleWorkers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the maximum allowed number of threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the maximum allowed number of threads</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setMaximumPoolSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaximumPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maximumPoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the time limit for which threads may remain idle before</span></span><br><span class="line"><span class="comment">     * being terminated.  If there are more than the core number of</span></span><br><span class="line"><span class="comment">     * threads currently in the pool, after waiting this amount of</span></span><br><span class="line"><span class="comment">     * time without processing a task, excess threads will be</span></span><br><span class="line"><span class="comment">     * terminated.  This overrides any value set in the constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time the time to wait.  A time value of zero will cause</span></span><br><span class="line"><span class="comment">     *        excess threads to terminate immediately after executing tasks.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit of the &#123;<span class="doctag">@code</span> time&#125; argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> time&#125; less than zero or</span></span><br><span class="line"><span class="comment">     *         if &#123;<span class="doctag">@code</span> time&#125; is zero and &#123;<span class="doctag">@code</span> allowsCoreThreadTimeOut&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getKeepAliveTime(TimeUnit)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeepAliveTime</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (time == <span class="number">0</span> &amp;&amp; allowsCoreThreadTimeOut())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Core threads must have nonzero keep alive times&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = unit.toNanos(time);</span><br><span class="line">        <span class="keyword">long</span> delta = keepAliveTime - <span class="keyword">this</span>.keepAliveTime;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = keepAliveTime;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>)</span><br><span class="line">            interruptIdleWorkers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the thread keep-alive time, which is the amount of time</span></span><br><span class="line"><span class="comment">     * that threads in excess of the core pool size may remain</span></span><br><span class="line"><span class="comment">     * idle before being terminated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the desired time unit of the result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the time limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setKeepAliveTime(long, TimeUnit)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getKeepAliveTime</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(keepAliveTime, TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* User-level queue utilities */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the task queue used by this executor. Access to the</span></span><br><span class="line"><span class="comment">     * task queue is intended primarily for debugging and monitoring.</span></span><br><span class="line"><span class="comment">     * This queue may be in active use.  Retrieving the task queue</span></span><br><span class="line"><span class="comment">     * does not prevent queued tasks from executing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the task queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlockingQueue&lt;Runnable&gt; <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes this task from the executor&#x27;s internal queue if it is</span></span><br><span class="line"><span class="comment">     * present, thus causing it not to be run if it has not already</span></span><br><span class="line"><span class="comment">     * started.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method may be useful as one part of a cancellation</span></span><br><span class="line"><span class="comment">     * scheme.  It may fail to remove tasks that have been converted</span></span><br><span class="line"><span class="comment">     * into other forms before being placed on the internal queue. For</span></span><br><span class="line"><span class="comment">     * example, a task entered using &#123;<span class="doctag">@code</span> submit&#125; might be</span></span><br><span class="line"><span class="comment">     * converted into a form that maintains &#123;<span class="doctag">@code</span> Future&#125; status.</span></span><br><span class="line"><span class="comment">     * However, in such cases, method &#123;<span class="doctag">@link</span> #purge&#125; may be used to</span></span><br><span class="line"><span class="comment">     * remove those Futures that have been cancelled.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task the task to remove</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the task was removed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> removed = workQueue.remove(task);</span><br><span class="line">        tryTerminate(); <span class="comment">// In case SHUTDOWN and now empty</span></span><br><span class="line">        <span class="keyword">return</span> removed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tries to remove from the work queue all &#123;<span class="doctag">@link</span> Future&#125;</span></span><br><span class="line"><span class="comment">     * tasks that have been cancelled. This method can be useful as a</span></span><br><span class="line"><span class="comment">     * storage reclamation operation, that has no other impact on</span></span><br><span class="line"><span class="comment">     * functionality. Cancelled tasks are never executed, but may</span></span><br><span class="line"><span class="comment">     * accumulate in work queues until worker threads can actively</span></span><br><span class="line"><span class="comment">     * remove them. Invoking this method instead tries to remove them now.</span></span><br><span class="line"><span class="comment">     * However, this method may fail to remove tasks in</span></span><br><span class="line"><span class="comment">     * the presence of interference by other threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; q = workQueue;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Iterator&lt;Runnable&gt; it = q.iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                Runnable r = it.next();</span><br><span class="line">                <span class="keyword">if</span> (r <span class="keyword">instanceof</span> Future&lt;?&gt; &amp;&amp; ((Future&lt;?&gt;)r).isCancelled())</span><br><span class="line">                    it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConcurrentModificationException fallThrough) &#123;</span><br><span class="line">            <span class="comment">// Take slow path if we encounter interference during traversal.</span></span><br><span class="line">            <span class="comment">// Make copy for traversal and call remove for cancelled entries.</span></span><br><span class="line">            <span class="comment">// The slow path is more likely to be O(N*N).</span></span><br><span class="line">            <span class="keyword">for</span> (Object r : q.toArray())</span><br><span class="line">                <span class="keyword">if</span> (r <span class="keyword">instanceof</span> Future&lt;?&gt; &amp;&amp; ((Future&lt;?&gt;)r).isCancelled())</span><br><span class="line">                    q.remove(r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tryTerminate(); <span class="comment">// In case SHUTDOWN and now empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Statistics */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the current number of threads in the pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Remove rare and surprising possibility of</span></span><br><span class="line">            <span class="comment">// isTerminated() &amp;&amp; getPoolSize() &gt; 0</span></span><br><span class="line">            <span class="keyword">return</span> runStateAtLeast(ctl.get(), TIDYING) ? <span class="number">0</span></span><br><span class="line">                : workers.size();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the approximate number of threads that are actively</span></span><br><span class="line"><span class="comment">     * executing tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">                <span class="keyword">if</span> (w.isLocked())</span><br><span class="line">                    ++n;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the largest number of threads that have ever</span></span><br><span class="line"><span class="comment">     * simultaneously been in the pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLargestPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> largestPoolSize;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the approximate total number of tasks that have ever been</span></span><br><span class="line"><span class="comment">     * scheduled for execution. Because the states of tasks and</span></span><br><span class="line"><span class="comment">     * threads may change dynamically during computation, the returned</span></span><br><span class="line"><span class="comment">     * value is only an approximation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of tasks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTaskCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> n = completedTaskCount;</span><br><span class="line">            <span class="keyword">for</span> (Worker w : workers) &#123;</span><br><span class="line">                n += w.completedTasks;</span><br><span class="line">                <span class="keyword">if</span> (w.isLocked())</span><br><span class="line">                    ++n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n + workQueue.size();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the approximate total number of tasks that have</span></span><br><span class="line"><span class="comment">     * completed execution. Because the states of tasks and threads</span></span><br><span class="line"><span class="comment">     * may change dynamically during computation, the returned value</span></span><br><span class="line"><span class="comment">     * is only an approximation, but one that does not ever decrease</span></span><br><span class="line"><span class="comment">     * across successive calls.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of tasks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCompletedTaskCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> n = completedTaskCount;</span><br><span class="line">            <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">                n += w.completedTasks;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a string identifying this pool, as well as its state,</span></span><br><span class="line"><span class="comment">     * including indications of run state and estimated worker and</span></span><br><span class="line"><span class="comment">     * task counts.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a string identifying this pool, as well as its state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ncompleted;</span><br><span class="line">        <span class="keyword">int</span> nworkers, nactive;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ncompleted = completedTaskCount;</span><br><span class="line">            nactive = <span class="number">0</span>;</span><br><span class="line">            nworkers = workers.size();</span><br><span class="line">            <span class="keyword">for</span> (Worker w : workers) &#123;</span><br><span class="line">                ncompleted += w.completedTasks;</span><br><span class="line">                <span class="keyword">if</span> (w.isLocked())</span><br><span class="line">                    ++nactive;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        String rs = (runStateLessThan(c, SHUTDOWN) ? <span class="string">&quot;Running&quot;</span> :</span><br><span class="line">                     (runStateAtLeast(c, TERMINATED) ? <span class="string">&quot;Terminated&quot;</span> :</span><br><span class="line">                      <span class="string">&quot;Shutting down&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() +</span><br><span class="line">            <span class="string">&quot;[&quot;</span> + rs +</span><br><span class="line">            <span class="string">&quot;, pool size = &quot;</span> + nworkers +</span><br><span class="line">            <span class="string">&quot;, active threads = &quot;</span> + nactive +</span><br><span class="line">            <span class="string">&quot;, queued tasks = &quot;</span> + workQueue.size() +</span><br><span class="line">            <span class="string">&quot;, completed tasks = &quot;</span> + ncompleted +</span><br><span class="line">            <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Extension hooks */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method invoked prior to executing the given Runnable in the</span></span><br><span class="line"><span class="comment">     * given thread.  This method is invoked by thread &#123;<span class="doctag">@code</span> t&#125; that</span></span><br><span class="line"><span class="comment">     * will execute task &#123;<span class="doctag">@code</span> r&#125;, and may be used to re-initialize</span></span><br><span class="line"><span class="comment">     * ThreadLocals, or to perform logging.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This implementation does nothing, but may be customized in</span></span><br><span class="line"><span class="comment">     * subclasses. Note: To properly nest multiple overridings, subclasses</span></span><br><span class="line"><span class="comment">     * should generally invoke &#123;<span class="doctag">@code</span> super.beforeExecute&#125; at the end of</span></span><br><span class="line"><span class="comment">     * this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the thread that will run task &#123;<span class="doctag">@code</span> r&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the task that will be executed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method invoked upon completion of execution of the given Runnable.</span></span><br><span class="line"><span class="comment">     * This method is invoked by the thread that executed the task. If</span></span><br><span class="line"><span class="comment">     * non-null, the Throwable is the uncaught &#123;<span class="doctag">@code</span> RuntimeException&#125;</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> Error&#125; that caused execution to terminate abruptly.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This implementation does nothing, but may be customized in</span></span><br><span class="line"><span class="comment">     * subclasses. Note: To properly nest multiple overridings, subclasses</span></span><br><span class="line"><span class="comment">     * should generally invoke &#123;<span class="doctag">@code</span> super.afterExecute&#125; at the</span></span><br><span class="line"><span class="comment">     * beginning of this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When actions are enclosed in tasks (such as</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> FutureTask&#125;) either explicitly or via methods such as</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> submit&#125;, these task objects catch and maintain</span></span><br><span class="line"><span class="comment">     * computational exceptions, and so they do not cause abrupt</span></span><br><span class="line"><span class="comment">     * termination, and the internal exceptions are &lt;em&gt;not&lt;/em&gt;</span></span><br><span class="line"><span class="comment">     * passed to this method. If you would like to trap both kinds of</span></span><br><span class="line"><span class="comment">     * failures in this method, you can further probe for such cases,</span></span><br><span class="line"><span class="comment">     * as in this sample subclass that prints either the direct cause</span></span><br><span class="line"><span class="comment">     * or the underlying exception if a task has been aborted:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * class ExtendedExecutor extends ThreadPoolExecutor &#123;</span></span><br><span class="line"><span class="comment">     *   // ...</span></span><br><span class="line"><span class="comment">     *   protected void afterExecute(Runnable r, Throwable t) &#123;</span></span><br><span class="line"><span class="comment">     *     super.afterExecute(r, t);</span></span><br><span class="line"><span class="comment">     *     if (t == null &amp;&amp; r instanceof Future&lt;?&gt;) &#123;</span></span><br><span class="line"><span class="comment">     *       try &#123;</span></span><br><span class="line"><span class="comment">     *         Object result = ((Future&lt;?&gt;) r).get();</span></span><br><span class="line"><span class="comment">     *       &#125; catch (CancellationException ce) &#123;</span></span><br><span class="line"><span class="comment">     *           t = ce;</span></span><br><span class="line"><span class="comment">     *       &#125; catch (ExecutionException ee) &#123;</span></span><br><span class="line"><span class="comment">     *           t = ee.getCause();</span></span><br><span class="line"><span class="comment">     *       &#125; catch (InterruptedException ie) &#123;</span></span><br><span class="line"><span class="comment">     *           Thread.currentThread().interrupt(); // ignore/reset</span></span><br><span class="line"><span class="comment">     *       &#125;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     *     if (t != null)</span></span><br><span class="line"><span class="comment">     *       System.out.println(t);</span></span><br><span class="line"><span class="comment">     *   &#125;</span></span><br><span class="line"><span class="comment">     * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable that has completed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the exception that caused termination, or null if</span></span><br><span class="line"><span class="comment">     * execution completed normally</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method invoked when the Executor has terminated.  Default</span></span><br><span class="line"><span class="comment">     * implementation does nothing. Note: To properly nest multiple</span></span><br><span class="line"><span class="comment">     * overridings, subclasses should generally invoke</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> super.terminated&#125; within this method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">terminated</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Predefined RejectedExecutionHandlers */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A handler for rejected tasks that runs the rejected task</span></span><br><span class="line"><span class="comment">     * directly in the calling thread of the &#123;<span class="doctag">@code</span> execute&#125; method,</span></span><br><span class="line"><span class="comment">     * unless the executor has been shut down, in which case the task</span></span><br><span class="line"><span class="comment">     * is discarded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates a &#123;<span class="doctag">@code</span> CallerRunsPolicy&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallerRunsPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Executes task r in the caller&#x27;s thread, unless the executor</span></span><br><span class="line"><span class="comment">         * has been shut down, in which case the task is discarded.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A handler for rejected tasks that throws a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> RejectedExecutionException&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AbortPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates an &#123;<span class="doctag">@code</span> AbortPolicy&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbortPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Always throws RejectedExecutionException.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> RejectedExecutionException always</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">                                                 <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">                                                 e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A handler for rejected tasks that silently discards the</span></span><br><span class="line"><span class="comment">     * rejected task.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates a &#123;<span class="doctag">@code</span> DiscardPolicy&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DiscardPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Does nothing, which has the effect of discarding task r.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A handler for rejected tasks that discards the oldest unhandled</span></span><br><span class="line"><span class="comment">     * request and then retries &#123;<span class="doctag">@code</span> execute&#125;, unless the executor</span></span><br><span class="line"><span class="comment">     * is shut down, in which case the task is discarded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardOldestPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates a &#123;<span class="doctag">@code</span> DiscardOldestPolicy&#125; for the given executor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DiscardOldestPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Obtains and ignores the next task that the executor</span></span><br><span class="line"><span class="comment">         * would otherwise execute, if one is immediately available,</span></span><br><span class="line"><span class="comment">         * and then retries execution of task r, unless the executor</span></span><br><span class="line"><span class="comment">         * is shut down, in which case task r is instead discarded.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                e.getQueue().poll();</span><br><span class="line">                e.execute(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式分类</title>
      <link href="2015/09/12/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/"/>
      <url>2015/09/12/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>平时工作代码进行重构时也会涉及到设计模式，另外在看一些开源框架时也会涉及到很多的设计模式。只是平时没有太全面的了解，最近面试时有同事问汲到这里，所以在这里整理以备将来随时查看。<br>这里我举一个最容易理解的例子来解释每种设计模式<br>首先看一下设计模式的分类及关系 </p></blockquote><img  src='/images/pattern/pattern.png' class='col-xs-12 thumbnail'/><p>它们之间的关系如图：<br><img  src='/images/pattern/relation.png' class='col-xs-12 thumbnail'/></p><p>##创建型模式<br>这六个模式都是与创建对象相关的</p><ul><li>简单工厂模式（Simple Factory）；</li><li>工厂方法模式（Factory Method）；</li><li>抽象工厂模式（Abstract Factory）；</li><li>创建者模式（Builder）；</li><li>原型模式（Prototype）；</li><li>单例模式（Singleton）；</li></ul><p>##结构型模式</p><p>创建对象后，对象与对象之间的依赖关系，设计好了会为后续代码的维护带来很大的方便。</p><ul><li>外观模式（Facade）；</li><li>适配器模式（Adapter）；</li><li>代理模式（Proxy）；</li><li>装饰模式（Decorator）；</li><li>桥模式（Bridge）；</li><li>组合模式（Composite）；</li><li>享元模式（Flyweight）</li></ul><p>##行为型模式</p><p>对象的创建和结构定义好后，就是他们的行为的设计了。<br>模板方法模式（Template Method）；</p><ul><li>观察者模式（Observer）；</li><li>状态模式（State）；</li><li>策略模式（Strategy）；</li><li>职责链模式（Chain of Responsibility）；</li><li>命令模式（Command）；</li><li>访问者模式（Visitor）；</li><li>调停者模式（Mediator）；</li><li>备忘录模式（Memento）；</li><li>迭代器模式（Iterator）；</li><li>解释器模式（Interpreter）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人书架</title>
      <link href="2015/09/10/%E6%88%91%E7%9A%84%E4%B9%A6%E6%9E%B6/"/>
      <url>2015/09/10/%E6%88%91%E7%9A%84%E4%B9%A6%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="最近在看的书籍："><a href="#最近在看的书籍：" class="headerlink" title="最近在看的书籍："></a>最近在看的书籍：</h3><ul><li>2020.09.23 <a href="https://github.com/Vonng/ddia">《设计数据密集型应用》</a></li></ul><h3 id="曾经看过的书籍："><a href="#曾经看过的书籍：" class="headerlink" title="曾经看过的书籍："></a>曾经看过的书籍：</h3><h4 id="工具类技术书籍"><a href="#工具类技术书籍" class="headerlink" title="工具类技术书籍"></a>工具类技术书籍</h4><ul><li>《Developing an ionic Edge》</li><li>《Angular JS权威教程》(Ari Lerner)</li><li>《O’Reilly：Python学习手册（第4版）》</li><li>《Python Cookbook（第3版）中文版》</li><li>《Vim使用技巧》</li><li>《JAVA编程思想》</li><li>《JAVA并发编程实战》</li><li>《Java JDK 7学习笔记》</li><li><a href="http://search.dangdang.com/?key=%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%C4%A3%CA%BD">《大话设计模式（交互启发式教学 谈笑间详解设计模式 让你爱不释手）》</a> 程杰　著 </li><li><a href="http://product.dangdang.com/9349959.html">《精通CSS+DIV网页样式布局》</a>前沿科技 编著</li></ul><h4 id="业务专业相关"><a href="#业务专业相关" class="headerlink" title="业务专业相关"></a>业务专业相关</h4><ul><li>《流程优化与再造》</li></ul><h4 id="思维构建相关"><a href="#思维构建相关" class="headerlink" title="思维构建相关"></a>思维构建相关</h4><ul><li>《黑客与画家》</li><li>《大教堂与集市》</li><li>《重来》</li><li>《启示录 打造用户喜爱的产品》Marty Cagan著 七印部落 译</li><li><a href="http://search.dangdang.com/?key=%EF%BF%BD%EF%BF%BD0%EF%BF%BD%EF%BF%BD1">《从0到1：开启商业与未来的秘密》</a>【美】彼得 蒂尔 Peter Thiel</li><li><a href="http://product.dangdang.com/23734636.html">《重构 改善既有代码的设计》</a> 【美】Martin Fowler　著，熊节　译</li><li><a href="http://product.dangdang.com/22722790.html">《JavaScript权威指南（第6版）》</a>（美）弗兰纳根　著,淘宝前端团队　译</li><li><a href="http://product.dangdang.com/20848036.html">《干法》</a> 【日】稻盛和夫　著，曹岫云　译　</li><li><a href="http://product.dangdang.com/21032154.html">《失控》</a> 凯文凯利　著，东西文库　译</li></ul><h4 id="生活向导"><a href="#生活向导" class="headerlink" title="生活向导"></a>生活向导</h4><ul><li>《平凡的世界》(路遥)</li><li>《尼古拉.特斯拉传》(Steve Law)</li></ul><h3 id="要看的书籍"><a href="#要看的书籍" class="headerlink" title="要看的书籍"></a>要看的书籍</h3><ul><li><a href="http://www.amazon.cn/%E9%9B%86%E8%A3%85%E7%AE%B1%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C-%E9%A9%AC%E5%85%8B%C2%B7%E8%8E%B1%E6%96%87%E6%A3%AE/dp/B00HE1PK58/ref=sr_1_1?s=books&ie=UTF8&qid=1442883290&sr=1-1&keywords=%E9%9B%86%E8%A3%85%E7%AE%B1%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C">《集装箱改变世界》</a> <blockquote><p>本书从集装箱的发明史娓娓道来，将一个看似平凡的主题衍变成一个个非同寻常的有趣故事，展现了一项技术的进步是如何改变世界经济形态的。它的价值不在于是什么，而在于怎样使用。在集装箱出现之前，美国的沃尔玛、法国的成衣绝对不会遍地开花。而在集装箱出现之后，货运变得如此便宜，以至于某件产品产自东半球，运至纽约销售，远比在纽约近郊生产该产品来得划算。中国也从此登上国际集装箱海运和世界工厂的舞台。读者在享受阅读的同时，还会有趣地发现，即便是一个简单的创新，也会彻底改变我们的生活</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 书架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed,awk</title>
      <link href="2015/09/06/Linux%20sed%E5%91%BD%E4%BB%A4%E4%B8%8Eawk%E5%91%BD%E4%BB%A4/"/>
      <url>2015/09/06/Linux%20sed%E5%91%BD%E4%BB%A4%E4%B8%8Eawk%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux shell编程从初学到精通 </p><blockquote><p>最近工作时遇到了一个问题，就是查看进行时，只查看某些进行的进程号，若直接用ps aux|grep sms  这样会得到一大堆的东东，所以同事推荐用awk,同<br>时也提及了sed。</p></blockquote><blockquote><p>这里抽时间对这两个命令做一个总结，仅为个人学习工作所用。</p></blockquote><p>##sed、awk是什么？</p><pre><code>它们是linux\unix系统中的两种功能强大的文本处理工具。</code></pre><ul><li>有一个sed的编辑器，才有了sed（stream editor）这个名字,它是一个将一系列编辑命令作用于一个文本文件的理想工具。</li><li>由于创建awk的三个作者名称 是Aho、Weinberger和Kernighan，所以得名为AWK,是一种能够对结构化数据进行操作并产生格式化报表的编程语言。</li></ul><p>##sed的使用</p><p>###使用场合</p><ul><li>编辑相对交互式广西编辑器而言太大的文件</li><li>编辑命令太复杂，在交互式文本编辑器中难以输入的情况</li><li>对文件扫描一遍，但是需要执行多个编辑函数的情况</li></ul><p>sed只对缓冲区中的原始文件的副本进行编辑，并不编辑原始的文件。so，若要保存个性后的文件，压根将输出重定向到另一个文件。如：</p><pre><code>sed &#39;sed command&#39; source-file &gt; target-file</code></pre><p>###调用方式<br><code>如何没有指定输入文件sed将从标准输入中接受输入</code></p><ul><li><p>在shell命令行输入命令调用sed，格式为：</p><p>  sed [option] ‘sed command’ 输入文件<br><code>注意此处为单引号将命令引起来</code></p></li><li><p>将sed命令插入脚本文件后，然后通过sed命令调用它，格式为：</p><p>  sed [option] -f sed脚本文件 输入文件</p></li><li><p>将sed命令插入脚本文件后，最常用的方法是设置该脚本文件为可执行，然后直接执行该脚本，格式为：</p><p>  ./sed脚本文件 输入文件</p></li></ul><p><code>但此命令脚本文件，应该以sha-bang(#!)开头，sha-bang后面是解析这个脚本的程序名。</code></p><p>####sed命令选项及其意义</p><ul><li>-n:不打印所有行到标准输出</li><li>-e:将下一个字符串解析为sed编辑命令，如果只传递一个编辑命令给sed，-e选项可以省略</li><li>-f:表示正在调用sed脚本文件</li></ul><p>###命令组成方式</p><pre><code>定位文本行和编辑命令两部分组成</code></pre><p>####定位文本</p><ul><li>使用行号，指定一行，或指定行号范围</li><li>使用正则表达式</li></ul><p><code>下面是sed命令定位文本的方法</code></p><ul><li>x 为指定的行号</li><li>x，y 指定行号范围</li><li>/pattern/ 查询包含模式的行</li><li>/pattern/pattern/ 查询包含两个模式的行</li><li>/pattern/，x 从与模式匹配到x号行之间的行  反之类似</li><li>x，y！查询不包括x和y行号的行</li></ul><p>####常用编辑命令</p><ul><li>p 打印匹配行</li><li>= 打印文件行号</li><li>a\ 在定位行号之后追加文本信息</li><li>i\ 在定们行号之前插入文本信息</li><li>d 删除定位行</li><li>c\ 用新文本替换定位文本</li><li>s 使用替换模式替换相应模式</li><li>r 从另一个文件中读广西</li><li>w 将文本写入到一个文件</li><li>y 变换字符</li><li>q 第一个模式匹配完成后退出</li><li>l 显示与八进制ASCII码等价的控制字符</li><li>{} 在定位行执行的命令组</li><li>n 读取下一个输入行，用下一个命令处理新的行</li><li>h 将模式缓冲区的文本复制到保持缓冲区</li><li>H 将模式缓冲区的文本追加到保持缓冲区</li><li>x 互换模式缓冲区和保持缓冲区的内容</li><li>g 将保持缓冲区的内容复制到模式缓冲区</li><li>G 将保持缓冲区的内容追加到模式缓冲区</li></ul><p>###实例<br>我们就用下面这个文件内容作为事例参考：</p><pre><code>#!/usr/bin/env pythonimport osimport sysif __name__ == &quot;__main__&quot;:    os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;test.settings&quot;)    from django.core.management import execute_from_command_line    execute_from_command_line(sys.argv)</code></pre><h4 id="n-选项的使用"><a href="#n-选项的使用" class="headerlink" title="-n 选项的使用"></a>-n 选项的使用</h4><ul><li>使用-n 不输出所有的内容  1p 输出第一行</li></ul><pre><code>➜  linuxstudy  sed -n &#39;1p&#39; manage.py2#!/usr/bin/env python</code></pre><ul><li>打印3到6行</li></ul><pre><code>➜  linuxstudy  sed -n &#39;3,6p&#39; manage.py2import sysif __name__ == &quot;__main__&quot;:    os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;test.settings&quot;)</code></pre><ul><li>模式匹配</li></ul><pre><code>➜  linuxstudy  sed -n &#39;/environ/p&#39; manage.py2    os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;test.settings&quot;)</code></pre><h4 id="e-选项的使用"><a href="#e-选项的使用" class="headerlink" title="- e 选项的使用"></a>- e 选项的使用</h4><ul><li>打印行号：</li></ul><pre><code>    ➜  linuxstudy  sed -n &#39;/env/=&#39; manage.py2    1    6添加e选项：    ➜  linuxstudy  sed -n -e &#39;/env/p&#39; -e &#39;/env/=&#39; manage.py2     #!/usr/bin/env python    1        os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;test.settings&quot;)    6    `sed不支持多个编辑命令的用法，带多个编辑命令的用法，一般格式为：`    sed [option] -e 编辑命令 -e 编辑命令 ... -e 编辑命令 输入文件    将下面命令操作存放到一个后缀为.sed的文件中，让其可执行    #!/usr/bin/sed -f     /command/a\    we append a new line</code></pre><h4 id="sed文本定位"><a href="#sed文本定位" class="headerlink" title="sed文本定位"></a>sed文本定位</h4><ul><li>匹配元字符 $和.</li></ul><pre><code>    ➜  linuxstudy  sed -n &#39;/\./p&#39; manage.py2        os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;test.settings&quot;)        from django$.core.management import execute_from_command_line        execute_from_command_line(sys.argv)    ➜  linuxstudy  sed -n &#39;/\$/p&#39; manage.py2        from django$.core.management import execute_from_command_line</code></pre><ul><li>元字符进行匹配</li></ul><pre><code>    $在正则中表示行尾，但在这里表示最后一行    sed的基本命令，可以放在单引号外或内都行，根据自己的习惯    ➜  linuxstudy  sed  &#39;$p&#39; manage.py2 得取最后一行    ➜  linuxstudy sed  -n &#39;/.*line/p&#39; manage.py2 找出以line结尾的行</code></pre><ul><li><p>! 符号，表示取反，但是不能用于模式匹配的取反</p><pre><code>  ➜  linuxstudy  sed -n &#39;2,4!p&#39; manage.py2 不打印2到4行 </code></pre></li><li><p>使用行号与关键字匹配限定行范围</p><pre><code>  /pattern/,x和x,/pattern/ 这两种形式其实与x,y一样的，只是将x或y代替罢了  ➜  linuxstudy  sed -n &#39;4,/mana/p&#39; manage.py2  得到的是从第四行起到与mana匹配的行的内容  if __name__ == &quot;__main__&quot;:      os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;hwbuluo.settings&quot;)      from django$.core.management import execute_from_command_line</code></pre></li></ul><h4 id="sed文本编辑"><a href="#sed文本编辑" class="headerlink" title="sed文本编辑"></a>sed文本编辑</h4><ul><li><p>插入文本    i\</p><pre><code>  在匹配行的前端插入  sed &#39;定位i\text&#39; 文件  修改上面的追加脚本：  #!/usr/bin/sed -f   /command/i\  we append a new line</code></pre></li><li><p>修改文本 modify.sed    c\</p><pre><code>  -------------------  #!/usr/bin/sed -f  /command/c\  I modify the file.  -------------------  执行：./modify.sed</code></pre></li><li><p>删除文本  d  与追加和插入修改有所不同，这里在后面不需要添加\</p><pre><code>  sed &#39;1,3d&#39; manage.py2</code></pre></li><li><p>替换文本 替换文本与修改文本类似，只是修改是对一整行的个性，替换则是对局部进行修改</p><pre><code>  s/被替换的字符串/新字符串/[替换选项]  替换选项及意义：      g:替换文本中所有出现被替换字符串之处,若不使用此选项，则只替换每行的第一个匹配上的字符串      p:与-n选项结合，只打印替换行      w 文件名:表示将输出定向到一个文件  ➜  linuxstudy  sed -n &#39;s/command/============/p&#39; manage.py2       from django$.core.management import execute_from_============_line      execute_from_============_line(sys.argv)  也可以 linuxstudy  sed -n &#39;s/command/============/2p&#39; manage.py2   来替换每行出现的第几个 </code></pre></li></ul><ul><li></li></ul><p>##<a href="http://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html">awk的使用</a></p><p>###使用场合<br>###调用方式<br>###实例</p><pre><code>awk -F &#39;:&#39; &#39;BEGIN &#123;count=0;&#125; &#123;name[count] = $1;count++;&#125;;END &#123;for (i=0;i&lt;NR;i++) print i,name[i]&#125;&#39;   /etc/passwd0 root1 daemon2 bin3 sys4 sync5 games6 man7 lp8 maills -l |awk &#39;BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print &quot;[end]size is&quot;,size/1024/1024 ,&quot;M&quot;&#125;&#39;[end]size is 0.098505 M</code></pre>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用运维知识大杂烩</title>
      <link href="2015/09/06/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>2015/09/06/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>##日常系统操作</p><ul><li>将远程文件拷贝到本地</li></ul><pre><code>    scp username@ip:remote_filepath /local_dir</code></pre><ul><li><p>同步目录</p><pre><code>  rsync -avzr 172.xx.xx.11:/opt/jagent/tomcat* .  sudo chown -R fsdevops.fsdevops sms-service/</code></pre></li><li><p><a href="http://bian5399.blog.51cto.com/3848702/963662">linux 最大文件限制数 ulimit</a></p><pre><code>  ulimit -n</code></pre></li><li><p><a href="http://www.cnblogs.com/likehua/p/3831331.html">资源暂时不可用，资源已耗尽</a></p><pre><code>    $ ps        -bash: fork: retry: 资源暂时不可用        -bash: fork: retry: 资源暂时不可用        -bash: fork: retry: 资源暂时不可用        -bash: fork: retry: 资源暂时不可用    IT组哥们分析说是每个用户句柄数只有1024个，目前超了    ulimit -a 即可查询linux相关的参数     </code></pre></li><li><p>查看进程号</p></li></ul><pre><code>    ps aux|grep sms|awk -F  &#39; &#39; &#39;&#123;print $2&#125;&#39;    ps aux|grep sms|awk -F  &#39; &#39; &#39;&#123;kill $2&#125;&#39;</code></pre><ul><li>grep的使用</li></ul><pre><code>    cat rmq_bk_gc.log|grep -E -o &#39;\w+&#39;|sort|uniq -c|sort -k 2,1    -E 正则    -o 输出 -O 标示出     sort排序    uniq group</code></pre><ul><li><p>强制用sudo保存</p><pre><code>  :w !sudo tee %</code></pre></li><li><p>设置服务自启动</p><p>  chkconfig</p></li><li><p>查看某端口被谁占用</p><pre><code>   netstat -apn   netstat -apn|grep 8013   ps -aux | grep 33514/java</code></pre></li><li><p>查看文件占用<br>  du -hs .</p></li><li><p><a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html">监视指定网络的数据包</a></p><pre><code>   监视指定主机和端口的数据包         tcpdump tcp port 23 and host 210.27.48.1</code></pre></li><li><p>防火墙</p><pre><code>    hostname    iptables -t filter -I INPUT -p tcp --dport 27107 -m state --state NEW -j ACCEPT    sudo iptables -A INPUT -p tcp --dport 13710 -j ACCEPT    sudo iptables -A OUTPUT -p tcp --sport 13710 -j ACCEPT    service iptables save    vim /etc/puppet/puppet.conf     service puppet restart    iptables -L    more /etc/sysconfig/iptables    vim /etc/sysconfig/iptables    service iptables reload</code></pre></li></ul><pre><code>      停止防火墙      sudo su      service iptables stop</code></pre><ul><li><p>安装telnet</p><pre><code>    yum install -y telnet</code></pre></li><li><p>查询某类文件</p><pre><code>    grep netty -R .</code></pre></li></ul><ul><li><p>查看内存</p><pre><code>    free </code></pre></li><li><p>curl 发送请求</p><pre><code>  目的1：通过脚本发送post请求。  答案： curl -d &quot;leaderboard_id=7778a8143f111272&amp;score=19&amp;app_key=8d49f16fe034b98b&amp;_test_user=test01&quot; &quot;http://172.16.102.208:8089/wiapi/score&quot;  目的2：通过脚本发送post请求，顺便附带文本数据，比如通过&quot;浏览&quot;选择本地的card.txt并上传发送post请求  答案：  curl  -F &quot;blob=@card.txt;type=text/plain&quot;  &quot;http://172.16.102.208:8089/wiapi/score?leaderboard_id=7778a8143f111272&amp;score=40&amp;app_key=8d49f16fe034b98b&amp;_test_user=test01&quot;   </code></pre></li><li><p>ssh免密码登陆</p></li></ul><pre><code>ssh-keygen -t rsa -P &#39;&#39;将生成的文件拷到目标主机，交添加到keys文件中cat sshnopw.pub &gt;&gt; /root/.ssh/authorized_keys</code></pre><ul><li>vmstat  相比top，我可以看到整个机器的CPU,内存,IO的使用情况，而不是单单看到各个进程的CPU使用率和内存使用率</li></ul><pre><code>    2表示每个两秒采集一次服务器状态，1表示只采集一次。    procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----     r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st     0  0      0 779304  67972 706748    0    0   135    45  538 1117 10  3 86  2  0     r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。     b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。     swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。     free   空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。     buff   Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M     cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)     si  每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。     so  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。     bi  块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒     bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。     in 每秒CPU的中断次数，包括时间中断     cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。     us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。     sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。     id  空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。     wt 等待IO CPU时间。</code></pre><ul><li>jstat java虚拟机 垃圾回收状态查看</li></ul><pre><code>    命令格式    jstat命令命令格式：    jstat [Options] vmid [interval] [count]    参数说明：    Options，选项，我们一般使用 -gcutil 查看gc情况    vmid，VM的进程号，即当前运行的java进程号    interval，间隔时间，单位为秒或者毫秒    count，打印次数，如果缺省则打印无数次    示例说明    示例    通常运行命令如下：    jstat -gc 12538 5000    即会每5秒一次显示进程号为12538的java进成的GC情况，    显示内容如下图：    jstat -gc 19014 1000     S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT       10752.0 10752.0  0.0   5293.9 65536.0  65224.5   175104.0     16.0    13056.0 12799.5 1536.0 1495.2      1    0.009   0      0.000    0.009    10752.0 10752.0  0.0   5293.9 65536.0  65224.5   175104.0     16.0    13056.0 12799.5 1536.0 1495.2      1    0.009   0      0.000    0.009    结果说明    显示内容说明如下（部分结果是通过其他其他参数显示的，暂不说明）：             S0C：年轻代中第一个survivor（幸存区）的容量 (字节)              S1C：年轻代中第二个survivor（幸存区）的容量 (字节)              S0U：年轻代中第一个survivor（幸存区）目前已使用空间 (字节)              S1U：年轻代中第二个survivor（幸存区）目前已使用空间 (字节)              EC：年轻代中Eden（伊甸园）的容量 (字节)              EU：年轻代中Eden（伊甸园）目前已使用空间 (字节)              OC：Old代的容量 (字节)              OU：Old代目前已使用空间 (字节)              PC：Perm(持久代)的容量 (字节)              PU：Perm(持久代)目前已使用空间 (字节)              YGC：从应用程序启动到采样时年轻代中gc次数              YGCT：从应用程序启动到采样时年轻代中gc所用时间(s)              FGC：从应用程序启动到采样时old代(全gc)gc次数              FGCT：从应用程序启动到采样时old代(全gc)gc所用时间(s)              GCT：从应用程序启动到采样时gc用的总时间(s)              NGCMN：年轻代(young)中初始化(最小)的大小 (字节)              NGCMX：年轻代(young)的最大容量 (字节)              NGC：年轻代(young)中当前的容量 (字节)              OGCMN：old代中初始化(最小)的大小 (字节)              OGCMX：old代的最大容量 (字节)              OGC：old代当前新生成的容量 (字节)              PGCMN：perm代中初始化(最小)的大小 (字节)              PGCMX：perm代的最大容量 (字节)                PGC：perm代当前新生成的容量 (字节)              S0：年轻代中第一个survivor（幸存区）已使用的占当前容量百分比              S1：年轻代中第二个survivor（幸存区）已使用的占当前容量百分比              E：年轻代中Eden（伊甸园）已使用的占当前容量百分比              O：old代已使用的占当前容量百分比              P：perm代已使用的占当前容量百分比              S0CMX：年轻代中第一个survivor（幸存区）的最大容量 (字节)              S1CMX ：年轻代中第二个survivor（幸存区）的最大容量 (字节)              ECMX：年轻代中Eden（伊甸园）的最大容量 (字节)              DSS：当前需要survivor（幸存区）的容量 (字节)（Eden区已满）              TT： 持有次数限制              MTT ： 最大持有次数限制 </code></pre><ul><li><p>jstack pid java查看java程序的状态</p></li><li><p>grep <a href="https://en.wikipedia.org/wiki/Regular_expression">正则</a>输出 </p></li></ul><pre><code>    grep -o -E &quot;[0-9]&#123;11&#125;&quot; xx.log    cat error.log |grep &#39;Failed to invoke the method&#39;|grep &#39;2015-12-08 20&#39;|awk -F&#39;Failed to invoke the method&#39; &#39;&#123;print $2&#125;&#39;|awk &#39;&#123;print $1&#125;&#39;  |sort|uniq -c</code></pre><ul><li><p>删除某些文件</p><pre><code>  find ./ -name &#39;xx.log&#39; |xargs rm -rf</code></pre></li><li><p>删除某个文件外的其它文件</p><pre><code>  ls | grep -v keep | xargs rm #删除keep文件之外的所有文件  说明： ls先得到当前的所有文件和文件夹的名字， grep -v keep，进行grep正则匹配查找keep，-v参数决定了结果为匹配之外的结果，也就是的到了keep之外的所有文件名，然后 xargs用于从 标准输入获得参数 并且传递给后面的命令，这里使用的命令是 rm，然后由rm删除前面选择的文件</code></pre></li><li><p>查看磁盘信息</p></li></ul><pre><code>    查看当前文件夹下所有文件大小（包括子文件夹）       ➜  ~  du -sh        47G    .    查看指定文件夹大小       # du -hs ftp       6.3G    ftp    查看磁盘空间大小命令    df -h Df命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式： df -hl 显示格式为： 文件系统 容量 已用 可用 已用% 挂载点 Filesystem Size Used Avail Use% Mounted on /dev/hda2 45G 19G 24G 44% / /dev/hda1 494    df   -h    Df命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式：    df -hl    显示格式为：　    文件系统              容量 已用 可用 已用% 挂载点　    Filesystem            Size Used Avail Use% Mounted on    /dev/hda2              45G   19G   24G 44% /</code></pre><ul><li><p>gz解压</p><pre><code>  gzip -x ...     </code></pre></li><li><p>proc 启动应用程序时，找不到log去哪了</p><pre><code>  ls -l /proc/63220/fd|grep log</code></pre></li></ul><ul><li>查看内存信息 </li></ul><p>#linux 下安装软件</p><ul><li>yum</li></ul><pre><code>    指定源进行安装    yum install 软件名 --enablerepo=安装包地址</code></pre><ul><li>重新安装JDK</li></ul><pre><code>    删除JDK:        rpm -qa | grep jdk|xargs sudo rpm -e --nodeps    download jdk     wget -c -P ./ http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-linux-x64.rpm?AuthParam=1448637274_af870ccf6c2c78750a5977e6da301744     安装     以JDK1.8为例     拷贝到/usr/share下，mv jdk-8u65-linux-x64.rpm /usr/share     用rpm -ivh命令安装     配置环境变量     在/etc/profile下增加     # set Java environment     JAVA_HOME=/usr/share/jdk-8u65-linux-x64     PATH=$JAVA_HOME/bin:$PATH     CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar     export JAVA_HOME     export PATH     export CLASSPATH     测试     [root@localhost ~]# echo $JAVA_HOME     /usr/share/jdk1.6.0_43     [root@localhost ~]# echo $PATH     /usr/share/jdk1.6.0_43/bin:/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin     [root@localhost ~]# echo $CLASSPATH     .:/usr/share/jdk1.6.0_43/lib/dt.jar:/usr/share/jdk1.6.0_43/lib/tools.jar     [root@localhost ~]# java -version     java version &quot;1.6.0_43&quot;     Java(TM) SE Runtime Environment (build 1.6.0_43-b01)     Java HotSpot(TM) 64-Bit Server VM (build 20.14-b01, mixed mode)    Managing Java    sudo update-alternatives --config java    有 2 个候选项可用于替换 java (提供 /usr/bin/java)。</code></pre><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul><li><p>mysql授权</p><pre><code>  ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code></pre></li></ul><h2 id="安装apt-get"><a href="#安装apt-get" class="headerlink" title="安装apt-get"></a>安装apt-get</h2><p><a href="http://everyday-tech.com/apt-get-on-centos/">http://everyday-tech.com/apt-get-on-centos/</a></p><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>lsof语法格式是：<br>lsof ［options］ filename<br>复制代码</p><p>lsof abc.txt 显示开启文件abc.txt的进程<br>lsof -c abc 显示abc进程现在打开的文件<br>lsof -c -p 1234 列出进程号为1234的进程所打开的文件<br>lsof -g gid 显示归属gid的进程情况<br>lsof +d /usr/local/ 显示目录下被进程开启的文件<br>lsof +D /usr/local/ 同上，但是会搜索目录下的目录，时间较长<br>lsof -d 4 显示使用fd为4的进程<br>lsof -i 用以显示符合条件的进程情况<br>lsof -i[46] [protocol][@hostname|hostaddr][:service|port]<br>  46 –&gt; IPv4 or IPv6<br>  protocol –&gt; TCP or UDP<br>  hostname –&gt; Internet host name<br>  hostaddr –&gt; IPv4地址<br>  service –&gt; /etc/service中的 service name (可以不止一个)<br>  port –&gt; 端口号 (可以不止一个)</p><h2 id="traceroute-IP"><a href="#traceroute-IP" class="headerlink" title="traceroute IP"></a>traceroute IP</h2><h2 id="监控某台机器到某IP的链路的连通性"><a href="#监控某台机器到某IP的链路的连通性" class="headerlink" title="监控某台机器到某IP的链路的连通性"></a>监控某台机器到某IP的链路的连通性</h2><pre><code>    nohup ping -W 1 172.31.xx.xx &amp;&gt;/tmp/ping.log &amp;    crontab -e    * * * * *       echo &quot;`date +%d-%H:%M`&quot; &gt;&gt; /tmp/ping.log</code></pre>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django,Mysql,空间数据是通过Google地图和高德地图进行采集的</title>
      <link href="2015/09/02/Django+Mysql+%E5%AE%9E%E7%8E%B0%E5%91%A8%E8%BE%B9%E6%9F%A5%E8%AF%A2/"/>
      <url>2015/09/02/Django+Mysql+%E5%AE%9E%E7%8E%B0%E5%91%A8%E8%BE%B9%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>##环境</p><p>Django,Mysql,空间数据是通过Google地图和高德地图进行采集的</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ mysql -V</span><br><span class="line">mysql  Ver <span class="number">14.14</span> Distrib <span class="number">5.6</span><span class="number">.20</span>, <span class="keyword">for</span> osx10<span class="number">.9</span> (x86_64) <span class="keyword">using</span>  EditLine <span class="keyword">wrapper</span></span><br></pre></td></tr></table></figure><p>##需求描述</p><p>mysql中存储了一些地理空间点类型的数，要进行周边查询。</p><p>##MySQL空间相关的局限性</p><p><a href="http://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions.html">MySQL空间扩展的功能</a>仅支持包络框相关的操作(MySQL称之为最小边框，或简称为 MBR)。也就是说，MySQL符合OGC标准。</p><blockquote><p>目前,MySQL没有实现Contains,Crosses,Disjoint,Intersects,Overlaps,Touches函数，可以通过MBR来实现同样效果操作。</p></blockquote><p>也就是说，在MySQL进行如contains类似的空间查询时，可以通过bbcontains来实现同样效果的操作。</p><p><code>注意：</code></p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">只有MyISAM引擎的MySQL表才真正的支持空间索引<span class="comment">(R-trees)</span>。也就是说，当你要使用MySQL提供的空间扩展时，你要在快速查询空间数据和数据的完整性之间做一个选择 － MyISAM的表不支持事务和外键约束。</span><br></pre></td></tr></table></figure><p>##数据库配置</p><p>空间表引擎 Engine:InnoDB</p><p>###创建数据库</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> project_test@localhost IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;project_test&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>; </span><br><span class="line">mysql&gt;<span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> project_test@&quot;%&quot; IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;project_test&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>; </span><br></pre></td></tr></table></figure><ul><li><p>第一句增加了一个 project_test 用户授权通过本地机（localhost)访问，密码“project_test”。</p></li><li><p>第二句则是授与 project_test 用户从任何其它主机发起的访问（通配符％）。 </p></li></ul><p>###配置数据源</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.contrib.gis.db.backends.mysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;project_test&#x27;</span>,        # <span class="keyword">Or</span> <span class="type">path</span> <span class="keyword">to</span> <span class="keyword">database</span> file <span class="keyword">if</span> <span class="keyword">using</span> sqlite3.</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;project_test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;project_test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,           # Empty <span class="keyword">for</span> localhost through <span class="keyword">domain</span> sockets <span class="keyword">or</span> <span class="string">&#x27;127.0.0.1&#x27;</span> <span class="keyword">for</span> localhost through TCP.</span><br><span class="line">    <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,                # <span class="keyword">Set</span> <span class="keyword">to</span> empty string <span class="keyword">for</span> <span class="keyword">default</span>.</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>##数据模型的构建</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.gis.db <span class="keyword">import</span> models <span class="keyword">as</span> gismodels</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppPoint</span>(<span class="params">gismodels.Model</span>):</span></span><br><span class="line">    description = gismodels.TextField(verbose_name=_(<span class="string">u&quot;描述信息&quot;</span>), max_length=<span class="number">500</span>,</span><br><span class="line">                                      blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    point = gismodels.PointField(spatial_index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    objects = gismodels.GeoManager()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="Django-Geographic-framework-1-7"><a href="#Django-Geographic-framework-1-7" class="headerlink" title="Django Geographic framework 1.7"></a><a href="https://docs.djangoproject.com/en/1.7/">Django Geographic framework 1.7</a></h2><p><a href="https://docs.djangoproject.com/en/1.7/ref/contrib/gis/">GeoDjango</a>打算做世界级的地理学Web框架。它的目标是尽可能方便是的利用强大空间数据构建GIS Web 应用。</p><p>###GeoQuerySet API</p><p><code>class GeoQuerySet([model=None])</code></p><p>####空间查询</p><p>正如使用<a href="https://docs.djangoproject.com/en/1.7/ref/models/querysets/#queryset-api">QuerySet API</a>时一样，在过滤器链(<a href="https://docs.djangoproject.com/en/1.7/topics/db/queries/#chaining-filters">chaining filters</a>)上加上GeoQuerySet进行筛选。除了通常的字段(<a href="https://docs.djangoproject.com/en/1.7/ref/models/querysets/#field-lookups">Field lookups</a>)查询，它还提供了空间字段<a href="https://docs.djangoproject.com/en/1.7/ref/contrib/gis/model-api/#django.contrib.gis.db.models.GeometryField">GeometryField</a>的查询。</p><p>可以在<a href="https://docs.djangoproject.com/en/1.7/ref/contrib/gis/db-api/#spatial-lookups-intro">这里</a>查看空间查询介绍</p><p>下面Django对不同数据库 空间查询操作支持统计表：</p><pre><code>    Lookup Type            PostGIS    Oracle    MySQL [7]    SpatiaLite    bbcontains            X                X             X    bboverlaps            X                 X             X    contained            X                 X             X    contains            X         X        X             X    contains_properly    X                   coveredby            X         X              covers                X         X              crosses                X                               X    disjoint            X         X        X             X    distance_gt            X         X                      X    distance_gte        X         X                      X    distance_lt            X         X                      X    distance_lte           X         X                      X    dwithin                X         X              equals                X         X        X             X    exact                X         X        X             X    intersects            X         X        X             X    overlaps            X         X        X             X    relate                X         X                     X    same_as                X         X        X             X    touches                X         X        X             X    within                X         X        X             X    left                X                   right                X                   overlaps_left       X                   overlaps_right      X                   overlaps_above      X                   overlaps_below      X                   strictly_above      X                   strictly_below      X               </code></pre><p>####我这里只关注一下对mysql的空间操作支持</p><blockquote><p>按我们的需要我们选用 <code>within</code></p></blockquote><ol><li><p>bbcontains</p><p> 支持：<code>PostGIS</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p> 查询数据库中空间数据的bbox包含在指定的空间bbox内的数据。</p><pre><code> 数据库         操作   PostGIS       poly ~ geom MySQL         MBRContains(poly,geom) SpatiaLite    MbrContains(poly,geom)</code></pre></li></ol><ol start="2"><li><p>bboverlaps</p><p> 支持：<code>PostGIS</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p> 查询数据库中空间数据的bbox与指定的空间bbox相交的数据。</p><pre><code> 数据库         操作   PostGIS       poly &amp;&amp; geom MySQL         MBROverlops(poly,geom) SpatiaLite    MbrOverlops(poly,geom)</code></pre></li><li><p>contained</p><p> 支持：<code>PostGIS</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p> 查询数据库中空间数据的bbox完全包含指定的空间bbox的数据。</p><pre><code> 数据库         操作   PostGIS       poly @ geom MySQL         MBRWithin(poly,geom) SpatiaLite    MbrWithin(poly,geom)</code></pre></li><li><p>contains</p><p> 支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p> Example:</p><pre><code> Zipcode.objects.filter(poly__contains=geom)</code></pre><p> 查询数据库中空间数据包含指定的空间图形的数据。</p><pre><code> 数据库         操作   PostGIS       ST_Contains(poly, geom) Oracle        SDO_CONTAINS(poly, geom) MySQL         MBRContains(poly, geom) SpatiaLite    Contains(poly, geom)</code></pre></li></ol><ol start="5"><li><p>disjoint</p><p> 支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p> Example:</p><pre><code> Zipcode.objects.filter(poly__disjoint=geom)</code></pre><p> 查询数据库中与指定的空间图形相离的空间数据。</p><pre><code> 数据库         操作   PostGIS       ST_Disjoint(poly, geom) Oracle        SDO_GEOM.RELATE(poly, geom) MySQL         MBRDisjoint(poly, geom) SpatiaLite    Disjoint(poly, geom)</code></pre></li><li><p>equals</p><p> 支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p></li><li><p>exact，same_as</p><p> 支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p></li><li><p>intersects</p><p> 支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p> 查询数据库中与指定的空间图形相交的空间数据。</p><p> Example:</p><pre><code>     Zipcode.objects.filter(poly__intersects=geom)</code></pre></li></ol><pre><code>        数据库         操作          PostGIS       ST_Intersects(poly, geom)        Oracle        SDO_OVERLAPBDYINTERSECT(poly, geom)        MySQL         MBRIntersects(poly, geom)        SpatiaLite    Intersects(poly, geom)</code></pre><ol start="9"><li><p>overlaps</p><p> 支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p></li></ol><ol start="10"><li><p>touches</p><p>支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p>Example:</p><pre><code>    Zipcode.objects.filter(poly__touches=geom)</code></pre><p>查询与指定的空间几何图形相接的数据。</p><pre><code>    数据库         操作      PostGIS       ST_Touches(poly, geom)    Oracle        SDO_TOUCH(poly, geom)    MySQL         MBRTouches(poly, geom)    SpatiaLite    Touches(poly, geom)</code></pre></li><li><p>within</p><p>支持：<code>PostGIS</code>,<code>Oracle</code>,<code>MySQL</code>,<code>SpatiaLite</code></p><p>Example:</p><pre><code>    Zipcode.objects.filter(poly__within=geom)</code></pre><p>查询包含在指定的空间几何图形中的数据。</p><pre><code>    数据库         操作      PostGIS       ST_Within(poly, geom)    Oracle        SDO_INSIDE(poly, geom)    MySQL         MBRWithin(poly, geom)    SpatiaLite    Within(poly, geom)</code></pre></li></ol><blockquote><p>现在知道了要用 within 来查询数据，另一个问题来了，如何生成半径大小为R中心坐标为(x,y)的geom呢。</p></blockquote><p>####创建空间几何图形</p><p>可以通过多种方式创建<a href="https://docs.djangoproject.com/en/1.7/ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry">GeosGeometry</a>。第一种方法，就是通过一些参数直接实例化。</p><ul><li>下面是分别通过WKT,HEX,WKB和GeoJSON方式直接创建 Geometry 的方法：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: pnt = GEOSGeometry(<span class="string">&#x27;POINT(5 23)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: pnt = GEOSGeometry(<span class="string">&#x27;010100000000000000000014400000000000003740&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: pnt = GEOSGeometry(buffer(<span class="string">&#x27;\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x007@&#x27;</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: pnt = GEOSGeometry(<span class="string">&#x27;&#123; &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ 5.000000, 23.000000 ] &#125;&#x27;</span>) <span class="comment"># GeoJSON   </span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><ul><li>另一种方式就是通过特定类型的空间几何对象的构造器来进行创建该类型的Geometry实例</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">In [<span class="number">34</span>]: <span class="keyword">from</span> django.contrib.gis.geos <span class="keyword">import</span> Point</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: pnt = Point(<span class="number">5</span>,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: pnt</span><br><span class="line">Out[<span class="number">36</span>]: &lt;Point object at <span class="number">0x10735bb50</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>最后一种方法就是通过 <a href="https://docs.djangoproject.com/en/1.7/ref/contrib/gis/geos/#django.contrib.gis.geos.fromstr">fromstr()</a>和 <a href="https://docs.djangoproject.com/en/1.7/ref/contrib/gis/geos/#django.contrib.gis.geos.fromfile">fromfile</a> 工厂方法来创建Geometry实例。它们分别接收字符串或文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">37</span>]: <span class="keyword">from</span> django.contrib.gis.geos <span class="keyword">import</span> fromstr,fromfile</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: pnt = fromstr(<span class="string">&#x27;POINT(5 23)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: pnt = fromfile(<span class="string">&#x27;/path/to/pnt.wkt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: pnt = fromfile(open(<span class="string">&#x27;/path/to/pnt.wkt&#x27;</span>))</span><br></pre></td></tr></table></figure><p>####实现查询周边几何点的功能</p><blockquote><p>通过上面的学习，在Django中实现mysql数据的周边查询只能通过模糊的查询，<br>我们这里通过构建一个包络框进行模糊查询：</p></blockquote><ul><li>构建一个包络框</li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.gis.geos <span class="keyword">import</span> (<span class="type">Polygon</span>,<span class="type">Point</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">point</span> = <span class="type">Point</span>(<span class="number">130</span>,<span class="number">39</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="type">point</span>.buffer(degree)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>进行within查询</li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">AppPoint</span>.</span></span>objects.filter(point__within=buffer)</span><br></pre></td></tr></table></figure><ul><li>问题</li></ul><p>这里给的半径通常是米为km，但是这个构建buffer的方法需要的参数是一个度。</p><pre><code>degree=l*180/(math.pi*6371)</code></pre><p>##测试方法和数据</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">get_point</span><span class="params">(<span class="built_in">point</span>,r)</span>:</span></span><br><span class="line"><span class="function">    EARTH_R</span>=<span class="number">6378.137</span></span><br><span class="line">    <span class="built_in">buffer</span> = <span class="built_in">point</span>.<span class="built_in">buffer</span>(r*<span class="number">180</span>/(math.pi*EARTH_R))</span><br><span class="line">    aps=AppPoint.objects.filter(point__within=<span class="built_in">buffer</span>)</span><br><span class="line">    <span class="keyword">for</span> ap in aps:</span><br><span class="line">        <span class="built_in">print</span> ap.<span class="built_in">point</span>.json,(math.pi*EARTH_R*ap.<span class="built_in">point</span>.distance(<span class="built_in">point</span>)/<span class="number">180</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>其中点与点间的距离方法distance在django中解释为：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Returns the distance between the closest points on this Geometry</span><br><span class="line"><span class="keyword">and</span> the other. Units will be <span class="keyword">in</span> those of the coordinate<span class="built_in"> system </span>of</span><br><span class="line">the Geometry.</span><br></pre></td></tr></table></figure><p>下面是测试数据：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">b</span> <span class="string">=</span> [[<span class="number">116.27497</span>,<span class="number">39.95708</span>,<span class="number">2573</span>],</span><br><span class="line">[<span class="number">116.48103</span>,<span class="number">39.96657</span>,<span class="number">4292</span>],</span><br><span class="line"><span class="string">...</span></span><br><span class="line">[<span class="number">116.13621</span>,<span class="number">39.92686</span>,<span class="number">528</span>],</span><br><span class="line">[<span class="number">116.39494</span>,<span class="number">39.87986</span>,<span class="number">138</span>],</span><br><span class="line">[<span class="number">116.389</span>,<span class="number">39.8799</span>,<span class="number">2151</span>],</span><br><span class="line">[<span class="number">116.4858</span>,<span class="number">39.9361</span>,<span class="number">4709</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">创建数据：</span></span><br><span class="line"><span class="attr">for b in a:</span>                                   </span><br><span class="line">    <span class="string">AppPoint.objects.create(description=b.count,point=Point(b[0],b[1]))</span></span><br><span class="line">    </span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"> <span class="string">get_point(Point(116.4,39.8),8)</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.4214</span>, <span class="number">39.85925</span> ] &#125; <span class="number">7.01270604176</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.33663</span>, <span class="number">39.79076</span> ] &#125; <span class="number">7.1289114023</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.43555</span>, <span class="number">39.80307</span> ] &#125; <span class="number">3.97213681829</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.42803</span>, <span class="number">39.86696</span> ] &#125; <span class="number">8.08069287815</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.41776</span>, <span class="number">39.8526</span> ] &#125; <span class="number">6.18016458489</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.41467</span>, <span class="number">39.86627</span> ] &#125; <span class="number">7.5557334976</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.37254</span>, <span class="number">39.82765</span> ] &#125; <span class="number">4.33799658047</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.36128</span>, <span class="number">39.85648</span> ] &#125; <span class="number">7.62292984489</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.41574</span>, <span class="number">39.80051</span> ] &#125; <span class="number">1.75308830872</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.40075</span>, <span class="number">39.81592</span> ] &#125; <span class="number">1.77417182449</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.45339</span>, <span class="number">39.83341</span> ] &#125; <span class="number">7.01111345466</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.39799</span>, <span class="number">39.84366</span> ] &#125; <span class="number">4.86535674431</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.38116</span>, <span class="number">39.85952</span> ] &#125; <span class="number">6.94973919946</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.3385</span>, <span class="number">39.82914</span> ] &#125; <span class="number">7.57577153659</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.3777</span>, <span class="number">39.86207</span> ] &#125; <span class="number">7.34200348969</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.39454</span>, <span class="number">39.86518</span> ] &#125; <span class="number">7.28121719546</span></span><br><span class="line">&#123; <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;:</span> [ <span class="number">116.41095</span>, <span class="number">39.84127</span> ] &#125; <span class="number">4.75311465912</span></span><br></pre></td></tr></table></figure><p>##总结</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">from</span> django.contrib.gis.geos <span class="keyword">import</span> (<span class="type">Polygon</span>,<span class="type">Point</span>)</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="type">point</span> = <span class="type">Point</span>(<span class="number">130</span>,<span class="number">39</span>)</span><br><span class="line">    EARTH_R=<span class="number">6378.137</span></span><br><span class="line">    buffer = <span class="type">point</span>.buffer(r*<span class="number">180</span>/(math.pi*EARTH_R))</span><br><span class="line">    aps=AppPoint.objects.<span class="keyword">filter</span>(point__within=buffer)</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">##新的问题</span><br><span class="line">###上面这种方法得到的是没有排序的结果，目前要进行由近到远进行排序，通过</span><br><span class="line">`SQRT(POW( ABS( X(<span class="keyword">Location</span>) – X(@center)), <span class="number">2</span>) + POW(ABS(Y(<span class="keyword">Location</span>) – Y(@center)), <span class="number">2</span>))`得到一个大致的距离因子，然后根据这个进行排序。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>queryset.extra(select={‘distance_factor’: “SQRT(POWER(ABS(X(point) - “+str(x)+”),2) + POWER(ABS(Y(point) - “+str(y)+”),2))”}).order_by(‘distance_factor’)</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">###在线上遇到了下面的问题：</span><br></pre></td></tr></table></figure><p>rps[0].point.distance(rps[1].point)<br>python: GeometryComponentFilter.cpp:35: virtual void geos::geom::GeometryComponentFilter::filter_ro(const geos::geom::Geometry*): Assertion `0’ failed.</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">线上直接使用<span class="selector-tag">distance</span>时报错。</span><br><span class="line"></span><br><span class="line">然后比较了一下<span class="selector-tag">python</span>的<span class="selector-tag">distance</span>得到的值，其实是和`<span class="selector-tag">SQRT</span>(POW( ABS( X(Location) – X(<span class="variable">@center</span>)), <span class="number">2</span>) + POW(ABS(Y(Location) – Y(<span class="variable">@center</span>)), <span class="number">2</span>))`得到的值是一样的。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(‘…..python’, 0.0071949078163964595)<br>(‘self’, 0.0071949078163964595)</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">故处些最终到终心点的距离使用了 <span class="code">`distance_factor`</span> 来代替。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">##注意</span></span><br><span class="line"></span><br><span class="line"><span class="section">###[<span class="string">经纬度坐标系采用GCJ-2标准,对于Google,高德地图和腾讯地图可以直接使用</span>](<span class="link">http://wangsheng2008love.blog.163.com/blog/static/78201689201461674727642/</span>)</span></span><br><span class="line"><span class="section">###地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">####下面是通过html5获取坐标，然后转化后的当前我的位置截图</span></span><br><span class="line">![<span class="string">loading</span>](<span class="link">/images/project/xy_trans_position.png =x400</span>)</span><br><span class="line"><span class="section">####腾讯高德对其转化都有现成的实现</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    var a = 6378245.0    var ee = 0.00669342162296594323    function out_of_china(lat,lon)&#123;        if (lon &lt; 72.004 || lon &gt; 137.8347)            return true        if (lat &lt; 0.8293 || lat &gt; 55.8271)            return true    &#125;    function transformlat(x, y) &#123;        var result = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x))        result += (20.0 * Math.sin(6.0 * Math.PI * x) + 20.0 * Math.sin(2.0 * Math.PI * x)) * 2.0 / 3.0        result += (20.0 * Math.sin(Math.PI * y) + 40.0 * Math.sin(Math.PI / 3.0 * y)) * 2.0 / 3.0        result += (160.0 * Math.sin(Math.PI / 12.0 * y) + 320.0 * Math.sin(Math.PI / 30.0 * y)) * 2.0 / 3.0        return result    &#125;    function transformlon(x, y) &#123;        var result = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x))        result += (20.0 * Math.sin(6.0 * Math.PI * x) + 20.0 * Math.sin(2.0 * Math.PI * x)) * 2.0 / 3.0        result += (20.0 * Math.sin(Math.PI * x) + 40.0 * Math.sin(Math.PI / 3.0 * x)) * 2.0 / 3.0        result += (150.0 * Math.sin(Math.PI / 12.0 * x) + 300.0 * Math.sin(Math.PI / 30.0 * x)) * 2.0 / 3.0        return result    &#125;    function wgs2gcj(wgslat, wgslon) &#123;        if (out_of_china(wgslat, wgslon)) &#123;            return [wgslat, wgslon]        &#125;        var lat = transformlat(wgslon - 105.0, wgslat - 35.0)        var lon = transformlon(wgslon - 105.0, wgslat - 35.0)        var rad_lat = Math.PI / 180.0 * wgslat       var  magic = Math.sin(rad_lat)        magic = 1 - ee * magic * magic        var sqrt_magic = Math.sqrt(magic)        lat = (180.0 * lat) / (Math.PI * (a * (1 - ee)) / (magic * sqrt_magic))        lon = (180.0 * lon) / (Math.PI * a * Math.cos(rad_lat) / sqrt_magic)        var chnlat = wgslat + lat        var chnlon = wgslon + lon        return [chnlat, chnlon]    &#125;</code></pre><pre><code>##参考&gt;0. [JAVSCRIPT Math](http://www.w3school.com.cn/jsref/jsref_obj_math.asp)&gt;1. [MySQL空间数据库–查询点到多点间的最短路径](http://www.javabloger.com/article/mysql-spatial-database.html)&gt;2. [W3 Geolocation API Specification](http://www.w3.org/TR/geolocation-API/#position_interface)&gt;3. [关于百度map和高德map，关于map坐标系](http://wangsheng2008love.blog.163.com/blog/static/78201689201461674727642/)&gt;4. [iOS 火星坐标相关整理及解决方案汇总](http://it.taocms.org/04/507.htm)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GIS </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 ionic 实例 Trendicity</title>
      <link href="2015/08/31/ionic%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20Trendicity%20%E9%A1%B9%E7%9B%AE%E5%AE%9E%E4%BE%8B/"/>
      <url>2015/08/31/ionic%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20Trendicity%20%E9%A1%B9%E7%9B%AE%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>现在在你的工具箱中有很多工具，让我们来谈谈开发一个真正的手机应用。Instagram是一个非常受欢迎的照片分享应用。使这些照片更加有趣并且展示一些Ionic功能，我们将会涉及到一个我们开发应用，它叫 Trendicity。这个应用以多种方式获取和展示Instagram的照片。</p><p>一种方式就是根据照片的位置在地图上进行展示。另一种方式就是将照片展示在可以滑动的卡片上，并且用户可以标示出喜欢的照片。最后一种方式，我们以列表的形式展示照片和更多有关照片信息。</p><p>这个完整的<a href="https://github.com/trendicity/trendicity">Trendicity</a>应用可以在Github上找到。你可以下载它并在你的浏览器或者设备或仿真器上运行。</p><p>Trendicity应用是作为一个side menu 应用建成的，可是，它也很好的结合了tabs方式。我们将会从几方面去讨论这个应用。Side Menu和用户的操作选项，搜索功能，和加载服务的使用和（地图示图，卡片视图和列表视图）tabs。</p><p>我们通过构建这个应用来深入了解代码。</p><p>##Side menu</p><p>侧边菜单由以下菜单项构成：</p><ul><li>HOME</li><li>Favorites</li><li>About</li><li>Login/Logout</li></ul><p>下面是Trendicity侧边菜单的截图。关于怎么样实现侧边菜单和路由时一直带着它的细节，请看第四章：实现侧边菜单和配置路由。</p><p><img src="/images/ionic/side_menu.png" alt="侧边菜单"></p><p>##Home</p><p>HOME菜单选项点击时会调用HomtCtrl和展示地图Tab。地图上将会展示附近的一些图片。</p><p><img src="/images/ionic/photo_on_map.png" alt="侧边菜单"></p><p>##Favorites</p><p>大体上，Trendicity应用的收藏功的实现有三部分组成：<code>FavoritesService</code>,<code>FavoritesCtrl</code>和<code>favorites.html</code>模版。</p><p>收藏功能有两种类型的照片会进行收存放：用户生成的和自己收藏的。前者是通过add-favorite模态窗口添加的，后者是通过地址位置直接关联到Instagram相片的。</p><p>这一部分，我们将会实际操作创建和删除收藏，看一下收藏功能是如何实现及<code>FavoritesCtrl</code>和<code>FavoritesServices</code>之间是如何交互的。</p><p>###收藏列表</p><p>收藏数据在一个列表中展现。当用户进入这个视图，会触发<code>$ionicView.enter</code>事件，这个视图中的数据将自动刷新：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$scope</span>.<span class="symbol">$o</span>n(<span class="string">&#x27;$ionicView.enter&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">// Update favorites</span></span><br><span class="line">   <span class="symbol">$scope</span>.favorites = FavoritesService.getFavorites();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>列表中的每一条收藏条目点击时都会在此相片的地理位置为中心定位到地图上。下面是收藏视图中展示收藏数据的代码：</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ion-item</span> <span class="attr">class</span>=<span class="string">&quot;item-icon-right&quot;</span></span></span></span><br><span class="line"><span class="xml">    ng-repeat=&quot;favorite in favorites track by favorite.id&quot; ui-sref=&quot;app.home.map(</span><span class="template-variable">&#123; latitude: favorite.lat, longitude: favorite.lng &#125;</span><span class="xml">)&quot;&gt;</span></span><br><span class="line"><span class="xml">    \</span><span class="template-variable">&#123;\&#123; favorite.city \&#125;</span><span class="xml">\&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon ion-ios-arrow-forward icon-accessory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ion-option-button</span> <span class="attr">class</span>=<span class="string">&quot;button-assertive&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;deleteFavorite(favorite)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Remove</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ion-option-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span>  </span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic/favorites_list.png" alt="收藏列表"></p><p>添加一些友好的提示信息，当没有收藏信息要展示时，做如下操作：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Display message when no favorites exist --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vertical-center-container&quot;</span> <span class="attr">ng-show</span>=<span class="string">&quot;!favorites.length&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vertical-center text-center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon ion-heart-broken assertive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Looks like you haven&#x27;t favorited anything yet...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/ionic/no_favorited.png" alt="收藏列表"></p><p>###添加收藏</p><p>为了保持代码的可维护性，我们决定将开发添加收藏功能的的代码进行解藕合。因此，我们将它拆分成了 FavoritesCtrl,FavoritesService,add-favorite.html模版，和add-favorite-form指令，让它们组合到一起完成这个功能。</p><p>添加收藏的动作，从点击右上角的’+’号打开一个添加收藏的模态窗口。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-nav-buttons</span> <span class="attr">side</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-icon ion-ios-plus-empty&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;showModalAddFavorite()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-nav-buttons</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击这个按钮会触发FavoriteCtrl的showModalAddFavorite()方法，它会打开添加收藏的模态窗口。</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$scope</span>.showModalAddFavorite = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="symbol">$scope</span>.modalAddFavorite.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模态窗口中的内容都是有add-favorite-form指令负责生成。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add-favorite-form</span> <span class="attr">on-submit</span>=<span class="string">&quot;addFavorite(favorite)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">add-favorite-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![添加收藏](/images/ionic/add_favorite.png =300x)</p><p>addFavoriteForm指令会在其内部处理onSubmit。当这个表单填写的没有问题提交时，会调用addFavoriteForm中的submit方法。也就是说，一旦表单没有问题，指令会调用submit方法，通过调用他的on-submit属性。</p><p>现在，指今如何知道去哪里找到addFavorite(favorite)方法呢？<br>当我们初始化模态时，会将FavoriteCtrl的作用域一并传入。因此，这个模态的作用域是继承自它的父作用域（即收藏视图的作用域）；</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$io</span>nicModal.fromTemplateUrl(<span class="string">&#x27;templates/modals/add-favorite.html&#x27;</span>, &#123;</span><br><span class="line">   scope: <span class="symbol">$scope</span></span><br><span class="line"> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">modal</span>) </span>&#123;</span><br><span class="line">   <span class="symbol">$scope</span>.modalAddFavorite = modal;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，addFavorite()方法已经与控制器的作用域相关联：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add a new favorite using the service</span></span><br><span class="line"><span class="symbol">$scope</span>.addFavorite = <span class="function"><span class="keyword">function</span>(<span class="params">favorite</span>) </span>&#123;</span><br><span class="line">  FavoritesService.add(favorite).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="symbol">$scope</span>.favorites = FavoritesService.getFavorites();</span><br><span class="line">    <span class="symbol">$scope</span>.hideModalAddFavorite();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当调用FavoritesService’s add()方法后，将会更新收藏列表并具隐藏add-favorite模态。</p><p>###添加收藏表单指令</p><p>addFavoriteForm指令使用templates/directives/add-favorite-form.html作为它的模版。这个视图包含了表单的基础验证：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&lt;form name=<span class="string">&quot;formAddFavorite&quot;</span> no-validate&gt;</span><br><span class="line">  &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item item-input item-stacked-label&quot;</span> ng-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123; &#x27;item-error&#x27;: formAddFavorite.$attempt &amp;&amp; formAddFavorite.city.$invalid, &#x27;item-valid&#x27;: formAddFavorite.city.$valid &#125;&quot;</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-label&quot;</span>&gt;<span class="type">City</span>&lt;/span&gt;</span><br><span class="line">    &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;city&quot;</span> ng-model=<span class="string">&quot;favorite.city&quot;</span> placeholder=<span class="string">&quot;Dallas&quot;</span> required=<span class="string">&quot;required&quot;</span>&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item item-input item-stacked-label&quot;</span> ng-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123; &#x27;item-error&#x27;: formAddFavorite.$attempt &amp;&amp; formAddFavorite.region.$invalid, &#x27;item-valid&#x27;: formAddFavorite.region.$valid &#125;&quot;</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-label&quot;</span>&gt;<span class="type">State</span> or <span class="type">Country</span>&lt;/span&gt;</span><br><span class="line">    &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;region&quot;</span> ng-model=<span class="string">&quot;favorite.region&quot;</span> placeholder=<span class="string">&quot;TX&quot;</span> required=<span class="string">&quot;required&quot;</span>&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;button button-full button-positive&quot;</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">&quot;button&quot;</span> ng-click=<span class="string">&quot;submit()&quot;</span>&gt;<span class="type">Add</span>&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>“Add”按钮会调用命令的submit()方法，会添加一个$attempt字段到表单中，标示用户已经最近已经提交了一次这个表单。这个字段被用来高亮不合法和没有输入的输入选项。</p><p><img src="/images/ionic/invalid_form.png" alt="有问题的表单"></p><p>最后，当这个表单验证通过后，指令会通过模态中的一个属性调用onSubmit()方法：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$scope</span>.submit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="symbol">$scope</span>.formAddFavorite.<span class="symbol">$attempt</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="symbol">$scope</span>.formAddFavorite.<span class="symbol">$valid</span>) &#123;</span><br><span class="line">         <span class="symbol">$scope</span>.onSubmit(&#123; <span class="attr">favorite</span>: <span class="symbol">$scope</span>.favorite &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><p>![合法的表单](/images/ionic/valid_form.png =300x)</p><p>而且，在这个模态关闭时，其中添加收藏的表单会自动清空。它是通过监听modal.hidden事件来进行实现的：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$scope</span>.<span class="symbol">$o</span>n(<span class="string">&#x27;modal.hidden&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Clear form</span></span><br><span class="line">       <span class="symbol">$scope</span>.favorite = <span class="literal">null</span>;</span><br><span class="line">       <span class="symbol">$scope</span>.formAddFavorite.<span class="symbol">$attempt</span> = <span class="literal">false</span>;</span><br><span class="line">       <span class="symbol">$scope</span>.formAddFavorite.<span class="symbol">$set</span>Pristine(<span class="literal">true</span>);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>###删除收藏</p><p>当你滑动收藏条目时就可以进行删除收藏操作。</p><p>![删除收藏](/images/ionic/remove_operate.png =300x)</p><p>点击删除按钮，将会调用FavoritesCtrl的deleteFavorite()方法删除当前收藏的引用。在控制器这边，这个方法会调用FavoritesService的delete方法，将收藏列表中的当前操作的收藏项删除。</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Delete a favorite using the service and update scope var</span></span><br><span class="line"><span class="symbol">$scope</span>.deleteFavorite = <span class="function"><span class="keyword">function</span> (<span class="params">favorite</span>) </span>&#123;</span><br><span class="line">  <span class="symbol">$scope</span>.favorites = FavoritesService.delete(favorite);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###收藏服务</p><p>FavoritesService是用标准方式来处理Trendicity中与收藏相关的服务。它将收藏相关逻辑与Trendicity其它功能隔离开。用这种方式的另一个好处就是FavoritesService服务可以在任何一个 Controller中使用。像我们在列表视图中实现的那样,这个服务被用来收藏自己喜欢的地理位置。</p><p>这个服务提供了三个方法：add(),getFavorites()和delete()</p><p>正如它们的名字叫的那样，getFavorites()会直接返回当前本地的所有收藏。</p><p>添加收藏时的处理方式根据收藏的类型而定。对于人们经常收藏的城市或区域，这个类型的收藏会用GeolocationService的addressToPosition()方法获取地理坐标。这个实现我们在稍后章节中会进行讨论。当获取到了地址经纬度，这个收藏会统一格式化一种结构存储到本地的收藏数组中。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var<span class="built_in"> address </span>= favorite.city + <span class="string">&#x27;, &#x27;</span> + favorite.region;</span><br><span class="line">    return GeolocationService.addressToPosition(address).then(function (data) &#123;</span><br><span class="line">      var newLocation = &#123;</span><br><span class="line">        id: favoritesId,</span><br><span class="line">        city: address,</span><br><span class="line">        lat: data.latitude,</span><br><span class="line">        lng: data.longitude</span><br><span class="line">      &#125;;</span><br><span class="line">      favorites.push(newLocation);</span><br><span class="line">      localStorageService.<span class="builtin-name">set</span>(<span class="string">&#x27;Favorites&#x27;</span>, favorites);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>针对具体的收藏，收藏会在列表视图的控制器中进行合适的格式化处理，和用户添加的收藏的处理过程相信，存放到本地收藏数据中。</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Location</span> = &#123;</span><br><span class="line">   id: <span class="type">favoritesId</span>,</span><br><span class="line">   city: <span class="type">address</span>,</span><br><span class="line">   lat: <span class="type">data</span>.latitude,</span><br><span class="line">   lng: <span class="type">data</span>.longitude</span><br><span class="line">&#125;;</span><br><span class="line">favorites.push(<span class="keyword">new</span><span class="type">Location</span>);</span><br><span class="line">localStorageService.<span class="keyword">set</span>(<span class="string">&#x27;Favorites&#x27;</span>, favorites);</span><br></pre></td></tr></table></figure><p>为了确保准确定位，这个服务为第一个收藏生成了一个对应的ID。每一个id都是根据当前系统的时间生成的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">favorite</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> favorites = <span class="built_in">this</span>.getFavorites() || [];</span><br><span class="line">   <span class="keyword">var</span> favoritesId =  <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除收藏的工作通过使用lodash的remove()方法实现。删除了收藏后，更新本地收藏并将最新的收藏列表返回。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DELETE</span></span><br><span class="line"><span class="keyword">this</span>.delete = function (favorite) &#123;</span><br><span class="line">  <span class="keyword">var</span> favorites = <span class="keyword">this</span>.getFavorites();</span><br><span class="line">  _.remove(favorites, favorite); <span class="comment">// jshint ignore:line</span></span><br><span class="line">  localStorageService.<span class="keyword">set</span>(<span class="string">&#x27;Favorites&#x27;</span>, favorites);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getFavorites();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>##About</p><p>‘About’菜单选项点击时会滑出界面，包含一些应用的介绍信息。这个页面会在应用程序第一次加载时显示。</p><p><img src="/images/ionic/about_1.png"></p><p><img src="/images/ionic/about_2.png"></p><p><img src="/images/ionic/about_3.png"></p><p>##Login/Logout</p><p>当用户还没有登陆要登陆时，点击菜单的’Login’时会显示登陆界面。一旦用户登陆后，再点开菜单，’Logout’选项将出展示。</p><p>下面是www/templates/menu.html部分代码片断，展示了如何用ng-show和ng-hide实现上述功能。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;ion-<span class="built_in">item</span> menu-close <span class="built_in">class</span>=<span class="string">&quot;item-icon-left&quot;</span> ng-click=<span class="string">&quot;login()&quot;</span> ng-hide=<span class="string">&quot;isLoggedIn()&quot;</span>&gt;</span><br><span class="line">    &lt;i <span class="built_in">class</span>=<span class="string">&quot;icon ion-log-in&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">    Login</span><br><span class="line">&lt;/ion-<span class="built_in">item</span>&gt;</span><br><span class="line">&lt;ion-<span class="built_in">item</span> menu-close <span class="built_in">class</span>=<span class="string">&quot;item-icon-left&quot;</span> ng-click=<span class="string">&quot;logout()&quot;</span> ng-show=<span class="string">&quot;isLoggedIn()&quot;</span>&gt;</span><br><span class="line">    &lt;i <span class="built_in">class</span>=<span class="string">&quot;icon ion-log-out&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">    Logout</span><br><span class="line">&lt;/ion-<span class="built_in">item</span>&gt;</span><br></pre></td></tr></table></figure><p>你可以在www/controllers/app.js文件中找到isLoggedIn,login和logout方法：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Determine if the user is logged into Instagram</span></span><br><span class="line"><span class="symbol">$scope</span>.isLoggedIn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> InstagramService.isLoggedIn();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open the login modal</span></span><br><span class="line"><span class="symbol">$scope</span>.login = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="symbol">$scope</span>.loginModal.show();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform the logout action when the user invokes the logout link</span></span><br><span class="line"><span class="symbol">$scope</span>.logout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  InstagramService.logout();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>isLoggedIn方法会调用InstagramService的isLoggedIn()方法来获取当前登陆状态。退出方法会调用InstagramService的logout()方法来进行登记退出动作。我们会在第八章讲解更多关于InstagramService相关的内容。</p><p>为了做更多和Instagram相关并有趣的事情，我们需要用户登陆到Instagram。为了实现这个，我们使用一个$ionicModal显示为什么让用户登陆的简要的描述。当选择了登陆选项，login方法被调用，用户会看到一个登陆模态。</p><p>![登陆截图](/images/ionic/login.png =300x)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create the login modal that we will use later</span></span><br><span class="line">$ionicModal.fromTemplateUrl(<span class="string">&#x27;templates/modals/login.html&#x27;</span>, &#123;</span><br><span class="line">  scope: $scope,</span><br><span class="line">  animation: <span class="string">&#x27;slide-in-up&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">modal</span>) </span>&#123;</span><br><span class="line">  $scope.loginModal = modal;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Triggered in the login modal to close it</span></span><br><span class="line">$scope.closeLogin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  InstagramService.loginCancelled();</span><br><span class="line">  $scope.loginModal.hide();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cleanup the modal when we&#x27;re done with it!</span></span><br><span class="line">$scope.$on(<span class="string">&#x27;$destroy&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $scope.loginModal.remove();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通常，登陆页面像下面截图中展示一样。但是由于我们要与Instagram集成，我们需要OAuth的方式进行登陆。</p><p><img src="/images/ionic/normal_login.png" alt="登陆截图"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-modal-view</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-header-bar</span> <span class="attr">class</span>=<span class="string">&quot;bar-transparent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-light button-clear button-icon button-right icon ion-close&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;closeLogin()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">scroll</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vertical-center-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vertical-center&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row light-bg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>Login with Instagram to<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon ion-heart assertive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Like Posts<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon ion-images&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> View Your Feed<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon ion-star energized&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> View Your Liked Posts<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-block button-positive button-outline icon-left ion-social-instagram-outline&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;loginToInstagram()&quot;</span>&gt;</span>Login with Instagram<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-modal-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用Oauth代替传统的登陆方式，让用户知道一旦登陆到了Instagram,他们能做哪些事情。一旦用户确定登陆到Instagram,我们会调用www/controllers/app.js中的loginToInstagram方法：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Perform the OAuth login to Instagram</span></span><br><span class="line"><span class="symbol">$scope</span>.loginToInstagram = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="symbol">$scope</span>.loginModal.hide();</span><br><span class="line">  InstagramService.login();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个方法将会用InAppBrowser Cordova插件执行OAuth授权。我们会使用这个插件打开一个登陆到Instagram窗口。Trendicity应用没有对用户名和密码进行处理。</p><p>![Instagram登陆](/images/ionic/instagram_login.png =300x)</p><p>##Search</p><p>搜索图标就是在列表或卡片视图的右上角的放大镜图标。用户有以下查询选项：</p><ul><li>Trending - 按当前在Instagram上帖子的受欢迎程序进行排序。</li><li>Nearby - 当前用户所在位置1KM范围内发布的帖子。</li><li>My Feed - 当前用户提供给Instagram的信息。</li><li>My Liked Posts -当前用户喜欢的帖子。</li></ul><p>![search](/images/ionic/search.png =300x)</p><p>在HomeCtrl中，我们设置了查询功能。为了关注搜索功能，下面代码进行稍微的压缩。</p><p>首先，我们定义了一些作用域变量来保存帖子和查询变量。我们使用了两个javascript对象来存放，所以当值发生变化时，对象不会丢失。</p> <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$scope</span>.model = PostsService.getModel();</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$scope</span>.search = &#123;value:POST_TYPE.NEARBY&#125;;</span></span><br></pre></td></tr></table></figure><p> 接下来，我们设置$scope.getPosts方法，它将会根据查询值决定哪些查询方法会被调用。</p> <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$scope.getPosts = <span class="keyword">function</span>(value) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value<span class="operator"> === </span>POST_TYPE.TRENDING) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">PostsService</span>.</span></span>find<span class="constructor">PopularPosts()</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value<span class="operator"> === </span>POST_TYPE.NEARBY) &#123;</span><br><span class="line">    $scope.find<span class="constructor">NearbyPosts()</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value<span class="operator"> === </span>POST_TYPE.USER_FEED) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">PostsService</span>.</span></span>find<span class="constructor">UserFeedPosts()</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value<span class="operator"> === </span>POST_TYPE.LIKED) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">PostsService</span>.</span></span>find<span class="constructor">LikedPosts()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 通过$watch监听ionicPopover中查询变量值的变化来及时调用$scope.getPosts方法来进行查询。<br> <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$scope</span>.updatePosts = <span class="function"><span class="keyword">function</span> (<span class="params">searchValue</span>) </span>&#123;</span><br><span class="line">  <span class="symbol">$scope</span>.getPosts(searchValue);</span><br><span class="line">  <span class="symbol">$scope</span>.closePopover();</span><br><span class="line">  <span class="symbol">$io</span>nicScrollDelegate.scrollTop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="symbol">$scope</span>.<span class="symbol">$watc</span>h(<span class="string">&#x27;search.value&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Triggered when user changes search value</span></span><br><span class="line">    <span class="symbol">$scope</span>.updatePosts(newValue);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br></pre></td></tr></table></figure></p><p>为了实现ionicPopover,我们首先需要通过 fromTemplateUrl 方法加载 html 模版。我们在这里将其作用域设置为当前作用域。当template加载时，我们将popover设置到这个作用域中，方便我们后面进行调用。</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$io</span>nicPopover.fromTemplateUrl(<span class="string">&#x27;templates/search.html&#x27;</span>, &#123;</span><br><span class="line">  scope: <span class="symbol">$scope</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">popover</span>) </span>&#123;</span><br><span class="line">  <span class="symbol">$scope</span>.popover = popover;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面这段 search.html 模版片段。我们使用了ion-popover-view 组件定义这个视图。我们使用 ion-header-bar 组件展示弹出窗口的标题。我们将 ion-radio 组件列表放到 ion-content 组件中。ion-radio组件选择后，会作为搜索参考值。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-popover-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-radio</span> <span class="attr">ng-model</span>=<span class="string">&quot;search.value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;TR&quot;</span>&gt;</span>Trending<span class="tag">&lt;/<span class="name">ion-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-radio</span> <span class="attr">ng-model</span>=<span class="string">&quot;search.value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;NB&quot;</span>&gt;</span>Nearby<span class="tag">&lt;/<span class="name">ion-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-radio</span> <span class="attr">ng-model</span>=<span class="string">&quot;search.value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UF&quot;</span>&gt;</span>My Feed<span class="tag">&lt;/<span class="name">ion-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-radio</span> <span class="attr">ng-model</span>=<span class="string">&quot;search.value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LP&quot;</span>&gt;</span>My Liked Posts<span class="tag">&lt;/<span class="name">ion-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-popover-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户点击在templates/home.html中定义的导航按钮时 这个 ionicPopover 将会弹出。下面地这段代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-nav-buttons</span> <span class="attr">side</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-icon icon ion-ios-search&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;openPopover($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-nav-buttons</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由上面代码可以看到，当用户点击Search图标时，会调用openPopover方法。我们要做的就是让popover显示。当选择了一个值时，将会调用closePopover方法，在这个方法中，我们要确认popover是已经定义并是打开的。如何条件满足，我们就将其关闭。最后一件事情就是为popover设置一个$destroy监听，当popover被从Dom中移除时调用。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$scope.openPopover = <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>) </span>&#123;</span><br><span class="line">     $scope.popover.show($event);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $scope.closePopover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> ($scope.popover &amp;&amp; $scope.popover.isShown()) &#123;</span><br><span class="line">       $scope.popover.hide();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Cleanup the popover when we&#x27;re done with it!</span></span><br><span class="line">   $scope.$on(<span class="string">&#x27;$destroy&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> ($scope.popover) &#123;</span><br><span class="line">       $scope.popover.remove();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##加载服务</p><p>当照片进行加载时，用户会不知道应用在做什么，我们应该通知用户当前是在加载数据。我们可以使用$ionicLoading组件来完成这件事情。</p><p>![loading](/images/ionic/ionic_loading.png =300x)</p><p>一种聪明的方式就是将 $ionicLoading 组件调用用放在一个HTTP拦截器中。下面是我们压缩后的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.factory(<span class="string">&#x27;TrendicityInterceptor&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">$injector, $q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hideLoadingModalIfNecessary = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $http = $http || $injector.get(<span class="string">&#x27;$http&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> ($http.pendingRequests.length === <span class="number">0</span>) &#123;</span><br><span class="line">        $injector.get(<span class="string">&#x27;$ionicLoading&#x27;</span>).hide();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      request: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">        $injector.get(<span class="string">&#x27;$ionicLoading&#x27;</span>).show();</span><br><span class="line">       ...</span><br><span class="line">      requestError: <span class="function"><span class="keyword">function</span>(<span class="params">rejection</span>) </span>&#123;</span><br><span class="line">        hideLoadingModalIfNecessary();</span><br><span class="line">        <span class="keyword">return</span> $q.reject(rejection);</span><br><span class="line">      &#125;,</span><br><span class="line">      response: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        hideLoadingModalIfNecessary();</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;,</span><br><span class="line">      responseError: <span class="function"><span class="keyword">function</span>(<span class="params">rejection</span>) </span>&#123;</span><br><span class="line">        hideLoadingModalIfNecessary();</span><br><span class="line">        <span class="keyword">return</span> $q.reject(rejection);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当HTTP请求发生时，request方法将会被调用。这里我们显示文字 “Loading”。为了避免依赖死循环，我们需要用Angular $injector组件来获取$ionicLoading服务。</p><p>当HTTP请求出现错误时，这里会调用requestError方法。我们会调用hideLoadingModalIfNecesary()方法，这个方法会检查是否有HTTP请求在被调用，如果没有ionicLoading服务会将自己隐藏。</p><p>当HTTP响应成功时，会调用response方法。之后做的事情与错误时的处理方法类似。</p><p>当HTTP响应错误时，会调用responseError方法。之后做的事情与上面两种情况处理方法类似。</p><p>为了使我们的HTTP拦截器生效，我们需要让AngularJS知道它的存在。一般我们会在www/app.js中做这件事情。这里是我们将拦截器通过$httpProvider添加到拦截器数据中的方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">.config(<span class="function"><span class="keyword">function</span>(<span class="params">$httpProvider</span>) </span>&#123;</span><br><span class="line">  $httpProvider.interceptors.push(<span class="string">&#x27;TrendicityInterceptor&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意，这里我们没有显示真正的提示信息，只是在www/app.js中设置了一个默认信息:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">.<span class="keyword">constant</span>(<span class="string">&#x27;$ionicLoadingConfig&#x27;</span>, &#123;</span><br><span class="line">  <span class="keyword">template</span>: <span class="string">&#x27;&lt;ion-spinner&gt;&lt;/ion-spinner&gt;Loading...&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们在第七章会详细讲解：设计应用。现在，我们只是想告诉你为什么不向ionicLoading show方法中传入信息。</p><p>##Map视图选项</p><p>将当前提交的信息在一个可以交互的地图上展示。一个标记会将用户的位置标在地图上。别的照片按它的位置展现在地图上。当点击这个这个标记时，相关联的照片会展现出来。如果你移动地图到一个位置 ，然后点击右上角的刷新图标；就会加载当前位置周边的照片。若想了解如何实现的，请看第五章：在ionic上集成地图。</p><p>##Card实图选项</p><p>卡片视图将以卡片叠加的方式来展现照片。若用户不喜欢当前的照片，可以将图片向左侧拖拽或划动。如果喜欢的话可以向右侧拖拽或划动。</p><p>这些可以摆动的卡券与非常受欢迎的手机应用Tinder相似。这种类似的实用的功能在Tinder中经常会被用到。</p><p>Drify（该公司负责我们的ionic技术）创始人之一Max Lynch已经创建了一个划动卡片的库，这个库经常会被ionic开发团队引用。在ionic中这样的效果展示通常会比较受欢迎的。</p><p>这个类库用CSS的动画来实现卡片左右拖拽和摆动的效果。他也使用了一个物理样式动化效果库Collide来实现将图片下拉时的动画效果。</p><p>在使用Tinder卡片库之前，一个非常相似的卡片划动效果被创建。我们只是在这里提一下它，在你看到这块时不要好奇。我们在这里没有涉及到这个库。</p><p>###工作文件</p><p>与该视图相关的文件位置在：<code>www/templates/tab-card.html</code>,<code>www/templates/card-intro.html</code>,<code>www/js/controllers/card.js</code>和<code>www/js/directives/no-touch-move.js</code>。</p><p>###popup介绍</p><p>当导航到卡片实图时，我们决定弹出展示说明信息，来向用户介绍和让他们熟悉如何使用卡片的操作。</p><p>我们使用$ionicPopup服务来展示Ionic样式的弹出窗信息。这个服务允许你定义四种类型的弹出窗：</p><ul><li><p>show(选项) ：通过加载的选项设置来完全自定义弹出窗</p></li><li><p>alert(选项) ：带有一个按钮的弹出窗</p></li><li><p>confirm(选项)：带有确认信息和“取消”和“确认”铵钮的弹出窗</p></li><li><p>prompt(选项)：和confirm一样，但是多出一个与用户交互的输入框。</p></li></ul><p>为我们Trendicity应用，自定义了一个弹出窗如：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> Show explanation message</span><br><span class="line"><span class="variable">$ionicPopup</span>.show(&#123;</span><br><span class="line">  title: <span class="string">&#x27;Swipe Cards&#x27;</span>,</span><br><span class="line">  templateUrl: <span class="string">&#x27;templates/popups/card-intro.html&#x27;</span>,</span><br><span class="line">  scope: <span class="variable">$scope</span>,</span><br><span class="line">  buttons: [</span><br><span class="line">    &#123;</span><br><span class="line">      text: <span class="string">&#x27;Next&#x27;</span>,</span><br><span class="line">      type: <span class="string">&#x27;button-positive&#x27;</span>,</span><br><span class="line">      onTap: <span class="keyword">function</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (slidebox.currentIndex() === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="regexp">//</span> Go to <span class="keyword">next</span> slide</span><br><span class="line">          slidebox.<span class="keyword">next</span>();</span><br><span class="line"></span><br><span class="line">          <span class="regexp">//</span> Change button text</span><br><span class="line">          e.target.innerHTML = <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line"></span><br><span class="line">          e.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="regexp">//</span> Close popup</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>弹出窗的信息体部分通过template和templateUrl选项进行定义。我们这里单独定义这个模版文件：templates/card-intro.html</p><p>我们的模版文件中包含一个划动的盒子，可以流畅的在照片与照片之间进行划动。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-slide-box</span> <span class="attr">does-continue</span>=<span class="string">&quot;false&quot;</span> <span class="attr">show-pager</span>=<span class="string">&quot;false&quot;</span> <span class="attr">delegate-handle</span>=<span class="string">&quot;card-intro-slidebox&quot;</span> <span class="attr">ng-init</span>=<span class="string">&quot;disableSlideBox()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-slide</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;full-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/swipe-right.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-slide</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;full-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/swipe-left.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-slide</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-slide-box</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个盒子组件是由AngularJS服务$ionicSlideBoxDelegate生成。这个服务允许你控制这个组件的行为，如划动时的效果和控制是否自动播放。另外当再次渲染这个盒子时调用update()方法。</p><p>我们这里，禁止照片的自动切换和用户划动，而所有的操作只能通过铵钮来进行完成。</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Disable intro slidebox sliding</span></span><br><span class="line">  <span class="symbol">$scope</span>.disableSlideBox = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="symbol">$io</span>nicSlideBoxDelegate.enableSlide(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>弹出窗口提供了一个回调onTap,这里可以让用户去自己做一些事情。如果当前是第一个照片，点击“Next”铵钮，我们通过调用$ionicSlideBoxDelegate.$getByHandle(‘card-intro-slidebox’)实例的next()打开下一张照片,并且修改铵钮的文字为”OK”同时防止弹出窗口关闭。另外，当在最后一个照片时，我们会调用return并关闭弹出窗口。</p><p>最后，每次用户访问卡片视图时，我们会查看一下本地存储seenCardIntro的值来判断用户是否已经看这个卡片。</p><p>###Card视图</p><p>在www/templates/tab-card.html文件中，我们会展示卡片集合。我们通过ng-repeat来迭代显示照片。让后我们定义一些属性来响应用户对卡片的操作。</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ion-view</span> <span class="attr">title</span>=<span class="string">&quot;Card View&quot;</span> <span class="attr">cache-view</span>=<span class="string">&quot;false&quot;</span> <span class="attr">no-scroll</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">class</span>=<span class="string">&quot;has-header padding&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-if</span>=<span class="string">&quot;model.currentPosts.length&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td-cards</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td-card</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;post in model.currentPosts&quot;</span> <span class="attr">on-destroy</span>=<span class="string">&quot;cardDestroyed($index)&quot;</span></span></span></span><br><span class="line"><span class="xml">                         on-transition-left=&quot;cardTransitionedLeft($index)&quot;</span></span><br><span class="line"><span class="xml">                         on-transition-right=&quot;cardTransitionedRight($index)&quot;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-text&quot;</span>&gt;</span>NOPE<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">post.images.low_resolution.url</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yes-text&quot;</span>&gt;</span>LIKE<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">td-card</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">td-cards</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ion-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>###Card视图对应的controller</p><p>我们需要CardViewCtrl使侧边滑出菜单失效，因为它会与Tinder卡片功能冲突 。这里我们通过$ionicSidemenuDelegate来设置当内容进入视图时拖拽不可用。当离开视图时，我们恢复可用，使别的视图下可以打开侧边菜单。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.controller(<span class="string">&#x27;CardViewCtrl&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  $scope,</span></span></span><br><span class="line"><span class="function"><span class="params">  $ionicSideMenuDelegate,</span></span></span><br><span class="line"><span class="function"><span class="params">  $ionicPopup,</span></span></span><br><span class="line"><span class="function"><span class="params">  $ionicSlideBoxDelegate,</span></span></span><br><span class="line"><span class="function"><span class="params">  $timeout,</span></span></span><br><span class="line"><span class="function"><span class="params">  $ionicHistory,</span></span></span><br><span class="line"><span class="function"><span class="params">  localStorageService,</span></span></span><br><span class="line"><span class="function"><span class="params">  PostsService,</span></span></span><br><span class="line"><span class="function"><span class="params">  InstagramService</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Disable side-menu drag so that it doesnt interfere with our tinder cards functionality</span></span><br><span class="line">  $scope.$on(<span class="string">&#x27;$ionicView.enter&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $ionicHistory.clearHistory();</span><br><span class="line">    $ionicSideMenuDelegate.canDragContent(<span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  $scope.$on(<span class="string">&#x27;$ionicView.leave&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $ionicSideMenuDelegate.canDragContent(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!localStorageService.get(<span class="string">&#x27;seenCardIntro&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Mark intro as seen</span></span><br><span class="line">    localStorageService.set(<span class="string">&#x27;seenCardIntro&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> slidebox = $ionicSlideBoxDelegate.$getByHandle(<span class="string">&#x27;card-intro-slidebox&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disable intro slidebox sliding</span></span><br><span class="line">    $scope.disableSlideBox = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $ionicSlideBoxDelegate.enableSlide(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Show explanation message</span></span><br><span class="line">    $ionicPopup.show(&#123;</span><br><span class="line">      title: <span class="string">&#x27;Swipe Cards&#x27;</span>,</span><br><span class="line">      templateUrl: <span class="string">&#x27;templates/popups/card-intro.html&#x27;</span>,</span><br><span class="line">      scope: $scope,</span><br><span class="line">      buttons: [</span><br><span class="line">        &#123;</span><br><span class="line">          text: <span class="string">&#x27;Next&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;button-positive&#x27;</span>,</span><br><span class="line">          onTap: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (slidebox.currentIndex() === <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// Go to next slide</span></span><br><span class="line">              slidebox.next();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Change button text</span></span><br><span class="line">              e.target.innerHTML = <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line"></span><br><span class="line">              e.preventDefault();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Close popup</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.cardTransitionedLeft = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;cardTransitionedLeft called with index:&#x27;</span> + index);</span><br><span class="line">    <span class="keyword">if</span> (!InstagramService.isLoggedIn()) &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;not sure if you liked it before or not since you are not logged in; doing nothing!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> post = $scope.model.currentPosts[index];</span><br><span class="line">    <span class="keyword">if</span> (post.user_has_liked) &#123; <span class="comment">// jshint ignore:line</span></span><br><span class="line">      PostsService.dislikePost(post.id)</span><br><span class="line">        .success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          console.log(<span class="string">&#x27;you disliked it!&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;you didnt like it in the first place!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $scope.cardTransitionedRight = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;cardTransitionedRight called with index:&#x27;</span> + index);</span><br><span class="line">    <span class="keyword">if</span> (!InstagramService.isLoggedIn()) &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;not sure if you liked it before or not since you are not logged in; if you login, we will like it for you&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> post = $scope.model.currentPosts[index];</span><br><span class="line">    <span class="keyword">if</span> (!post.user_has_liked) &#123; <span class="comment">// jshint ignore:line</span></span><br><span class="line">      PostsService.likePost(post.id)</span><br><span class="line">        .success(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          console.log(<span class="string">&#x27;you liked it!&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;you already liked it previously!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $scope.cardDestroyed = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;cardDestroyed called with index:&#x27;</span> + index);</span><br><span class="line">    $scope.model.currentPosts.splice(index, <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里cardTransitionedLeft和cardTransitionRight 方法基本上一样的，除了，左滑进代表不喜欢，右滑是代表喜欢。两者都要判断是否已经登陆。如何用户喜欢当前的卡片但又没有登陆时，会要求用户登陆。一旦登陆成功，这个卡片就会被收藏。这是我们安全认证方案的结果。你可以通过第六章节的 验证 来了解更多的信息。</p><p>当一个卡片一旦过渡完并且被销毁时就会调用cardDestroyed方法。我们这里只是将卡片从照片数组中删除。</p><p>##List视图选项</p><p>Trendicity的列表选项是为了展示ionic核心的列表功能而开发的。比较受欢迎的组件为：拉取刷新，button bars action sheets,视图中的手势。这一部分我们将解析开发列表的过程，和上述的组件。</p><p>###涉及文件</p><p>列表视图功能涉及的文件：www/templates/tab-list.html,www/js/controllers/list.js和www/js/directives/on-dbl-top.js。路由在www/js/app.js中定义的：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.state</span>(<span class="string">&#x27;app.home.list&#x27;</span>,&#123;</span><br><span class="line">        <span class="attribute">url</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">        <span class="attribute">views</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;tab-list&#x27;</span>:&#123;</span><br><span class="line">                <span class="attribute">templateUrl</span>:<span class="string">&#x27;templates/tab-list.html&#x27;</span>,</span><br><span class="line">                <span class="attribute">controller</span>:<span class="string">&#x27;ListViewCtrl&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>###模板布局</p><p>列表视图模板可以被切分成三部分：刷新，帖子列表，和包含用户可操作铵钮的铵钮条。</p><p>###刷新帖子列表</p><p>Ionic提供了非常有用的指令，名字为ion-refresher。在使用这个组件时，将标签放到你的视图上，并添加在视图控制器中添加一个处理用户交互的方法，一旦用户向下拉取内容或者触发刷新机制。</p><p>![列表视图](/images/ionic/list_view.png =300x)</p><p>为了保存简单易用，我们选择一个刷新铵钮（ion-arrow-down-c）来代替默认的图标,同时设置下拉时提示的文字。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;ion-refresher <span class="attribute">pulling-icon</span>=<span class="string">&quot;ion-ios-arrow-up&quot;</span> <span class="attribute">spinner</span>=<span class="string">&quot;none&quot;</span> <span class="attribute">pulling-text</span>=<span class="string">&quot;Pull to refresh...&quot;</span> <span class="attribute">on-refresh</span>=<span class="string">&quot;doRefresh()&quot;</span>&gt;&lt;/ion-refresher&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：这个命令允许你通过下面属性来覆盖它默认的配置：</p><ul><li>on-refresh:一旦用户下拉放开后触发刷新机制。</li><li>on-pulling:一旦用户开始下拉时调用。</li><li>pulling-icon:当用户下拉时显示的图标。</li><li>pulling-text:当用户下拉时显示的文本。</li><li>refreshing-icon:当刷新机制一旦触发，这个图标就会显示。</li><li>refreshing-text:一旦数据刷新后，显示的文本。</li><li>disable-pulling-rotation:一旦on-refresh调用开始调用，停止旋转图标。</li></ul><p>ionrefresher组件值得注意的提升就是，添加了一个定时器，当很快获取到数据时，刷新显示数据也要耗时最少要400ms。这种情况超时创造一个平滑过渡的假像，使用户感觉到数据是刷新了。</p><p>我们回到Trendicity,refresher设置当用户希望获取新的帖子时，触发控制器的doRefresh方法。下面就是刷新时调用的方法：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> Refresh feed posts</span><br><span class="line"><span class="variable">$scope</span>.doRefresh = <span class="keyword">function</span>() &#123;</span><br><span class="line">  <span class="variable">$scope</span>.getPosts(<span class="variable">$scope</span>.search.value);</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> Hide ion-refresher</span><br><span class="line">  <span class="variable">$scope</span>.<span class="variable">$broadcast</span>(<span class="string">&#x27;scroll.refreshComplete&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就像前面章节解释的那样，我们使用HomeCtrl的getPosts方式</p>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> 读书学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 ionic 开发环境 工具和工作流程介绍</title>
      <link href="2015/08/27/ionic%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>2015/08/27/ionic%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">本章节，我们将会学到运行一个Inoic项目需要哪些技能。你将会安装基础的构建模块，学习如何使用Ionic命令行工具(cli)初始化一个项目，学习如何添加不同的平台和插件及如何在本地浏览器，仿真器和真实的设备上进行测试。</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">##安装必备工具:<span class="module-access"><span class="module"><span class="identifier">Node</span>.</span></span>js和Git</span><br><span class="line"></span><br><span class="line">Ionic使用功能强大的模块管理工具<span class="module-access"><span class="module"><span class="identifier">Node</span>.</span></span>js,<span class="module-access"><span class="module"><span class="identifier">Node</span>.</span></span>js 是一个Javascript基础平台，通过它可以很容易的进行web应用的构建。由于<span class="module-access"><span class="module"><span class="identifier">Node</span>.</span></span>js的无处不在和其包管理特性，使用ionic的安装和部署非常简单。</span><br><span class="line"></span><br><span class="line">##安装<span class="module-access"><span class="module"><span class="identifier">Node</span>.</span></span>js</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Node</span>.</span></span>js通过下载安装器安装在windows上或到<span class="literal">[这里]</span>(http:<span class="comment">//nodejs.org/down-load/)下载针对于OS X的安装程序。在OS X上也可以通过Homebrew进行安装。另外，你可以执行下面命令进行安装。</span></span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">$ brew install node </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装完后，你可以打一个命令行，输入下面命令进行测试：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title"></span></span><br></pre></td></tr></table></figure><p>它会打开一个控制台。它就像是浏览器中的javascript控制台一样。你可以在这个控制台中编写合法的javascript代码。如：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">console</span>.info(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">Hello World</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按两次CTRL+C就可以退出Node.js控制台</p><p>##安装Git</p><p>NPM是Node.js的依赖管理，bower是browser的依赖管理。由于ionic是基于html5的移动混合应用开发工具和服务套件。bower只是安装和依赖管理。有一些bower模块需要Git,因此在开始之前你必须要先安装Git.</p><p>可以在 <a href="http://git-scm.com/downloads">git-scm.com/downloads</a>下载各个平台的Git安装程序。</p><p>一旦你安装了Git,打开终端，输入：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ git version</span><br><span class="line">git version <span class="number">2.3</span><span class="number">.2</span> (Apple Git<span class="number">-55</span>)</span><br></pre></td></tr></table></figure><p>##安装Installing Ionic<br>现在你已经安装了Node.js和Git,安装Ionic就变的非常容易了。打开终端，输入：</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g cordova ionic</span><br></pre></td></tr></table></figure><p>这行命令就是让NPM安装cordova和ionic包，和他们所依赖的模块。加上-g这个选项，意味着NPM在全局中安装它他们，因此你就可以在所有项目中使用它们。</p><p>一旦NPM选择完，就会输出一个安装汇总。下面你可以验证安装。</p><p>##Cordova</p><p>下面花一些时间去讲解Cordova是什么，是非常值得的，因为他是Ionic为什么如此强大的最重要的原因。</p><p>Cordova 是一个社区驱动的开源项目，它是HTML和手机原生功能之间的桥梁。它使开发者能够构建一个html应用，这个应用可以直接使用手机原生的功能，如何像机，地理位置，设备的方向等。另外，Cordova目的是创建一些跨平台的接口，使你创建html应用而不用关心是iphone应用还是在android应用。</p><p>你可以在<a href="http://cordova.apache.org/">这里</a>了解决更多关于Cordova的知识。</p><p>##Ionic命令行 （CLI)</p><p>为了使你能更方便的使用Ionic，Ionic提供了命令行接口。</p><ul><li>创建一个新的工程</li><li>添加平台</li><li>添加插件</li><li>编译和在仿真器中运行你的工程</li><li>在设备上运行你的</li><li>打包应用和发布</li></ul><p>##创建一个新的工程<br>让我们创建一个新的应用。打开终端，定位到你想把本书涉及到的代码存放的位置。在这目录下面输入下面的创建应用的命令。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ionic <span class="built_in">start</span> trendicity tabs</span><br></pre></td></tr></table></figure><p>这个ionic start命令可以让你指定一个模版用来初始化Ionic应用的结构。上面这个例子，你指定了tabs模版。开箱即用的，Ionic支持空白模版（不指定模版，默认就是空白的），tabs和 sidemenu。另外,如何你想提供一个自定义模版，你可以指定一个CodePen URL.</p><p>一旦上面那个命令执行完，你就已经配置好了一个Ionic工程，就会看到下面信息：</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Your Ionic project is <span class="built_in">read</span> <span class="built_in">to</span> go ! Some quick tips:</span><br><span class="line"></span><br><span class="line"> * cd <span class="keyword">into</span> your project: $ cd trendicity</span><br><span class="line"></span><br><span class="line"> * Setup this project <span class="built_in">to</span> use Sass: ionic setup sass</span><br><span class="line"></span><br><span class="line"> * Develop <span class="keyword">in</span> <span class="keyword">the</span> browser <span class="keyword">with</span> live reload: ionic serve</span><br><span class="line"></span><br><span class="line"> * Add <span class="keyword">a</span> <span class="built_in">platform</span> (ios <span class="keyword">or</span> Android): ionic <span class="built_in">platform</span> <span class="built_in">add</span> ios [android]</span><br><span class="line">   Note: iOS development requires OS X currently</span><br><span class="line">   See <span class="keyword">the</span> Android Platform Guide <span class="keyword">for</span> full Android installation instructions:</span><br><span class="line">   <span class="keyword">https</span>://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html</span><br><span class="line"></span><br><span class="line"> * Build your app: ionic build &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line"> * Simulate your app: ionic emulate &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line"> * Run your app <span class="keyword">on</span> <span class="title">a</span> <span class="title">device</span>: <span class="title">ionic</span> <span class="title">run</span> &lt;<span class="title">PLATFORM</span>&gt;</span><br><span class="line"></span><br><span class="line"> * Package <span class="keyword">an</span> app <span class="keyword">using</span> Ionic package service: ionic package &lt;MODE&gt; &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line">For more help use ionic <span class="comment">--help or ionic docs</span></span><br><span class="line"></span><br><span class="line">Visit <span class="keyword">the</span> Ionic docs: <span class="keyword">http</span>://ionicframework.com/docs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">New! Add push notifications <span class="built_in">to</span> your Ionic app <span class="keyword">with</span> Ionic Push (alpha)!</span><br><span class="line"><span class="keyword">https</span>://apps.ionic.io/signup</span><br><span class="line">+<span class="comment">---------------------------------------------------------+</span></span><br><span class="line">+ New Ionic Updates <span class="keyword">for</span> August <span class="number">2015</span></span><br><span class="line">+</span><br><span class="line">+ The View App just landed. Preview your apps <span class="keyword">on</span> <span class="title">any</span> <span class="title">device</span></span><br><span class="line">+ <span class="keyword">http</span>://view.ionic.io</span><br><span class="line">+</span><br><span class="line">+ Invite anyone <span class="built_in">to</span> preview <span class="keyword">and</span> test your app</span><br><span class="line">+ ionic share EMAIL</span><br><span class="line">+</span><br><span class="line">+ Generate splash screens <span class="keyword">and</span> icons <span class="keyword">with</span> ionic resource</span><br><span class="line">+ <span class="keyword">http</span>://ionicframework.com/blog/automating-icons-<span class="keyword">and</span>-splash-screens/</span><br><span class="line">+</span><br><span class="line">+<span class="comment">---------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>同时你会看到一些快捷提示。你可以随时查看这些提示，通过下面这个命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ionic --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><p>这个将会输出一个Ionic命令行支持的指今列表</p><p>看一下刚才那个命令为你创建了哪些东西</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ cd trendicity</span><br><span class="line">$ ls -F</span><br><span class="line">total <span class="number">40</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff   <span class="number">118</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">03</span> bower.json</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff   <span class="number">864</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> config.xml</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff  <span class="number">1388</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">03</span> gulpfile.js</span><br><span class="line">drwxr-xr-x  <span class="number">4</span> Aaron  staff   <span class="number">136</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">03</span> hooks/</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff    <span class="number">42</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> ionic.project</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff   <span class="number">581</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> package.json</span><br><span class="line">drwxr-xr-x  <span class="number">4</span> Aaron  staff   <span class="number">136</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> platforms/</span><br><span class="line">drwxr-xr-x  <span class="number">9</span> Aaron  staff   <span class="number">306</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> plugins/</span><br><span class="line">drwxr-xr-x  <span class="number">3</span> Aaron  staff   <span class="number">102</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">03</span> scss/</span><br><span class="line">drwxr-xr-x  <span class="number">8</span> Aaron  staff   <span class="number">272</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> www/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>bower.json</code>:管理你的Bower依赖</p><p><code>gulpfile.js</code>:Gulp是一个构建工具。更多的信息可参在<a href="http://www.gulpjs.com/">这里</a>找到。这个文件管理构建的流程。</p><p><code>ionic.project</code>:ionic工程配置文件。</p><p><code>plugins/</code>:Ionic插件文件放在此目录下。稍后你会了解更多关于这插件的信息。</p><p><code>www/</code>:你的应用文件放在此目录下。</p><p><code>config.xml</code>:Cordova的配置文件。</p><p><code>hooks/</code>:Cordova的hooks 这里面有一个说明文件，我可以根据此文件来创建一系列的目录，这些目录里面可以创建一些脚本，这些脚本分别在ionic运行的不同时期进行执行。</p><p><code>package.json</code> :管理Node.js依赖的文件</p><p><code>scss/</code>: SASS 文件。</p><p>好，现在，我们把重点放在 <code>www</code> 目录。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">localhost:trendicity Aaron$ cd www</span><br><span class="line">localhost:www Aaron$ ls -F</span><br><span class="line">total <span class="number">8</span></span><br><span class="line">drwxr-xr-x  <span class="number">3</span> Aaron  staff  <span class="number">102</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> css/</span><br><span class="line">drwxr-xr-x  <span class="number">3</span> Aaron  staff  <span class="number">102</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> img/</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff  <span class="number">858</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> index.html</span><br><span class="line">drwxr-xr-x  <span class="number">4</span> Aaron  staff  <span class="number">136</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> js/</span><br><span class="line">drwxr-xr-x  <span class="number">3</span> Aaron  staff  <span class="number">102</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">03</span> lib/</span><br><span class="line">drwxr-xr-x  <span class="number">8</span> Aaron  staff  <span class="number">272</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> templates/</span><br></pre></td></tr></table></figure><p><code>css/</code>:你的应用的CSS文件<br><code>img/</code>:你的应用中用到的图片<br><code>index.html</code>:你的应用的入口<br><code>js/</code>:你的javascript代码<br><code>lib/</code>:第三方库和Ionic库<br><code>templates/</code>:你的应用的HTML模版</p><p>在js引以为文件夹中会发现有三个文件：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">localhost:js Aaron$ ls -F</span><br><span class="line">total <span class="number">16</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff  <span class="number">1916</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> app.js</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff  <span class="number">1544</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> controllers.js</span><br><span class="line">-rw-r--r--  <span class="number">1</span> Aaron  staff  <span class="number">1542</span>  <span class="number">8</span> <span class="number">30</span> <span class="number">16</span>:<span class="number">04</span> services.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若没有发现services.js文件，你可以自己创建一个。</p><p><code>app.js</code>:你的应用的入口，它包括路由信息。<br><code>controllers.js</code>:包括例子应用的所有的控制器。<br><code>services.js</code>:应用的可重用的服务。</p><p>值得注意的是，这是一个简化的项目结构，随着你的项目的增长，你需要去完善它。</p><p>##在浏览器上部署</p><p>刚开始时，与通过仿真器测试相比，在浏览器中进行测试是最快的方式。它是可以在浏览器中进行测试的，因为Ionic是一个基于html5的平台。另外，Ionic现有的内置功能让其变得更加简单。在你的命令行中的工程目录下，输入以下命令。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ ionic serve</span><br><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**</span></span><br><span class="line"><span class="strong"> Upgrade warning - for the CLI to run correctly,      </span></span><br><span class="line"><span class="strong"> it is highly suggested to upgrade the following:     </span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"> Please update your Node runtime to version  &gt;=0.12.x</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line">Running live reload server: http://192.168.1.7:35729</span><br><span class="line">Watching : [ &#x27;www/<span class="strong">**/<span class="emphasis">*&#x27;, &#x27;!www/lib/<span class="strong">**/<span class="emphasis">*&#x27; ]</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">Running dev server: http://192.168.1.7:8100</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">Ionic server commands, enter:</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  restart or r to restart the client app from the root</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  goto or g and a url to have the app navigate to the given url</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  consolelogs or c to enable/disable console log output</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  serverlogs or s to enable/disable server log output</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  quit or q to shutdown the server and exit</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"></span></span></span></span></span><br></pre></td></tr></table></figure><p>上面的命令执行完成后，将会打开一个浏览器窗口并且访问你的应用。恭喜你，你的应用已经成功运行！</p><p>如何浏览器窗口没有自动打开， Ionic通知你在浏览器中打开这个应用。你上面你会看到</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.7</span>:<span class="number">35729</span></span><br></pre></td></tr></table></figure><p>这个命令将会监视你的工程文件的变化，因此当你改变工程中的文件时，视图也会自动刷新。你可以通过修改工程的一个文件并注意着浏览器的重新加载来进行测试。打开./www/templates/tab-dash.html 文件并且修改：</p><p><code>&lt;h1&gt;Dash&lt;/Dash&gt;</code></p><p>修改为：</p><p><code>&lt;h1&gt;Trendicity&lt;/h1&gt;</code></p><p>保存后，浏览器会立即发生刷新，你就会看到刚才修改文件后的变化。</p><p>##代理</p><p>当你的应用需要访问不允许跨域访问的资源的APIs时，在浏览器测试时，你将会遇到问题。幸运的是Ionic团队已经 通过代理请求的方式来解决上面的问题。</p><p>在你应用的根目录下打开ionic.project。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cat ionic.<span class="keyword">project</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;trendicity&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app_id&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加代理数据到你的文件中：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat ionic.<span class="keyword">project</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;trendicity&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;proxies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>:<span class="string">&quot;/proxied/resources&quot;</span>,</span><br><span class="line">    <span class="string">&quot;proxyUrl&quot;</span>:<span class="string">&#x27;https://api.somesite.com/resources&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中的path是你本地想被代理的路径，这个proxyUrl是真正的你想被请求的API.在你的应用中，你现在可以请求<code>http://localhost:8100/proxied/resources</code>其实是访问的<code>https://api.somesite.com/resources</code>.</p><p>注意，代理的配置仅在浏览器中进行测试时需要用到。在设备上和仿真器中不需要用这个配置文件。</p><p>##添加平台</p><p>当你发布之前，或者在你构建一个应用时，你需要决定你想将此应用部署到哪些平台上。然后告诉给Ionic,通过CLI,安装构建成这此平台的应用时所必须的先决条件。让我们来添加IOS平台。</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">$ ionic <span class="keyword">platform</span> ios</span><br></pre></td></tr></table></figure><p>它将会安装一些必须的依赖并准备将你的工程构建成IOS平台的应用。注意，如何你不是在Apple电脑上，你是不能够添加iOS平台的。</p><p>或，你可以添加Android平台：</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">$ ionic <span class="keyword">platform</span> android</span><br></pre></td></tr></table></figure><p>Android平台与iOS相比，需要安装一些额外的东西 当你都是在Apple电脑上执行上面的命令时。在稍后的章节中你会了解到更多关于Android安装的信息。</p><p>如何你决定选择在Android平台上进行测试，建议你不要使用Android默认的仿真器。因为它太慢了。你可以安装使用Geny-mogion仿真器，它比默认访真器要快一些。你可以在<a href="http://www.genymotion.com/">这里</a>了解更多的内容。</p><p>##构建应用</p><p>用Ionic构建应用是容易的。构建一个iOS平台的应用，通过如下命令：</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ionic build ios</span><br></pre></td></tr></table></figure><p>一旦构建成功，你会看到输出下面信息：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">** </span>BUILD SUCCEEDED</span><br></pre></td></tr></table></figure><p>##编译和在仿真器中运行你的工程<br>Ionic支持直接通过CLI加载设备仿真器。加载你的编译文件到iOS仿真器(确保你已经安装了<a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/">ios-sim</a>)。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ionic <span class="built_in">emulate</span> ios</span></span><br></pre></td></tr></table></figure><p>如何你之前没有进行编译，Ionic会创建iOS平台的编译文件。执行这个命令之后，iOS 仿真器将会加载，并且你的应用将会在其中加载。</p><p>像是在浏览器中测试一样，你可以修改你的应用文件时，让仿真器中的应用自动刷新。执行下面的命令，等待仿真器加载你的应用，然后修改应用的文件进行观察仿真器中应用的变化。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ionic <span class="built_in">emulate</span> ios -livereload</span></span><br></pre></td></tr></table></figure><p>第一次修改工程，都会花大量的时间去编译和加载到仿真器。</p><p>##在设备上运行</p><p>仿真器是非常强大的，但是在发布之前，你仍然想在真实的设备上测试你的应用。</p><p>###iOS<br>在iOS设备上部署，需要有一个iOS开发帐户，在Apple设备上运行XCode。iOS开发者账户是收费的。你可以在<a href="https://developer.apple.com/programs/">developer.apple.com/programs/</a>了解更多。</p><p>你可以在这里下载Xcode:(developer.apple.com/xcode/downloads/)[<a href="https://developer.apple.com/xcode/downloads/]">https://developer.apple.com/xcode/downloads/]</a></p><p>一旦你正确安装了XCode和拥有你自己的开发者账户，在XCode中打开你工程的/platform/ios文件夹，然后进行测试。</p><p>###Android</p><p>到目前为止，我们主要集中在构建、模拟和运行iOS应用程序。原因是，如果你在Apple电脑上进行开发，启动和运行都是非常容易的，但是它避免了使用Ionic进遇到的最大的一件事情。你编写一次应用，可以编译成两个平台的版本。让我们花一点时间看一下在Android平台上启动和运行时的一些选项。</p><p>###Android SDK安装</p><p>第一件事就是下载和安装Android SDK.可以在这里下载：<a href="http://developer.android.com/sdk/index.html">developer.android.com/sdk/</a>。可以在这里找到安装步骤：<a href="http://developer.android.com/sdk/installing/">developer.android.com/sdk/installing/</a>。</p><p>###Ionic box</p><p>很多人发现安装Android SDK是比较困难的过程。由于这个原因，Ionic小组已经创建了一个Vagrant box来帮助你简化这个过程。如何你对Vagrant不是很熟悉的话，它是一个创建虚拟机的平台，主要是创建开发环境。你可以在这里了解更多:<a href="http://www.vagrantup.com/">www.vagrantup.com</a>。你可以使用不同的虚拟机运行器，但是最常用的是VirtualBox。</p><p>为了使用Vagrant box,你首先安装VirtualBox,或者别的被Vagrant支付的虚拟机运行器。VirtualBox是免费的，你可以在这里进行下载:<a href="http://www.virtualbox.org/wiki/Downloads">www.virtualbox.org/wiki/Downloads</a>。一旦安装好了VirtualBox，下载并安装Vagrant:<a href="http://www.vagrantup.com/downloads.html">www.vagrantup.com/downloads.html</a>。</p><p>一旦你安装好了VirtualBox和Vagrant，进入到你的工程目录下面，克隆Ionic box资源，并且启动它。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/driftyco/ionic-box</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ionic-box</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant up</span></span><br></pre></td></tr></table></figure><p>你第一次执行时，可能要花费几分钟，因为Vagrant需要下载一个虚拟机镜像文件。在你在Ionic box上编译你的应用前，你需要将你的项目代码目录与虚拟机共享。在你的编译器中打开ionic-box/Vagrantfile。找到下面这行：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># config.vm.synced_folder <span class="meta-string">&quot;../data&quot;</span>, <span class="meta-string">&quot;/vagrant_data&quot;</span></span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">config</span>.vm.<span class="keyword">synced_folder </span><span class="string">&quot;../trendicity&quot;</span>, <span class="string">&quot;/home/vagrant/trendicity&quot;</span></span><br></pre></td></tr></table></figure><p>保存这个文件并重新加载你的Vagrant实例：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$vagrant</span> reload</span></span><br></pre></td></tr></table></figure><p>现在让我们为vagrant实例添加SSH,并针对Android进行构建。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>vagrant ssh</span><br><span class="line">vagrant<span class="variable">@ionic</span>-<span class="symbol">android:</span>~<span class="variable">$ </span>cd trendicity/</span><br><span class="line">vagrant<span class="variable">@ionic</span>-<span class="symbol">android:</span>~<span class="regexp">/trendicity$ ionic platform android</span></span><br></pre></td></tr></table></figure><p>现在将你的Android设备通过USB连接到你的电脑。你可以通过下面的命令确认你的设备已经连接上。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vagrant@ionic-android:~<span class="regexp">/trendicity$ sudo /</span>home<span class="regexp">/vagrant/</span>android-sdk-linux<span class="regexp">/platform-tools/</span>adb devices</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>确认你的设备已经连接上，然后通过下面的命令在你设备上启动应用：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">vagrant<span class="symbol">@ionic</span>-android:~/trendicity$ ionic <span class="built_in">run</span> android</span><br></pre></td></tr></table></figure><p>当你看到下面的信息，就证明上面的命令执行成功了：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">Installing</span></span> app on device ...</span><br><span class="line"><span class="function"><span class="title">Lanuching</span></span> application ...</span><br><span class="line">LAUNCH SUCCESS  </span><br></pre></td></tr></table></figure><p>恭喜！你已经成功在android设备上运行了你的应用。</p><p>上面看上去在你的设备上运行应用程序是很多麻烦，同时它证明了android sdk安装是多么的困难，以及ionic团队如何使它些困难变的简单易用。</p><p>##添加插件</p><p>Ionic和Cordova是非常强大的工具，但是为了提高性能和最小化你的就应用，你可能不希望默认安装所有东西。你可能添加别的功能通过添加插件的方式。让我们给将要使用地理定位功能的应用添加地理位置插件。</p><p>在你的项目根目录，输入以下命令。注意，你可以在本地命令行中执行下面命令，也可以在ionic box 的命令行中输入以下命令：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ ionic plugin <span class="keyword">add</span><span class="bash"> org.apache.cordova.geolocation</span></span><br></pre></td></tr></table></figure><p>Ionic将会安装一些必须的组件，使你的应用程序可以使用地理定位功能。稍后，当你深入到本书例子 Trendicity应用 的细节时，你会看到如何使用这个地理定位插件。</p><p>你也要以自动在这里<a href="http://plugins.cordova.io/">plugins.cordova.io/</a>了解一下别的插件，以备将来更好的使用到自己的项目中。</p><p>##最佳源代码控制实践</p><p>因为Ionic和Cordova安装的文件对不同的平台是不一样的，这些文件是没有必要加入版本控制的。让我们看一下，哪些东西要存放到我们的版本控制中，还有哪些不用存放。</p><p>###Git和模版化应用</p><p>如何你使用Git(本书的作者们强烈推荐使用Git),和如何通过Ionic命令行创建你的应用，你可能注意到它创建了一个<code>.gitignore</code>文件，它里面包含一些你不需要版本控制的文件引用。你可以选择跳过本章剩余的部分而直接查看这个文件<code>.gitignore</code>，下面是它的内容：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> cat .gitignore </span><br><span class="line"># Specifies intentionally untracked <span class="keyword">files</span> to ignore when <span class="keyword">using</span> Git</span><br><span class="line"># http:<span class="comment">//git-scm.com/docs/gitignore</span></span><br><span class="line"></span><br><span class="line">node_modules/</span><br><span class="line">platforms/</span><br><span class="line">plugins/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###根目录下面的文件</p><p>根目录下所有的文件，你就都应该加入版本控制。它们包含了项目的配置信息，没有它们，你的项目将无法正确编译。</p><p>###包含的目录<br><code>./hooks</code>,<code>./scss</code>,和最重要的<code>./www</code> 都应该加入到你的版本控制。</p><p>###不需要包含的目录</p><p><code>./node_modules</code>,<code>./platforms</code>, 和 <code>./plugins</code> 都不需要加入版本控制。他们包含了许多二进制文件和一些额外的编译时生成的文件，这些文件在部署时都会重新生成。也都会在你在新的机器上检出代码时自动生成。</p><p>##总结</p><p>你现在准备开始创建你的应用。你拥有了创建一个应用需要的所有工具：你可以通过浏览器或者仿真器进行测试，你可以通过添加插件的方式去访问一些高级的功能，并可以让你的应用在真实的设备上进行运行。</p>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> 读书学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章ionic 基本介绍</title>
      <link href="2015/08/25/ionic%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>2015/08/25/ionic%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>21世纪，手机应用兴起。硬件正变的更好，软件的能力也成几何倍的增长。手机应用的需求空前的高，开发者们也努力开发各种主流平台的应用以满足市场的需求。<br>最流行的方式就是编写原生的应用，但是编写原生的应用需要对多门语言进行深入的理解，例如：IOS/OSX使用的Objective-C 和 Swift，别外一个就是Android开发使用的Java。另外开发人员要熟悉各种开发框架及SDK来生成应用。像这样当同时开发一个应用要分别开发不同平台的版本，对于一个团对来说难度就大了。<br>混合模式开发(Hybrid development)，可以说是解决上面问题的最有效的方式。其实，混杂模式应用是在本地容器上包装了一层。这种结构让我们仅通过用HTML5+CSS3和javascript就可以开发移动应用，不用直接与某一个平台进行交互。很多开发者为了满足快速增长类似于一个产品要有多平台的版本的需要，目前已经使用了这种方式。自从智能手机的到来，很多类似的框架也产生了。Sencha Touch,Kendo UI,和jQuery mobile是比较受欢迎的移动框架。也有一些控制DOM的框架，如Facebook的React库，Google的AngularJS和Backbone.js.另外，Bootstrap,Foundation和Topcoat 服务帮助你设计混杂应用。最后，有很多混杂开发平台如Apache基金会的Cordova 一个开源平台。<br>面对那么多的框架体系，选择哪个来开发你的应用是比较头痛的事情。大部分这些框架不能充分利用手机装置并且当我们使用其生成应用时会出现各种问题。所以Ionic就出现了。</p><h2 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h2><p>Ionic是由Drifty研发的，一个聪明的开发和设计小组。这个公司之前已经成功开发过多个项目，如：Jetstrap,一个bootstrap构建工具，和Codiqa,在线拖放构建混合应用程序和移动网站的工具。Drifty目前的使命是改变未来移动软件开发，特别是混杂手机应用开发，Ionic就会实现这些事情。<br>Ionic将Apache的Cordova平台，AngularJS和Angular-ui-router通过Ionic开发好的应用架构和组件和样式组合起来。实质上Ionic集成了最好的手机框架，让你专注于自己的功能设计和实现。<br>基于Cordova，Inoic是可以使用大量的Cordova插件,这些插件可以使用原生的一些东西，如访问设备的相机，照片和地理坐标等等。另外，这个平台还让你创建原生的通知，和捕获设备的运动方向，实际上，这样我们基本就看不出原生应用和混杂应用的区别了。<br>更重要的是，Ionic决定集成AngularJS使你能够访问大量的功能.那是一个非常了不起的架构上的决定，因为它可以帮你把你的代码组织到controllers,services,和directives中，方便代码的管理。最后，有了AngularJS，大量开源社区的模块都可以使用了，可以使人你扩展Ionic的核心功能。如，Trendicity 这个应用，我们就集成了有名的angular-local-storage模块来存储在Instagram上发表的最喜欢的东西。<br>而且，Ionic在开源社区中已经非常受关注。不仅仅因为这个框架它本身开源，而是它的开发团队编写了详细的文档和在CodePen上收集有用的代码样例。别一个非常好的资源就是，可以与其它社区交流和直接与ionic团队直接进行交流的公共论坛。<br>接下来的章节，我们会用ionic一步步的创建Trendicity用ionic。此外，我们会深入学习ionic在构建混合移动应用程序中的使用。</p>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> 读书学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的读书计划</title>
      <link href="2015/08/24/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>2015/08/24/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<div class="col-xs-12"><table class="table table-bordered">    <tr>    <th>书名</th>    <th>作者</th>    <th>计划学习时间</th>    <th>详细记划</th>    </tr>    <tr>        <td>《Developing an Ionic Edge》</td>        <td>Anton Shevchenko,Robi van Baalen,keith D. Moore,Diego Netto,Alan Levicki</td>        <td>08.24 到 10.30</td>        <td><a href="/2015/08/24/ionic schedule/">详细记划</a></td>    </tr>    <tr>        <td><a href="http://spark.apache.org/">spark</a></td>        <td>Apache Spark</td>        <td>11.0 到 12.30</td>        <td>待计划</td>    </tr></table></div>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> 读书学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
            <tag> schedule </tag>
            
            <tag> nocomment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic 学习计划</title>
      <link href="2015/08/24/ionic%20schedule/"/>
      <url>2015/08/24/ionic%20schedule/</url>
      
        <content type="html"><![CDATA[<p>###1. 第一章 ionic基本介绍</p><blockquote><p>08.24 </p></blockquote><p>###2. 第二章  开发环境 工具和工作流程介绍 </p><blockquote><p>08.25-08.27 </p></blockquote><p>###3. 第三章 Trendicity 项目实例</p><blockquote><p>08.28-09-20 </p></blockquote><p>###4. 第四章 实现菜单滑动和设置路线</p><blockquote><p>09.20-10.30 </p></blockquote><p>###5. 第五章 与地图的集成</p><blockquote><p>10-01-10.10 </p></blockquote><p>###6. 第六章 权限制控制</p><blockquote><p>10.11 </p></blockquote><p>###7. 第七章 设计应用</p><blockquote><p>10.12-10.20 </p></blockquote><p>###8. 第八章 与服务的交互</p><blockquote><p>10.22 </p></blockquote><p>###9. 第九章 下一步要做什么呢？</p><blockquote><p>10.25 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 扩展知识 </category>
          
          <category> 读书学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django core task</title>
      <link href="2015/08/21/django%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2015/08/21/django%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="定时调度的问题"><a href="#定时调度的问题" class="headerlink" title="定时调度的问题"></a>定时调度的问题</h1><p>1.前言</p><p>  最近在项目中做一个定时统计数据的功能，如何做到定时调用统计方法呢？</p><pre><code>在网上看了一下，大致有三种方式1. [编写Django Command ，用cron进行定时调度](http://www.cnblogs.com/linjiqin/p/3965046.html)2. 第一种方式的升级版实现[django-crontab实现Django定时任务](http://www.zhidaow.com/post/django-crontab)3. 编写Django Command 然后rq_scheduler定时把任务提交给队列，由worker进行处理这里我选用的是第三种方式</code></pre><p>2.编写Django Command 然后rq_scheduler定时把任务提交给队列，由worker进行处理</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>*Putting a job in the scheduler</p><p>*Running a scheduler that will move scheduled jobs into queues when the time comes</p><p>*RQ Scheduler comes with a script rqscheduler that runs a scheduler process that polls Redis once every minute and move scheduled jobs to the relevant queues when they need to be executed:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">scheduler.schedule(</span><br><span class="line">    scheduled_time=datetime.now(), # <span class="type">Time</span> <span class="keyword">for</span> first execution, <span class="keyword">in</span> UTC timezone</span><br><span class="line">    func=func,                     # <span class="keyword">Function</span> <span class="keyword">to</span> be queued</span><br><span class="line">    args=[arg1, arg2],             # Arguments passed <span class="keyword">into</span> <span class="keyword">function</span> <span class="keyword">when</span> executed</span><br><span class="line">    kwargs=&#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;,         # Keyword arguments passed <span class="keyword">into</span> <span class="keyword">function</span> <span class="keyword">when</span> executed</span><br><span class="line">    <span class="type">interval</span>=<span class="number">60</span>,                   # <span class="type">Time</span> <span class="keyword">before</span> the <span class="keyword">function</span> <span class="keyword">is</span> <span class="keyword">called</span> again, <span class="keyword">in</span> seconds</span><br><span class="line">    repeat=<span class="number">10</span>                      # Repeat this number <span class="keyword">of</span> times (<span class="keyword">None</span> means repeat forever)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>##使用方法</p><p>###初始化：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> analytics.etl <span class="keyword">import</span> analytics_etl</span><br><span class="line">In [<span class="number">2</span>]: analytics_etl.init()</span><br></pre></td></tr></table></figure><ol><li>安装rq_scheduler<br> pip install rq_scheduler</li><li>编写测试command   scheduler_command.py</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class Command(BaseCommand):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">help</span> = <span class="string">&quot;process  analytics data&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> handle(<span class="keyword">self</span>, *args, **options):</span><br><span class="line">        first_process_datetime=datetime.now()+timedelta(<span class="keyword">days</span>=<span class="number">1</span>)</span><br><span class="line">        first_process_datetime.replace(<span class="keyword">hour</span>=<span class="number">1</span>,<span class="keyword">minute</span>=<span class="number">0</span>,<span class="keyword">second</span>=<span class="number">0</span>,<span class="keyword">microsecond</span>=<span class="number">0</span>)</span><br><span class="line">        first_process_datetime=dateformat.local_to_utc(first_process_datetime)</span><br><span class="line">        scheduler.schedule(first_process_datetime,process,<span class="built_in">interval</span>=<span class="built_in">interval</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###调用job</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python manage.py scheduler_<span class="keyword">command</span> <span class="params">--settings=local_settings</span></span><br></pre></td></tr></table></figure><p>###启动rqscheduler</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">rqscheduler执行一次就ＯＫ</span><br><span class="line">python manage.py rqscheduler <span class="attribute">--settings</span>=local_settings</span><br></pre></td></tr></table></figure><h3 id="启动一个rqworker-default"><a href="#启动一个rqworker-default" class="headerlink" title="启动一个rqworker default"></a>启动一个rqworker default</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">启动一个工作者，</span><br><span class="line">python manage.py rqworker<span class="built_in"> default </span><span class="attribute">--settings</span>=local_settings</span><br></pre></td></tr></table></figure><p>###查看当前有多少job:</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> django_rq</span><br><span class="line"></span><br><span class="line"><span class="title">scheduler</span>=django_rq.get_scheduler(&#x27;<span class="keyword">default</span>&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="title">jobs</span>=scheduler.get_jobs()</span><br></pre></td></tr></table></figure><p>###取消job</p><p><code>scheduler.cancel(job)</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 定时 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="2015/08/20/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog/"/>
      <url>2015/08/20/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog/</url>
      
        <content type="html"><![CDATA[<p>###为什么写博客</p><ol><li><a href="https://github.com/beiyuu/Github-Pages-Example/blob/master/_posts/blog/2011-12-18-why-blog.md">世界这么乱，装纯给谁看</a></li><li><a href="http://www.cnblogs.com/bangerlee/archive/2011/09/11/2173632.html">我为什么写博客</a></li><li>我认同他们所分享的，所以我也开始了自己的博客之路</li></ol><h3 id="为什么现在才开始"><a href="#为什么现在才开始" class="headerlink" title="为什么现在才开始"></a>为什么现在才开始</h3><ol><li>从2014年就一直想写自己的博客，一直没有沉下心来去写。</li><li>这几天搭档出去休息，我也偷偷的休息一下，将自己的博客这一课给补上。</li></ol><h3 id="写哪些东西"><a href="#写哪些东西" class="headerlink" title="写哪些东西"></a>写哪些东西</h3><ol><li>读书笔记：记录在看书时一些笔记，方便自己日后参考</li><li>项目中遇到难点笔记：项目中遇到问题的解决过程，方便将来参考</li><li>技术分享会总结：记录在技术学习上的点滴</li><li>个人随笔 ：本人一些业余随笔</li><li>关于：本人的简单介绍</li></ol><h3 id="为什么会选择用github-pages呢"><a href="#为什么会选择用github-pages呢" class="headerlink" title="为什么会选择用github pages呢"></a>为什么会选择用github pages呢</h3><ol><li><a href="https://github.com/beiyuu/Github-Pages-Example/blob/master/_posts/blog/2011-12-18-why-blog.md">Github-Pages-Example</a></li><li><a href="http://jekyll.bootcss.com/">将纯文本转化为静态网站和博客</a></li><li><a href="http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/">keep gh-pages in sync with master</a></li><li><a href="https://hexo.io/zh-cn/">hexo</a></li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ol><li><p>添加网站优化搜索</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>添加flow</p> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bubkoo/</span>hexo-filter-flowchart</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
            <tag> 感悟 </tag>
            
            <tag> 疑惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openssl软件生成RSA私钥和公钥</title>
      <link href="2015/01/27/%E7%94%B1%20Openssl%20%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90RSA%20%E7%A7%81%E9%92%A5%E5%92%8C%E5%85%AC%E9%92%A5/"/>
      <url>2015/01/27/%E7%94%B1%20Openssl%20%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90RSA%20%E7%A7%81%E9%92%A5%E5%92%8C%E5%85%AC%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<p>##什么是RSA<br>##什么是Openssl软件<br>##如何用Openssl软件生成RSA私钥和公钥</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密解密 </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
