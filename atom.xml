<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>道 - 自然 🍃</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-15T17:07:54.043Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>万松</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>流程-活动节点</title>
    <link href="http://example.com/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/"/>
    <id>http://example.com/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/</id>
    <published>2022-11-14T14:35:59.000Z</published>
    <updated>2022-11-15T17:07:54.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="活动包括子流程和任务"><a href="#活动包括子流程和任务" class="headerlink" title="活动包括子流程和任务"></a>活动包括子流程和任务</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%B4%BB%E5%8A%A8%E7%B1%BB%E5%9B%BE.png" alt="活动类图"></p><h2 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h2><ol><li><p>isForCompensation: boolean = false</p><p>标识此活动是否用于补偿目的的标志。 如果为false，则此活动作为正常执行流的结果执行。如果为true，则此活动仅在检测到补偿事件并在补偿事件可见性作用域下启动时激活</p></li><li><p>loopCharacteristics: LoopCharac- teristics [0..1]</p><p>一个活动可以执行一次，也可以重复执行。如果是重复的，活动必段定义 loopCharacteristics(如果流程isExecutable属性被设置为true)。</p></li><li><p>resources: ResourceRole [0..*]</p><p>定义将执行或将负责活动的资源。资源，例如执行者，可以以特定的个人、团体、组织角色或职位或组织的形式指定。</p></li><li><p>default: SequenceFlow [0..1]</p><p>默认分支， 当其它条件不满足时 默认走该分支， 该分支不用配置条件。</p></li><li><p>ioSpecification: Input OutputSpecification [0..1]</p><p>定义了活动的输入和输出以及输入集和输出集。</p></li><li><p>properties: Property [0..*]</p><p>其它属性</p></li><li><p>boundaryEventRefs: BoundaryEvent [0..*]</p><p>绑定的边界事件</p></li><li><p>dataInputAssociations: DataIn- putAssociation [0..*]</p><p>可选引用。数据输入关联定义了如何填充活动的输入输出规范的数据输入。</p></li><li><p>dataOutputAssociations: DataOutputAssociation [0..*]</p><p>可选引用。对数据输出关联.</p></li><li><p>startQuantity: integer = 1</p><p>缺省值为1。不小于1。这个属性定义了在活动开始之前不能到达的令牌的数量。</p></li><li><p>completionQuantity: integer = 1</p><p>缺省值为1。不小于1。这个属性定义了从活动中生成的令牌的数量。这个数目的令牌将在任何传出序列流(假设满足任何序列流条件)时发送。</p></li></ol><h2 id="活动与资源的关系"><a href="#活动与资源的关系" class="headerlink" title="活动与资源的关系"></a>活动与资源的关系</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%B4%BB%E5%8A%A8%E4%B8%8E%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B3%E7%B3%BB.png"></p><h2 id="任务的标示"><a href="#任务的标示" class="headerlink" title="任务的标示"></a>任务的标示</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%A0%87%E7%A4%BA.png" alt="image.png"></p><h2 id="任务类图"><a href="#任务类图" class="headerlink" title="任务类图"></a>任务类图</h2><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png" alt="image.png"></p><h2 id="任务类型说明"><a href="#任务类型说明" class="headerlink" title="任务类型说明"></a>任务类型说明</h2><h3 id="服务任务-Service-Task"><a href="#服务任务-Service-Task" class="headerlink" title="服务任务 Service Task"></a>服务任务 Service Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绑定一个操作，且有输入与输出</span><br><span class="line">implementation: string &#x3D; ##webService</span><br><span class="line">operationRef: Operation [0..1]</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用外部服务</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1%E8%A1%A8%E7%A4%BA.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="发送消息任务-Send-Task"><a href="#发送消息任务-Send-Task" class="headerlink" title="发送消息任务 Send Task"></a>发送消息任务 Send Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绑定一个消息， 但不是必须的</span><br><span class="line">messageRef: Message [0..1]</span><br><span class="line">operationRef: Operation [0..1]</span><br><span class="line">implementation: string &#x3D; ##webService</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送消息</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1%E6%A0%87%E7%A4%BA.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="接收消息的任务-Receive-Task"><a href="#接收消息的任务-Receive-Task" class="headerlink" title="接收消息的任务 Receive Task"></a>接收消息的任务 Receive Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绑定一个消息， 但不是必须的</span><br><span class="line">messageRef: Message [0..1]</span><br><span class="line">operationRef: Operation [0..1]</span><br><span class="line">implementation: string &#x3D; ##webService</span><br><span class="line">instantiate: boolean &#x3D; false</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接收消息， 当接收到消息时自动完成任务；</span><br><span class="line">通常用于启用一个实例；如果想要触发一个实例，需要将属性 instantiate 设置成 true</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1.png"> </p><p>可作为开始节点 ：</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%8F%AF%E4%BB%A5%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%9A%84%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E4%BB%BB%E5%8A%A1.png"></p></li></ol><h3 id="业务规则节点-Business-Rule-Task"><a href="#业务规则节点-Business-Rule-Task" class="headerlink" title="业务规则节点 Business Rule Task"></a>业务规则节点 Business Rule Task</h3><ol><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DMN 任务</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1.png"></p></li></ol><h3 id="脚本任务-Script-Task"><a href="#脚本任务-Script-Task" class="headerlink" title="脚本任务 Script Task"></a>脚本任务 Script Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script：string[0..1] 脚本， 如果没有配置脚本， 当作一个空任务进行执行</span><br><span class="line">scriptFormat: string[0..1] 脚本格式，该值一定是一个 mime-type 类型， 如果脚本指定了， 该值需要必须配置</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行指定的脚本</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E8%84%9A%E6%9C%AC%E4%BB%BB%E5%8A%A1.png"></p></li></ol><h3 id="人工任务-User-Task"><a href="#人工任务-User-Task" class="headerlink" title="人工任务 User Task"></a>人工任务 User Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation: string &#x3D; ##unspecified  一个webservice提供实现</span><br><span class="line">renderings: Rendering [0..*] 这个属性充当一个hook，它允许bpmn采用者使用bpmn扩展机制来指定任务呈现方式。</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人员参与完成任务，该节点的实现可以交由业务方根据业务场景自行实现</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%B7%A5%E8%8A%82%E7%82%B9%E6%A0%87%E7%A4%BA.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%B7%A5%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9B%BE.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%91%98%E8%8A%82%E7%82%B9%E4%BA%BA%E5%91%98%E4%BF%A1%E6%81%AF.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%BA%E5%B7%A5%E8%8A%82%E7%82%B9%E6%A1%88%E4%BE%8B.png"></p></li></ol><h3 id="操作任务-Manual-Task"><a href="#操作任务-Manual-Task" class="headerlink" title="操作任务 Manual Task"></a>操作任务 Manual Task</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只继承自Task，无其它属性</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不被引擎管理，可以理解为不受管的任务，即引擎不管理他的开始和结束；例如： 需要某一个人去给用户安装电话；</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1.png"></p></li><li><p>类图<br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="子流程-Call-SubProcess-Activity"><a href="#子流程-Call-SubProcess-Activity" class="headerlink" title="子流程 Call SubProcess Activity"></a>子流程 Call SubProcess Activity</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">triggeredByEvent: boolean &#x3D; false 是否有事件触发，即事件子流程</span><br><span class="line">method: Transaction- Method 事务子流程，该方法是用来提交或取消事务用的，如果是事务子流程，需要两个圈</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不被引擎管理，可以理解为不受管的任务，即引擎不管理他的开始和结束；例如： 需要某一个人去给用户安装电话；</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B1.png"> <img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B2.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B3.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B4.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%8B%E4%BB%B6%E5%AD%90%E6%B5%81%E7%A8%8B.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%8B%E4%BB%B6%E5%AD%90%E6%B5%81%E7%A8%8B2.png"></p></li></ol><ol start="5"><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B%E7%B1%BB%E5%9B%BE.png"></p></li><li><p>子流程案例</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%AD%90%E6%B5%81%E7%A8%8B%E6%A1%88%E4%BE%8B.png"></p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E4%BA%8B%E5%8A%A1%E5%AD%90%E6%B5%81%E7%A8%8B.png"></p></li></ol><h3 id="可被调用的-活动-Call-Activity"><a href="#可被调用的-活动-Call-Activity" class="headerlink" title="可被调用的 活动 Call Activity"></a>可被调用的 活动 Call Activity</h3><ol><li><p>属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calledElement: CallableElement [0..1] ： CallableElements，GlobalTask</span><br></pre></td></tr></table></figure></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用来引用全局的Task或流程</span><br></pre></td></tr></table></figure></li><li><p>标示</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%BC%95%E7%94%A8%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E7%9A%84UserTask.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%BC%95%E7%94%A8%E4%B8%80%E4%B8%AA%E6%B5%81%E7%A8%8B.png"><br><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%BC%95%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AD%90%E6%B5%81%E7%A8%8B%E5%B1%95%E5%BC%80%E5%BD%A2%E5%BC%8F.png"></p></li><li><p>类图</p><p><img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/CallActivity%E7%B1%BB%E5%9B%BE.png"></p></li></ol><h3 id="可被引用的元素-CallableElements"><a href="#可被引用的元素-CallableElements" class="headerlink" title="可被引用的元素 CallableElements"></a>可被引用的元素 CallableElements</h3><p>   <img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%8F%AF%E8%A2%AB%E5%BC%95%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0.png"></p><h3 id="全局任务-Global-Task"><a href="#全局任务-Global-Task" class="headerlink" title="全局任务 Global Task"></a>全局任务 Global Task</h3><p>   <img src="/2022/11/14/%E6%B5%81%E7%A8%8B-%E6%B4%BB%E5%8A%A8%E8%8A%82%E7%82%B9/images/%E5%85%A8%E5%B1%80%E4%BB%BB%E5%8A%A1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;活动包括子流程和任务&quot;&gt;&lt;a href=&quot;#活动包括子流程和任务&quot; class=&quot;headerlink&quot; title=&quot;活动包括子流程和任务&quot;&gt;&lt;/a&gt;活动包括子流程和任务&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/11/14/%E6%B5%81%E7%A8%</summary>
      
    
    
    
    <category term="BPMN" scheme="http://example.com/categories/BPMN/"/>
    
    <category term="元素" scheme="http://example.com/categories/BPMN/%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="BPMN" scheme="http://example.com/tags/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/tags/Flow/"/>
    
    <category term="流程" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
    <category term="元素" scheme="http://example.com/tags/%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>流程-事件</title>
    <link href="http://example.com/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/</id>
    <published>2022-11-13T10:38:16.000Z</published>
    <updated>2022-11-13T14:13:58.074Z</updated>
    
    <content type="html"><![CDATA[<p>在流程产品中,比较重要的 元素 “事件” ,作为流程产品或技术的大牛们, 看了解几个;</p><p><img src="/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/images/%E4%BA%8B%E4%BB%B6.png" alt="事件"></p><p><img src="/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/images/%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9B%BE.png"></p><p>如果需要再详细的内容,请参考: <a href="https://www.omg.org/spec/BPMN/2.0.2/PDF">https://www.omg.org/spec/BPMN/2.0.2/PDF</a></p><p>优秀文章链接：</p><ul><li><a href="https://www.jianshu.com/u/fe00cda6c54e">dafengyiba 事件相关文章</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在流程产品中,比较重要的 元素 “事件” ,作为流程产品或技术的大牛们, 看了解几个;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/11/13/%E6%B5%81%E7%A8%8B-%E4%BA%8B%E4%BB%B6/images/%E4%BA%8B%E4%BB%B6.</summary>
      
    
    
    
    <category term="BPMN" scheme="http://example.com/categories/BPMN/"/>
    
    <category term="元素" scheme="http://example.com/categories/BPMN/%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="BPMN" scheme="http://example.com/tags/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/tags/Flow/"/>
    
    <category term="流程" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
    <category term="元素" scheme="http://example.com/tags/%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>流程引擎发展</title>
    <link href="http://example.com/2022/11/12/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E5%8F%91%E5%B1%95/"/>
    <id>http://example.com/2022/11/12/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E5%8F%91%E5%B1%95/</id>
    <published>2022-11-12T04:07:30.000Z</published>
    <updated>2022-11-13T10:37:46.951Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>第一代</th><th>第二代</th><th>第三代</th><th>第三代</th><th>第五代</th><th>第六代</th></tr></thead><tbody><tr><td>2003年， jBPM 1.0发布。<br/> 运行环境：J2EE 过程定义语言：jPDL(当时工作流厂商都有各自的过程定义语言和建模工具) 当时的主流的技术： applets, Swing桌面和EJB</td><td>2004年，jBPM 2.0发布<br/> 同时jBPM加入JBoss基金会. 运行环境：任何JAVA环境(POJO实现过程运行时)，不需要应用服务器</td><td>2005年, jBPM 3.0发布，支持BPEL<br/> - 过程定义语言：过程虚拟机 <br/> - 架构：与二代相比，架构发生了巨大变化。可以操作的业务功能大范围扩展，不仅通过JAVA实现状态机，而且支持建模; <br/> - HIBERNETE作为持久机制并同时提供会话对象的概念， <br/> - 工作流引擎所有的相关性交互都纳入<a href="https://docs.jboss.org/jbpm/v3.2/javadoc-jpdl/org/jbpm/JbpmContext.html">contextual block</a>范畴 <br/> 这为以后的工作流命令设计模式和命令拦截设计模式的广泛应用打下良好的基础 <br/></td><td>2009年， jBPM 4.0 alpha版发布.<br/> - PVM 成功工作流引擎的核心。 <br/> - 过程定义语言：BPMN, jPDL 和 BPEL <br/> - 因为团队人员离开并启动Activiti，正式版没能发布。 <br/> - 主要改进：      - 无状态的服务API      - 运行时和历史数据的分离：保证运行时持久的性能</td><td>2010年, Activiti 1发布<br/> 改变： <br/> - 版权从LGPL转到APACHE. - 过程定义语言：BPMN(唯一) - 从性能和扩展性加强PVM - 多租户支持 - 轻量级架构</td><td>2017年，flowable 6.0发布。<br/> 改变： <br/> - 过程模型：放弃PVM,使用原生BPMN，实现真正的动态过程执行和复杂的过程迁移 - 数据远完全抽象：支持NoSQL - CMMN支持 - 函数式工作流</td></tr><tr><td><br/></td><td><br/></td><td><br/></td><td>Tom Baeyens Effektif 诞生</td><td><br/></td><td><br/></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第一代&lt;/th&gt;
&lt;th&gt;第二代&lt;/th&gt;
&lt;th&gt;第三代&lt;/th&gt;
&lt;th&gt;第三代&lt;/th&gt;
&lt;th&gt;第五代&lt;/th&gt;
&lt;th&gt;第六代&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;2003年， jBP</summary>
      
    
    
    
    <category term="BPMN" scheme="http://example.com/categories/BPMN/"/>
    
    <category term="元素" scheme="http://example.com/categories/BPMN/%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="BPMN" scheme="http://example.com/tags/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/tags/Flow/"/>
    
    <category term="流程" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
    <category term="元素" scheme="http://example.com/tags/%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>流程-网关Gateway</title>
    <link href="http://example.com/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/"/>
    <id>http://example.com/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/</id>
    <published>2022-11-11T13:48:34.000Z</published>
    <updated>2022-11-13T14:12:16.503Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">网关可以是流程的开端，也可以没有连出的线；</span><br><span class="line">网关可以有多个连入的线或多个连出的线<span class="comment">(即，它可以合并或分流)</span>。</span><br></pre></td></tr></table></figure><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E9%BB%98%E8%AE%A4%E7%BD%91%E5%85%B3.png" alt="默认网关"></p><h1 id="排它-独占-网关"><a href="#排它-独占-网关" class="headerlink" title="排它(独占)网关"></a>排它(独占)网关</h1><blockquote><p>Exclusive Gateway</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol><li>条件（所有分支）</li><li>是否为默认分支</li><li>分支的顺序</li></ol><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>选择第一个满足条件的分支</li><li>如果没有匹配的分支，选择默认分支</li></ol><h3 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E6%8E%92%E5%AE%83%E7%BD%91%E5%85%B3.png" alt="排它网关示意图"></p><h3 id="排它网关类图"><a href="#排它网关类图" class="headerlink" title="排它网关类图"></a>排它网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E6%8E%92%E5%AE%83%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="排它网关类图"></p><h1 id="包容网关"><a href="#包容网关" class="headerlink" title="包容网关"></a>包容网关</h1><blockquote><p>Inclusive Gateway</p></blockquote><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ol><li>条件（所有分支）</li><li>是否为默认分支</li><li>分支的顺序</li></ol><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h3><ol><li>选择一条和多条满足条件的分支</li><li>如果没有匹配的分支，选择默认分支</li><li>可以对多条进入的线进行汇集，汇集后再判断连出分支</li></ol><h3 id="表示-1"><a href="#表示-1" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%8C%85%E5%AE%B9%E7%BD%91%E5%85%B3.png" alt="包容网关"></p><h3 id="包容网关类图"><a href="#包容网关类图" class="headerlink" title="包容网关类图"></a>包容网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%8C%85%E5%AE%B9%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="包容网关类图"></p><h1 id="并行网关"><a href="#并行网关" class="headerlink" title="并行网关"></a>并行网关</h1><blockquote><p>Parallel Gateway</p></blockquote><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ol><li>多条连接的线</li><li>多条连出的线</li></ol><h3 id="规则-2"><a href="#规则-2" class="headerlink" title="规则"></a>规则</h3><ol><li>汇集， 并行节点 会 等待所有进入的线都到达时才向后流转</li><li>分发</li></ol><h3 id="表示-2"><a href="#表示-2" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3%E6%B1%87%E9%9B%86.png" alt="并行网关汇集"><br><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3%E5%88%86%E5%8F%91.png" alt="并行网关分发"></p><h3 id="并行网关类图"><a href="#并行网关类图" class="headerlink" title="并行网关类图"></a>并行网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3.png" alt="并行网关"></p><h1 id="复杂网关"><a href="#复杂网关" class="headerlink" title="复杂网关"></a>复杂网关</h1><blockquote><p>Complex Gateway</p></blockquote><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ol><li>指定向该节点要完成的连入线的占比或数量</li><li>多条连出的分支</li><li>分支需要配置条件表达式（默认分支除外）</li></ol><h3 id="规则-3"><a href="#规则-3" class="headerlink" title="规则"></a>规则</h3><ol><li>汇集，可以激活的条件（哪些进入的线被同步等待）满足后，进行第二步的分发（可以选择 其它未到达的分支 策略， 是直接取消，还是达到时再次激活当前网关）</li><li>分发</li></ol><h3 id="表示-3"><a href="#表示-3" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%A4%8D%E6%9D%82%E7%BD%91%E5%85%B3.png" alt="复杂网关"></p><h3 id="复杂网关类图"><a href="#复杂网关类图" class="headerlink" title="复杂网关类图"></a>复杂网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%A4%8D%E6%9D%82%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="复杂网关类图"></p><h1 id="事件网关"><a href="#事件网关" class="headerlink" title="事件网关"></a>事件网关</h1><blockquote><p>Event-Based Gateway</p></blockquote><h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><ol><li><p>实例化 true or false （如果 true， 可以没有连入的线 作为流程的开端，同时事件分支类型可以选择并行）</p></li><li><p>事件网关类型（并行，排它）</p><h3 id="规则-4"><a href="#规则-4" class="headerlink" title="规则"></a>规则</h3></li><li><p>多条分支连出 &gt;=2</p></li><li><p>分支需要配置事件 (只能是事件，不能是表达式)</p></li><li><p>支持的事件 Message, Signal, Timer, Conditional, and Multiple (which can only include the previous triggers)</p></li></ol><h3 id="表示-4"><a href="#表示-4" class="headerlink" title="表示"></a>表示</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B3.png"></p><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B31.png"><br><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B32.png"></p><p>实例化=true， 可以作为流程的开始</p><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E5%8F%AF%E4%BD%9C%E4%B8%BA%E6%B5%81%E7%A8%8B%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B3.png"></p><h3 id="复杂网关类图-1"><a href="#复杂网关类图-1" class="headerlink" title="复杂网关类图"></a>复杂网关类图</h3><p><img src="/2022/11/11/%E6%B5%81%E7%A8%8B-%E7%BD%91%E5%85%B3Gateway/images/%E4%BA%8B%E4%BB%B6%E7%BD%91%E5%85%B3%E7%B1%BB%E5%9B%BE.png" alt="事件网关"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;网关可以是流程的开端，也可以没有连出的线；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;网关可以有</summary>
      
    
    
    
    <category term="BPMN" scheme="http://example.com/categories/BPMN/"/>
    
    <category term="元素" scheme="http://example.com/categories/BPMN/%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="BPMN" scheme="http://example.com/tags/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/tags/Flow/"/>
    
    <category term="流程" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
    <category term="元素" scheme="http://example.com/tags/%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>BPMN2.0</title>
    <link href="http://example.com/2022/11/10/BPMN2.0/"/>
    <id>http://example.com/2022/11/10/BPMN2.0/</id>
    <published>2022-11-10T14:42:50.000Z</published>
    <updated>2022-11-11T13:47:58.237Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Version 2.0</span><br><span class="line">OMG Document Number: formal/2011-01-03</span><br><span class="line">Standard document URL: http://www.omg.org/spec/BPMN/2.0</span><br></pre></td></tr></table></figure><p>一. 元素分类</p><table><thead><tr><th>分类</th></tr></thead><tbody><tr><td>事件 event</td></tr><tr><td>任务 task</td></tr><tr><td>子流程 sub-processes</td></tr><tr><td>CallActivity</td></tr><tr><td>网关 Gateway</td></tr><tr><td>泳道 Lane</td></tr><tr><td>数据 Data Object</td></tr><tr><td>消息,组,备注 Message,Group,Text Annotation</td></tr><tr><td>线 Sequence Flow</td></tr><tr><td>消息 Message Flow</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Version 2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OMG Document Nu</summary>
      
    
    
    
    <category term="BPMN" scheme="http://example.com/categories/BPMN/"/>
    
    <category term="元素" scheme="http://example.com/categories/BPMN/%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="BPMN" scheme="http://example.com/tags/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/tags/Flow/"/>
    
    <category term="流程" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
    <category term="元素" scheme="http://example.com/tags/%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>流程好文章</title>
    <link href="http://example.com/2022/11/03/%E6%B5%81%E7%A8%8B%E5%A5%BD%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/11/03/%E6%B5%81%E7%A8%8B%E5%A5%BD%E6%96%87%E7%AB%A0/</id>
    <published>2022-11-02T16:00:00.000Z</published>
    <updated>2022-11-13T10:16:36.489Z</updated>
    
    <content type="html"><![CDATA[<p>一. 概念相关<br><a href="https://blog.csdn.net/qq_35427589/article/details/122678793">BPMN和DMN基本概念和使用案例</a></p><p>二. 产品及api学习</p><p><a href="https://docs.awspaas.com/user-manual/aws-pass-console-user-manual-process/">炎黄盈动@AWS PaaS流程文档</a></p>]]></content>
    
    
    <summary type="html">流程好文章链接</summary>
    
    
    
    <category term="BPMN" scheme="http://example.com/categories/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/categories/BPMN/Flow/"/>
    
    
    <category term="BPMN" scheme="http://example.com/tags/BPMN/"/>
    
    <category term="Flow" scheme="http://example.com/tags/Flow/"/>
    
    <category term="流程" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>道德经</title>
    <link href="http://example.com/2022/09/09/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    <id>http://example.com/2022/09/09/%E9%81%93%E5%BE%B7%E7%BB%8F/</id>
    <published>2022-09-08T16:11:18.000Z</published>
    <updated>2022-11-10T14:19:43.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-老子"><a href="#一-老子" class="headerlink" title="一. 老子"></a>一. 老子</h1><p>老子，（前600年—前470年之后）姓李名耳，字伯阳，传说老子出生时就长有白色的眉毛及胡子， 所以被后人称为老子。<br>中国春秋时代思想家，楚国苦县厉乡曲仁里人，是我国古代伟大的哲学家和思想家、道家学派创始 人。其被唐皇武后封为太上老君，世界文化名人，世界百位历史名人之一，存世有《道德经》（又称《老<br>子》）。其作品的精华是朴素的辨证法，主张无为而治，其学说对中国哲学发展具有深刻影响。<br>在道教中，老子是三清尊神之一太上老君的第十八个化身，被尊为道祖。</p><h1 id="二-道德经"><a href="#二-道德经" class="headerlink" title="二. 道德经"></a>二. 道德经</h1><ol><li><p>道可道，非常道。名可名，非常名。无名天地之始。有名万物之母。故常无欲以观其妙。常有欲以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。</p></li><li><p>天下皆知美之为美，斯恶矣；皆知善之为善，斯不善已。故有无相生，难易相成，长短相形，高下相倾，音声相和，前後相随。是以圣人处无为之事，行不言之教。万物作焉而不辞。生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。</p></li><li><p>不尚贤， 使民不争。不贵难得之货，使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨；常使民无知、无欲，使夫智者不敢为也。为无为，则无不治。</p></li><li><p>道冲而用之，或不盈。渊兮似万物之宗。解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。</p></li><li><p>天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐[tuó]迭乎？虚而不屈，动而愈出。多言数穷，不如守中。</p></li><li><p>谷神不死是谓玄牝。玄牝之门是谓天地根。绵绵若存，用之不勤。</p></li><li><p>天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人後其身而身先，外其身而身存。非以其无私邪！故能成其私。</p></li><li><p>上善若水。水善利万物而不争，处众人之所恶，故几於道。居善地，心善渊，与善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。</p></li><li><p>持而盈之不如其己；揣而锐之不可长保；金玉满堂莫之能守；富贵而骄，自遗其咎。功遂身退，天之道。</p></li><li><p>载营魄抱一，能无离乎？专气致柔，能如婴儿乎？涤除玄览，能无疵乎？爱国治民，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎。</p></li><li><p>三十幅共一毂，当其无，有车之用。埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之以为用。</p></li><li><p>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂，难得之货令人行妨。是以圣人，为腹不为目，故去彼取此。</p></li><li><p>宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下。得之若惊失之若惊是谓宠辱若惊。何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患。故贵以身为天下，若可寄天下。爱以身为天下，若可托天下。</p></li><li><p>视之不见名曰夷。听之不闻名曰希。抟之不得名曰微。此三者不可致诘，故混而为一。其上不皦(jiǎo)，其下不昧，绳绳不可名，复归於无物。是谓无状之状，无物之象，是谓惚恍。迎之不见其首，随之不见其後。执古之道以御今之有。能知古始，是谓道纪。</p></li><li><p>古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。豫兮若冬涉川；犹兮若畏四邻；俨兮其若容；涣兮若冰之将释；敦兮其若朴；旷兮其若谷；混兮其若浊；澹兮其若海；飉(liáo,风的声音)兮若无止。孰能浊以静之徐清。孰能安以动之徐生。保此道者不欲盈。夫唯不盈故能蔽而新成。</p></li><li><p>致虚极守静笃。万物并作，吾以观复。夫物芸芸各复归其根。归根曰静，是谓复命；复命曰常，知常曰明。不知常，妄作凶。知常容，容乃公，公乃全，全乃天，天乃道，道乃久，没身不殆。</p></li><li><p>太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮其贵言，功成事遂，百姓皆谓∶我自然。</p></li><li><p>大道废有仁义；慧智出有大伪；六亲不和有孝慈；国家昏乱有忠臣。</p></li><li><p>绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有；此三者，以为文不足。故令有所属，见素抱朴少私寡欲。</p></li><li><p>绝学无忧，唯之与阿，相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其未央哉！众人熙熙如享太牢、如春登台。我独泊兮其未兆，如婴儿之未孩；儡儡(lěi,羸弱)兮若无所归。众人皆有馀，而我独若遗。我愚人之心也哉！沌沌兮。俗人昭昭，我独昏昏；俗人察察，我独闷闷。众人皆有以，而我独顽且鄙。我独异於人，而贵食母。</p></li><li><p>孔德之容惟道是从。道之为物惟恍惟惚。惚兮恍兮其中有象。恍兮惚兮其中有物。窈兮冥兮其中有精。其精甚真。其中有信。自古及今，其名不去以阅众甫。吾何以知众甫之状哉！以此。</p></li><li><p>曲则全，枉则直，洼则盈，敝则新少则得，多则惑。是以圣人抱一为天下式。不自见故明；不自是故彰；不自伐故有功；不自矜故长；夫唯不争，故天下莫能与之争。古之所谓∶曲则全者」岂虚言哉！诚全而归之。</p></li><li><p>希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况於人乎？故从事於道者，同於道。德者同於德。失者同於失。同於道者道亦乐得之；同於德者德亦乐得之；同於失者失於乐得之信不足焉有不信焉。</p></li><li><p>企者不立；跨者不行。自见者不明；自是者不彰。自伐者无功；自矜者不长。其在道也曰∶馀食赘形。物或恶之，故有道者不处。</p></li><li><p>有物混成先天地生。寂兮寥兮独立不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道。强为之名曰大。大曰逝，逝曰远，远曰反。故道大、天大、地大、人亦大。域中有大，而人居其一焉。人法地，地法天，天法道，道法自然。</p></li><li><p>重为轻根，静为躁君。是以君子终日行不离轻重。虽有荣观燕处超然。奈何万乘之主而以身轻天下。轻则失根，躁则失君。</p></li><li><p>善行无辙迹。善言无瑕谪。善数不用筹策。善闭无关楗而不可开。善结无绳约而不可解。是以圣人常善救人，故无弃人。常善救物，故无弃物。是谓袭明。故善人者不善人之师。不善人者善人之资。不贵其师、不爱其资，虽智大迷，是谓要妙。</p></li><li><p>知其雄，守其雌，为天下溪。为天下溪，常德不离，复归於婴儿。知其白，守其黑，为天下式。为天下式，常德不忒，复归於无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归於朴。朴散则为器，圣人用之则为官长。故大制不割。</p></li><li><p>将欲取天下而为之，吾见其不得已。天下神器，不可为也，为者败之，执者失之。夫物或行或随、或觑或吹、或强或羸、或挫或隳。是以圣人去甚、去奢、去泰。</p></li><li><p>以道佐人主者，不以兵强天下。其事好还。师之所处荆棘生焉。军之後必有凶年。善有果而已，不敢以取强。果而勿矜。果而勿伐。果而勿骄。果而不得已。果而勿强。物壮则老，是谓不道，不道早已。</p></li><li><p>夫佳兵者不祥之器，物或恶之，故有道者不处。君子居则贵左，用兵则贵右。兵者不祥之器，非君子之器，不得已而用之，恬淡为上。胜而不美，而美之者，是乐杀人。夫乐杀人者，则不可得志於天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右。言以丧礼处之。杀人之众，以悲哀泣之，战胜以丧礼处之。</p></li><li><p>道常无名。朴虽小天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。譬道之在天下，犹川谷之於江海。</p></li><li><p>知人者智，自知者明。胜人者有力，自胜者强。知足者富。强行者有志。不失其所者久。死而不亡者，寿。</p></li><li><p>大道泛兮，其可左右。万物恃之以生而不辞，功成而不名有。衣养万物而不为主，常无欲可名於小。万物归焉，而不为主，可名为大。以其终不自为大，故能成其大。</p></li><li><p>执大象天下往。往而不害安平太。乐与饵，过客止。道之出口淡乎其无味。视之不足见。听之不足闻。用之不足既。</p></li><li><p>将欲歙之，必固张之。将欲弱之，必固强之。将欲废之，必固兴之。将欲取之，必固与之。是谓微明。柔弱胜刚强。鱼不可脱於渊，国之利器不可以示人。</p></li><li><p>道常无为，而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名之朴，夫亦将无欲。不欲以静，天下将自定。</p></li><li><p>上德不德是以有德。下德不失德是以无德。上德无为而无以为。下德无为而有以为。上仁为之而无以为。上义为之而有以为。上礼为之而莫之以应，则攘臂而扔之。故失道而後德。失德而後仁。失仁而後义。失义而後礼。夫礼者忠信之薄而乱之首。前识者，道之华而愚之始。是以大丈夫，处其厚不居其薄。处其实，不居其华。故去彼取此。</p></li><li><p>昔之得一者。天得一以清。地得一以宁。神得一以灵。谷得一以盈。万物得一以生。侯王得一以为天下贞。其致之。天无以清将恐裂。地无以宁将恐废。神无以灵将恐歇。谷无以盈将恐竭。万物无以生将恐灭。侯王无以贞将恐蹶。故贵以贱为本，高以下为基。是以侯王自称孤、寡、不谷。此非以贱为本邪？非乎。至誉无誉。不欲琭琭如玉，珞珞如石。</p></li><li><p>反者道之动。弱者道之用。天下万物生於有，有生於无。</p></li><li><p>上士闻道勤而行之。中士闻道若存若亡。下士闻道大笑之。不笑不足以为道。故建言有之。明道若昧。进道若退。夷道若纇。上德若谷。大白若辱。广德若不足。建德若偷。质真若渝。大方无隅。大器晚成。大音希声。大象无形。道隐无名。夫唯道善贷且成。</p></li><li><p>道生一。一生二。二生三。三生万物。万物负阴而抱阳，冲气以为和。人之所恶，唯孤、寡不谷，而王公以为称，故物或损之而益，或益之而损。人之所教，我亦教之，强梁者，不得其死。吾将以为教父。</p></li><li><p>天下之至柔，驰骋天下之至坚。无有入无间，吾是以知无为之有益。不言之教，无为之益天下希及之。</p></li><li><p>名与身孰亲。身与货孰多。得与亡孰病。是故甚爱必大费。多藏必厚亡。知足不辱。知止不殆。可以长久。</p></li><li><p>大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈。大巧若拙。大辩若讷。静胜躁，寒胜热。清静为天下正。</p></li><li><p>天下有道，却走马以粪。天下无道，戎马生於郊。祸莫大於不知足。咎莫大於欲得。故知足之足常足矣。</p></li><li><p>不出户知天下。不窥牖见天道。其出弥远，其知弥少。是以圣人不行而知。不见而明。不为而成。</p></li><li><p>为学日益。为道日损。损之又损，以至於无为。无为而不为。取天下常以无事，及其有事，不足以取天下。</p></li><li><p>圣人无常心。以百姓心为心。善者吾善之。不善者吾亦善之，德善。信者吾信之。不信者吾亦信之，德信。圣人在天下，歙歙(xīxī,无所偏执的样子)焉，为天下浑其心。百姓皆注其耳目，圣人皆孩之。</p></li><li><p>出生入死。生之徒，十有三。死之徒，十有三。人之生，动之於死地，亦十有三。夫何故？以其生生之厚。盖闻善摄生者，陆行不遇凶虎，入军不被甲兵。凶无所投其角。虎无所用其爪。兵无所容其刃。夫何故？以其无死地。</p></li><li><p>道生之，德畜之，物形之，势成之。是以万物莫不尊道，而贵德。道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之。长之育之。亭之毒之。养之覆之。生而不有，为而不恃，长而不宰。是谓玄德。</p></li><li><p>天下有始，以为天下母。既得其母，以知其子。既知其子，复守其母，没身不殆。塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见其小曰明，守柔曰强。用其光，复归其明，无遗身殃。是为习常。</p></li><li><p>使我介然有知，行於大道，唯施是畏。大道甚夷，而人好径。朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有馀。是谓盗夸。非道也哉。</p></li><li><p>善建者不拔。善抱者不脱。子孙以祭祀不辍。修之於身其德乃真。修之於家其德乃馀。修之於乡其德乃长。修之於邦其德乃丰。修之於天下其德乃普。故以身观身，以家观家，以乡观乡，以邦观邦，以天下观天下。吾何以知天下然哉？以此。</p></li><li><p>含德之厚比於赤子。毒虫不螫，猛兽不据，攫鸟不抟。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄，和之至也。知和曰常。知常曰明。益生曰祥。心使气曰强。物壮则老。谓之不道，不道早已。</p></li><li><p>知者不言。言者不知。挫其锐，解其纷，和其光，同其尘，是谓玄同。故不可得而亲。不可得而疏。不可得而利。不可得而害。不可得而贵。不可得而贱。故为天下贵。</p></li><li><p>以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳而民弥贫。民多利器国家滋昏。人多伎巧奇物泫起。法令滋彰盗贼多有。故圣人云我无为而民自化。我好静而民自正。我无事而民自富。我无欲而民自朴。</p></li><li><p>其政闷闷，其民淳淳。其政察察，其民缺缺。祸尚福之所倚。福尚祸之所伏。孰知其极，其无正。正复为奇，善复为妖。人之迷其日固久。是以圣人方而不割。廉而不刿。直而不肆。光而不耀。</p></li><li><p>治人事天莫若啬。夫唯啬是谓早服。早服谓之重积德。重积德则无不克。无不克则莫知其极。莫知其极可以有国。有国之母可以长久。是谓深根固柢，长生久视之道。</p></li><li><p>治大国若烹小鲜。以道莅天下，其迨ㄞ哄非其鬼不神，其神不伤人。非其神不伤人，圣人亦不伤人。夫两不相伤，故德交归焉。</p></li><li><p>大国者下流，天下之交。天下之牝。牝常以静胜牡。以静为下。故大国以下小国，则取小国。小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜人。小国不过欲入事人。夫两者各得所欲，大者宜为下。</p></li><li><p>道者万物之奥。善人之宝，不善人之所保。美言可以市尊。美行可以加人。人之不善，何弃之有。故立天子、置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何。不曰∶求以得，有罪以免邪？故为天下贵。</p></li><li><p>为无为，事无事，味无味。大小多少，报怨以德。图难於其易，为大於其细。天下难事必作於易。天下大事必作於细。是以圣人终不为大，故能成其大。夫轻诺必寡信。多易必多难。是以圣人犹难之，故终无难矣。</p></li><li><p>其安易持，其未兆易谋。其脆易泮，其微易散。为之於未有，治之於未乱。合抱之木生於毫末。九层之台起於累土。千里之行始於足下。为者败之，执者失之。是以圣人无为故无败，无执故无失。民之从事常於几成而败之。慎终如始则无败事。是以圣人欲不欲，不贵难得之货。学不学，复众人之所过，以辅万物之自然而不敢为。</p></li><li><p>古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼。不以智治国，国之福。知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣、远矣！与物反矣。然後乃至大顺。</p></li><li><p>江海之所以能为百谷王者，以其善下之，故能为百谷王。是以圣人欲上民，必以言下之。欲先民，必以身後之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。</p></li><li><p>天下皆谓我道大似不肖。夫唯大故似不肖。若肖，久矣！其细也夫。我有三宝持而保之∶一曰慈， 二曰俭，三曰不敢为天下先。慈故能勇，俭故能广，不敢为天下先故能成器长。今舍慈且勇，舍俭且广，舍後且先，死矣！夫慈以战则胜，以守则固。天将救之以慈卫之。</p></li><li><p>善为士者不武。善战者不怒。善胜敌者不与。善用人者为之下。是谓不争之德。是谓用人之力。是谓配天之极。</p></li><li><p>用兵有言，吾不敢为主而为客。不敢进寸而退尺。是谓行无行。攘无臂。扔无敌。执无兵。祸莫大於轻敌。轻敌几丧吾宝。故抗兵相加哀者胜矣。</p></li><li><p>吾言甚易知、甚易行。天下莫能知、莫能行。言有宗、事有君。夫唯无知，是以我不知。知我者希，则我者贵。是以圣被褐怀玉。</p></li><li><p>知不知上，不知知病。夫唯病病，是以不病。圣人不病，以其病病。夫唯病病，是以不病。</p></li><li><p>民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。是以圣人自知不自见。自爱不自贵。故去彼取此。</p></li><li><p>勇於敢则杀。勇於不敢则活。此两者或利或害。天之所恶孰知其故。天之道不争而善胜。不言而善应。不召而自来。繟(chǎn,舒缓)然而善谋。天网恢恢疏而不失。</p></li><li><p>民不畏死，奈何以死惧之。若使民常畏死，而为奇者，吾得执而杀之，孰敢。常有司杀者杀。夫代司杀者杀，是谓代大匠斫。夫代大匠斫者，希有不伤其手矣。</p></li><li><p>民之饥以其上食税之多，是以饥。民之难治以其上之有为，是以难治。民之轻死以其求生之厚，是以轻死。夫唯无以生为者，是贤於贵生。</p></li><li><p>人之生也柔弱，其死也坚强。草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱者生之徒。是以兵强则灭，木强则折。强大处下，柔弱处上。</p></li><li><p>天之道其犹张弓与。高者抑之，下者举之。有馀者损之，不足者补之。天之道，损有馀而补不足。人之道，则不然，损不足以奉有馀。孰能有馀以奉天下，唯有道者。是以圣人为而不恃，功成而不处。其不欲见贤邪！</p></li><li><p>天下莫柔弱於水。而攻坚强者，莫之能胜。以其无以易之。弱之胜强。柔之胜刚。天下莫不知莫能行。是以圣人云，受国之垢是谓社稷主。受国不祥是为天下王。正言若反。</p></li><li><p>和大怨必有馀怨，安可以为善。是以圣人执左契，而不责於人。有德司契，无德司彻。天道无亲常与善人。</p></li><li><p>小国寡民。使有什伯之器而不用。使民重死而不远徙。虽有舟舆无所乘之。虽有甲兵无所陈之。使民复结绳而用之。甘其食、美其服、安其居、乐其俗。邻国相望，鸡犬之声相闻。民至老死不相往来。</p></li><li><p>信言不美。美言不信。善者不辩。辩者不善。知者不博。博者不知。圣人不积。既以为人己愈有。既以与人己愈多。天之道利而不害。圣人之道为而不争。 </p></li></ol><blockquote><p><a href="https://www.daodejing.org/laozi.html">老子-道德经</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-老子&quot;&gt;&lt;a href=&quot;#一-老子&quot; class=&quot;headerlink&quot; title=&quot;一. 老子&quot;&gt;&lt;/a&gt;一. 老子&lt;/h1&gt;&lt;p&gt;老子，（前600年—前470年之后）姓李名耳，字伯阳，传说老子出生时就长有白色的眉毛及胡子， 所以被后人称为老子。&lt;br</summary>
      
    
    
    
    <category term="读书学习" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="人生" scheme="http://example.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>名人-徐悲鸿-纪念馆</title>
    <link href="http://example.com/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/"/>
    <id>http://example.com/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/</id>
    <published>2022-09-04T12:12:07.000Z</published>
    <updated>2022-09-06T05:20:54.312Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">今天上午与亚林兄长来参观徐先生的展馆；我辈要向先生看齐，静下心做自己想做的事情，做到极致；</span><br><span class="line">这里整理主要生平以做备忘和自我激励</span><br></pre></td></tr></table></figure><h1 id="一-详细介绍请参考"><a href="#一-详细介绍请参考" class="headerlink" title="一. 详细介绍请参考"></a>一. 详细介绍请参考</h1><p><a href="http://www.artpc.cn/artistintroduction/274">美术百科-徐悲鸿</a></p><h1 id="二-历年珍贵影集"><a href="#二-历年珍贵影集" class="headerlink" title="二. 历年珍贵影集"></a>二. 历年珍贵影集</h1><p><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B41.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B42.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B43.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B44.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B45.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B46.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B47.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B48.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B49.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B410.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B411.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B412.jpeg" alt="img.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%8E%86%E5%B9%B413.jpeg" alt="img.png"></p><h1 id="三-代表作"><a href="#三-代表作" class="headerlink" title="三. 代表作"></a>三. 代表作</h1><ol><li><p>《奔马图》</p><p>作于1941年秋季第二次长沙会战期间。在此幅画中，徐悲鸿运用饱酣奔放的墨色勾勒头、颈、胸、腿等大转折部位，并以干笔扫出鬃尾，使浓淡干湿的变化浑然天成。马腿的直线细劲有力，犹如钢刀，力透纸背，而腹部、臀部及鬃尾的弧线很有弹性，富于动感。整体上看，画面前大后小，透视感较强，前伸的双腿和马头有很强的冲击力，似乎要冲破画面。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%A5%94%E9%A9%AC%E5%9B%BE.png" alt="奔马图"></p></li><li><p>《群马》</p><p>徐悲鸿的群马，是徐悲鸿马中的重要代表作之一。群马取材于1940年克什米尔当地的骏马，徐悲鸿当时见到此马格外兴奋，《群马》灵感油然而生。与其他作品不同的是，主要描绘了两匹背向观众的马，后面又配一匹侧向的马，为了使画面有变化，又在右边画了一匹低首觅食的马。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E7%BE%A4%E9%A9%AC.png" alt="群马"></p></li><li><p>《珍妮小姐画像》</p><p>为画家徐悲鸿最著名的油画人物肖像之一，作于1939年春夏之交，徐悲鸿时年44岁。此作品是徐悲鸿为了支持国内抗战，而在南洋举行义卖募捐时的作品。画中女子珍妮小姐，祖籍广东，为当时星洲名媛。在当时传为佳话。此画得到画筹四万新币，为这一时期与南洋募捐中画筹最多的一幅（总数为十一万一千多元新币），徐悲鸿本人也是非常满意这幅作品，特意请摄影师为其和画作拍照留念，后成为《悲鸿在星洲》一书的封面。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E7%8F%8D%E5%A6%AE%E5%B0%8F%E5%A7%90%E7%94%BB%E5%83%8F.png" alt="珍妮小姐画像.png"></p></li><li><p>《九方皋》<br>九方皋故事记载于《列子》：伯乐暮年之向秦穆推荐九方皋找千里马的故事。作品是一件非常完整和精彩的以线为主要表现手段和描绘方式的优秀的中国画作品。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E4%B9%9D%E6%96%B9%E7%9A%8B.png" alt="九方皋.png"></p></li><li><p>《田横五百士》</p><p>这幅《田横五百士》是徐悲鸿的成名大作。故事出自《史记·田儋列传》。田横是秦末齐国旧王族，继田儋之后为齐王。刘邦消灭群雄后，田横和他的五百壮士逃亡到一个海岛上。刘邦听说田横深得人心，恐日后有患，所以派使者赦田横的罪，召他回来。正是有感于田横等人”富贵不能淫，威武不能屈”的”高节”，着意选取了田横与五百壮士惜别的戏剧性场景来表现。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E7%94%B0%E6%A8%AA%E4%BA%94%E7%99%BE%E5%A3%AB.png" alt="田横五百士.png"></p></li><li><p>《负伤之狮》</p><p> 创作于1938年，当时日寇侵占了大半个中国，国土沦丧，生灵涂炭，徐悲鸿怨愤难忍。他画的负伤雄狮，回首跷望，含着无限的深意。他在画上题写：“国难孔亟时与麟若先生同客重庆相顾不怿写此以聊抒怀。”表现了作者爱国忧时的思想。这是一幅现实主义和浪漫主义结合的画作。中国被称作东方的“睡狮”，被日本帝国主义侵占了中国东北大部分国土，“睡狮”已成了负伤雄狮。这头双目怒视的负伤雄狮在不堪回首的神情中，准备战斗、拼搏，蕴藏着坚强与力量。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E8%B4%9F%E4%BC%A4%E4%B9%8B%E7%8B%AE.png" alt="负伤之狮.png"></p></li><li><p>《天高地阔任翱翔》</p><p> 徐悲鸿抗战时期作逾十一平尺巨幅飞鹰《天高地阔任翱翔》赠与星洲建筑师何光耀。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E5%A4%A9%E9%AB%98%E5%9C%B0%E9%98%94%E4%BB%BB%E7%BF%B1%E7%BF%94.png" alt="天高地阔任翱翔.png"></p></li><li><p>《愚公移山图》<br>作于1940年，1939至1940年，应印度大诗人泰戈尔之邀，徐悲鸿赴印度举办画展宣传抗日，这期间他创作了不少油画写生，但最重要的成果却是这幅《愚公移山图》国画。其故事取材于《列子·汤问》中的一个神话传说。<br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1%E5%9B%BE.png" alt="愚公移山图.png"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%84%9A%E5%85%AC%E7%A7%BB%E5%B1%B1_pro.jpeg" alt="愚公移山_pro.jpeg"></p></li></ol><h1 id="四-收藏"><a href="#四-收藏" class="headerlink" title="四. 收藏"></a>四. 收藏</h1><p><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E7%A5%9E%E4%BB%99%E5%8D%B7.jpg" alt="神仙卷.webp"></p><p>下面是收藏的 “任伯年” 作品</p><p><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E5%A5%B3%E5%A8%B2%E7%82%BC%E7%9F%B3.jpeg" alt="任伯年-女娲炼石"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E7%B4%AB%E8%97%A4%E7%BF%A0%E9%B8%9F.jpeg" alt="任伯年-紫藤翠鸟"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E8%8D%B7%E8%8A%B1.jpeg" alt="任伯年-荷花.jpeg"><br><img src="/2022/09/04/%E5%90%8D%E4%BA%BA-%E5%BE%90%E6%82%B2%E9%B8%BF-%E7%BA%AA%E5%BF%B5%E9%A6%86/%E6%94%B6%E8%97%8F%E4%BD%9C%E5%93%81/%E4%BB%BB%E4%BC%AF%E5%B9%B4-%E8%A5%BF%E6%96%BD%E6%B5%A3%E7%BA%B1.jpeg" alt="任伯年-西施浣纱.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;今天上午与亚林兄长来参观徐先生的展馆；我辈要向先生看齐，静下心做自己想做的事情，做到极致；&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="艺术" scheme="http://example.com/categories/%E8%89%BA%E6%9C%AF/"/>
    
    
    <category term="绘画" scheme="http://example.com/tags/%E7%BB%98%E7%94%BB/"/>
    
    <category term="徐悲鸿" scheme="http://example.com/tags/%E5%BE%90%E6%82%B2%E9%B8%BF/"/>
    
  </entry>
  
  <entry>
    <title>静静的健身-保持健康</title>
    <link href="http://example.com/2022/09/04/%E9%9D%99%E9%9D%99%E7%9A%84%E5%81%A5%E8%BA%AB-%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7/"/>
    <id>http://example.com/2022/09/04/%E9%9D%99%E9%9D%99%E7%9A%84%E5%81%A5%E8%BA%AB-%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7/</id>
    <published>2022-09-04T00:23:04.000Z</published>
    <updated>2022-09-04T11:36:46.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-八段锦"><a href="#一-八段锦" class="headerlink" title="一. 八段锦"></a>一. 八段锦</h3><blockquote><p>早起第一件事</p></blockquote><p><img src="/2022/09/04/%E9%9D%99%E9%9D%99%E7%9A%84%E5%81%A5%E8%BA%AB-%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7/baduanjin.png" alt="img.png"><br><a href="http://xima.tv/1_tFxuEZ?_sonic=0">喜马拉雅听音频</a><br><a href="http://xhslink.com/O80vnj">小红书视频版</a></p><h3 id="二-静坐练习"><a href="#二-静坐练习" class="headerlink" title="二. 静坐练习"></a>二. 静坐练习</h3><blockquote><p>上班休息时（有些同学可以把吸烟的时间换掉）</p></blockquote><p><a href="http://xhslink.com/N1Kvnj">南怀瑾静坐练习</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-八段锦&quot;&gt;&lt;a href=&quot;#一-八段锦&quot; class=&quot;headerlink&quot; title=&quot;一. 八段锦&quot;&gt;&lt;/a&gt;一. 八段锦&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;早起第一件事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2022</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="健康" scheme="http://example.com/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>开启我的blog-新设备</title>
    <link href="http://example.com/2022/09/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog-%E6%96%B0%E8%AE%BE%E5%A4%87/"/>
    <id>http://example.com/2022/09/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog-%E6%96%B0%E8%AE%BE%E5%A4%87/</id>
    <published>2022-09-03T23:01:04.000Z</published>
    <updated>2022-09-19T01:42:26.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-下载博客git到本地"><a href="#一-下载博客git到本地" class="headerlink" title="一. 下载博客git到本地"></a>一. 下载博客git到本地</h3><h3 id="二-安装-hexo"><a href="#二-安装-hexo" class="headerlink" title="二. 安装 hexo"></a>二. 安装 <a href="https://hexo.io/zh-cn/">hexo</a></h3><h3 id="三-当前项目目录中安装主题及node依赖包"><a href="#三-当前项目目录中安装主题及node依赖包" class="headerlink" title="三. 当前项目目录中安装主题及node依赖包"></a>三. 当前项目目录中安装主题及node依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node install</span><br><span class="line">git clone --depth 1 https://github.com/hexojs/hexo-theme-landscape themes/landscape</span><br></pre></td></tr></table></figure><h3 id="四-测试使用"><a href="#四-测试使用" class="headerlink" title="四. 测试使用"></a>四. 测试使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server </span><br></pre></td></tr></table></figure><h3 id="五-遇到的问题"><a href="#五-遇到的问题" class="headerlink" title="五. 遇到的问题"></a>五. 遇到的问题</h3><ul><li>无法deploy </li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL &#123;</span><br><span class="line">       err: Error: Spawn failed</span><br><span class="line">       at ChildProcess.&lt;anonymous&gt; (/Users/Aaron/Documents/code/github/wansongblog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">       at ChildProcess.emit (node:events:390:28)</span><br><span class="line">       at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">       code: 128</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>无法修改， 新建的文档是被锁定的</li></ul><p><img src="/2022/09/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84blog-%E6%96%B0%E8%AE%BE%E5%A4%87/new_doc_error.png" alt="img.png"></p><blockquote><p>解决办法: 修改hexo权限即可</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  wansongblog git:(master) ✗ which hexo</span><br><span class="line">/usr/local/bin/hexo</span><br><span class="line">➜  wansongblog git:(master) ✗ ll /usr/local/bin/hexo</span><br><span class="line">lrwxr-xr-x  1 root  wheel  37 Sep  4 05:24 /usr/local/bin/hexo -&gt; ../lib/node_modules/hexo-cli/bin/hexo</span><br><span class="line">➜  wansongblog git:(master) ✗ cd  /usr/local/bin/</span><br><span class="line">➜  bin cd ../lib/node_modules</span><br><span class="line">➜  node_modules sudo chmod -R 777 hexo-cli</span><br></pre></td></tr></table></figure><h3 id="六-自动化部署"><a href="#六-自动化部署" class="headerlink" title="六. 自动化部署"></a>六. 自动化部署</h3><p><a href="https://www.cnblogs.com/Helium-Air/p/15646484.html">参考</a></p>]]></content>
    
    
    <summary type="html">在一个新的设备上如何开始</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="人生" scheme="http://example.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="感悟" scheme="http://example.com/tags/%E6%84%9F%E6%82%9F/"/>
    
    <category term="疑惑" scheme="http://example.com/tags/%E7%96%91%E6%83%91/"/>
    
  </entry>
  
  <entry>
    <title>The Zen of Python, by Tim Peters</title>
    <link href="http://example.com/2022/09/03/2015-01-1-PYTHON-%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/"/>
    <id>http://example.com/2022/09/03/2015-01-1-PYTHON-%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6/</id>
    <published>2022-09-03T10:12:16.071Z</published>
    <updated>2022-09-03T10:12:16.071Z</updated>
    
    <content type="html"><![CDATA[<p>=============</p><blockquote><p>由于自己对新知识的好奇，2014年被一位朋友吸引，当时遇到他时，他是在坚持用python进行实现自己的功能。同时用的是vim进行编写，而之前我一直是用<br>IDE<br>,2015年初，我开始了解python,首先我接触到的就是</p></blockquote><pre><code>    <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">import this</span><br><span class="line"></span><br><span class="line">The Zen of Python</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*Python的原则*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Beautiful is better than ugly.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*优美胜于丑陋（Python 以编写优美的代码为目标）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Explicit is better than implicit.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Simple is better than complex.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Complex is better than complicated.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Flat is better than nested.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套） *</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Sparse is better than dense.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Readability counts.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*可读性很重要（优美的代码是可读的）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Special cases aren&#x27;t special enough to break the rules.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Although practicality beats purity.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Errors should never pass silently.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Unless explicitly silenced.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*当存在多种可能，不要尝试去猜测*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Although that way may not be obvious at first unless you&#x27;re Dutch.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Now is better than never.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Although never is often better than *</span>right* now.</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量） *</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">If the implementation is hard to explain, it&#x27;s a bad idea.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">Namespaces are one honking great idea -- let&#x27;s do more of those!</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- *</span><span class="strong">*命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---- by Tim Peters</span></span><br><span class="line"><span class="strong"></span></span><br></pre></td></tr></table></figure></code></pre><hr><ul><li>python  也用了一段时间，感觉他和javascript很像，但是只是感觉，具体哪里像，后面我会归档一下，同时也是为自己理清思路。</li><li>她与java的区别，我目前感觉两种语言，只是语法上的不同，没有感觉到非常大的差别，我也会单独整理一份这两个语言的差别。但自己学习。</li></ul><hr>]]></content>
    
    
    <summary type="html">初次接触Python</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="语言" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>POI设置表格自动换行</title>
    <link href="http://example.com/2020/09/28/POI%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/"/>
    <id>http://example.com/2020/09/28/POI%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</id>
    <published>2020-09-27T16:25:35.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在开发过程中有些同学遇到需要表格自动换行,其实poi不设置高度,设置WrapText即可</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">`        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>代码片断参考</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xssfWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Workbook finalWb = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">    XSSFSheet sheet = (XSSFSheet) finalWb.createSheet(System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    sheet.setDefaultColumnWidth(<span class="number">20</span>);</span><br><span class="line">    SheetContent content=<span class="keyword">new</span> SheetContent();</span><br><span class="line">    content.setHeaders(Lists.newArrayList(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;content&quot;</span>));</span><br><span class="line">    Map&lt;String, Object&gt; temp = Maps.newHashMap();</span><br><span class="line">    temp.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;jdk8之前为空判断使业务代码读起来比较费劲,对整体业务逻辑的理解增加困惑;&quot;</span> + <span class="string">&quot;jdk8支持了 Optional 之后 ,使用我们可以非常轻松的将原本一大块的判断代码块变成一句话;&quot;</span>);</span><br><span class="line">    temp.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;左侧是自动换行&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; temp2 = Maps.newHashMap();</span><br><span class="line">    temp2.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(filePath));&quot;</span>);</span><br><span class="line">    temp2.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;左侧是自动换行&quot;</span>);</span><br><span class="line">    content.setValues(Lists.newArrayList(temp,temp2));</span><br><span class="line">    writeSheet(sheet,content);</span><br><span class="line">    FileOutputStream bos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;异常数据.xlsx&quot;</span>);</span><br><span class="line">    finalWb.write(bos);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSheet</span><span class="params">(XSSFSheet sheet, SheetContent content)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; last= Sets.newHashSet();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.getHeaders().size(); i++) &#123;</span><br><span class="line">        writeCell(sheet,<span class="number">0</span>,i,<span class="keyword">null</span>,content.getHeaders().get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> row=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.getValues().size(); i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; contents=content.getValues().get(i);</span><br><span class="line">        ArrayList&lt;Object&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;(contents.values());</span><br><span class="line">        last.add((temp.get(<span class="number">0</span>)));</span><br><span class="line">        row++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; temp.size(); i1++) &#123;</span><br><span class="line">            Object item=temp.get(i1);</span><br><span class="line">            <span class="keyword">if</span>(item <span class="keyword">instanceof</span> Double)&#123;</span><br><span class="line">                <span class="keyword">if</span>(((Double) item).intValue()==((Double) item).doubleValue())&#123;</span><br><span class="line">                    item=((Double) item).intValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            writeCell(sheet,row,i1,<span class="keyword">null</span>,item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(last.size()+<span class="string">&quot;,&quot;</span>+last);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeCell</span><span class="params">(XSSFSheet sheet, <span class="keyword">int</span> r, <span class="keyword">int</span> l, Color color, Object value)</span> </span>&#123;</span><br><span class="line">    XSSFRow row = sheet.getRow(r);</span><br><span class="line">    <span class="keyword">if</span> (row == <span class="keyword">null</span>) &#123;</span><br><span class="line">        row = sheet.createRow(r);</span><br><span class="line">    &#125;</span><br><span class="line">    XSSFCell cell = row.getCell(l);</span><br><span class="line">    <span class="keyword">if</span> (cell == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cell = row.createCell(l);</span><br><span class="line">    &#125;</span><br><span class="line">    cell.setCellValue(value.toString());</span><br><span class="line">    XSSFCellStyle style = sheet.getWorkbook().createCellStyle();</span><br><span class="line">    <span class="keyword">if</span> (color == <span class="keyword">null</span>) &#123;</span><br><span class="line">        color = <span class="keyword">new</span> java.awt.Color(<span class="number">162</span>, <span class="number">187</span>, <span class="number">185</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    style.setFillForegroundColor(<span class="keyword">new</span> XSSFColor(color));</span><br><span class="line">    style.setVerticalAlignment(VerticalAlignment.TOP);</span><br><span class="line">    style.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line">    style.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">    cell.setCellStyle(style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SheetContent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sheetName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; headers= Lists.newArrayList();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; values=Lists.newArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(List&lt;Object&gt; cells)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; value=Maps.newLinkedHashMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</span><br><span class="line">            value.put(headers.get(i)+<span class="string">&quot;&quot;</span>,cells.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        values.add(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在开发过程中有些同学遇到需要表格自动换行,其实poi不设置高度,设置WrapText即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="jdk8.java" scheme="http://example.com/tags/jdk8-java/"/>
    
    <category term="poi" scheme="http://example.com/tags/poi/"/>
    
  </entry>
  
  <entry>
    <title>jdk_null有关判断--Optional</title>
    <link href="http://example.com/2020/09/23/jdk-null%E6%9C%89%E5%85%B3%E5%88%A4%E6%96%AD/"/>
    <id>http://example.com/2020/09/23/jdk-null%E6%9C%89%E5%85%B3%E5%88%A4%E6%96%AD/</id>
    <published>2020-09-23T13:56:13.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jdk8之前为空判断使业务代码读起来比较费劲,对整体业务逻辑的理解增加困惑;<br>jdk8支持了 Optional 之后 ,使用我们可以非常轻松的将原本一大块的判断代码块变成一句话;</p></blockquote><h3 id="正常的判空优化效果"><a href="#正常的判空优化效果" class="headerlink" title="正常的判空优化效果"></a>正常的判空优化效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.ofNullable(<span class="keyword">null</span>).orElse(<span class="string">&quot;default&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="从对象中取值时"><a href="#从对象中取值时" class="headerlink" title="从对象中取值时"></a>从对象中取值时</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String userName=<span class="keyword">null</span>;</span><br><span class="line">User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">  userName=<span class="string">&quot;username is null&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  userName=user.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优化后</span><br><span class="line"></span><br><span class="line">userName=Optional.ofNullable(user).map((temp)-&gt;temp.getName()).orElse(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">userName=Optional.ofNullable(user).flatMap(user1 -&gt; Optional.ofNullable(user1.getName())).orElse(<span class="string">&quot;happy&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;jdk8之前为空判断使业务代码读起来比较费劲,对整体业务逻辑的理解增加困惑;&lt;br&gt;jdk8支持了 Optional 之后 ,使用我们可以非常轻松的将原本一大块的判断代码块变成一句话;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;正常的判空</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="jdk8.java" scheme="http://example.com/tags/jdk8-java/"/>
    
    <category term="jdk" scheme="http://example.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Alfred Workflow快速打开idea项目</title>
    <link href="http://example.com/2020/09/20/alfred%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80idea%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2020/09/20/alfred%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80idea%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-09-20T14:19:49.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/alfred/open_idea.gif"></p><ol><li>Mac 安装Alfred</li><li>进行workflow的设置</li></ol><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">keyword--&gt;<span class="keyword">file</span> <span class="built_in">filter</span>--&gt; <span class="keyword">open</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/alfred/open_idea.gif&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mac 安装Alfred&lt;/li&gt;
&lt;li&gt;进行workflow的设置&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="日常工具" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="mac" scheme="http://example.com/tags/mac/"/>
    
    <category term="alfred" scheme="http://example.com/tags/alfred/"/>
    
    <category term="workflow" scheme="http://example.com/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://example.com/2018/04/15/redis/"/>
    <id>http://example.com/2018/04/15/redis/</id>
    <published>2018-04-15T01:23:48.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-redis-实现原理"><a href="#一-redis-实现原理" class="headerlink" title="一. redis 实现原理"></a>一. redis 实现原理</h2><h3 id="五种类型的键的底层实现数据结构"><a href="#五种类型的键的底层实现数据结构" class="headerlink" title="五种类型的键的底层实现数据结构"></a>五种类型的键的底层实现数据结构</h3><p>具体命令可参考<a href="2015/11/10/redis%E7%B4%A2%E5%BC%95/">命令</a></p><ol><li><p>SDS( simple dynamic string) 简单动态字符串</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"><span class="keyword">char</span> buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>链表</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">void</span> *value;</span><br><span class="line">&#125;listNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>&#123;</span></span><br><span class="line">listNode *head;</span><br><span class="line">listNode *tail;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line"><span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr);</span><br><span class="line"><span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr);</span><br><span class="line"><span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr,<span class="keyword">void</span> *key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典</p><p> Redis 的字典使用哈希表作为底层实现,一个哈希敷衍里面可以有多个节点,每个节点就保存了字典中的一个键值对;</p><p> 新添加一个键值对到字典里时,程序需要先根据键值对的键计算出哈希值和索引值,然后根据索引值,将包含新键值对的哈希表节点放到哈希表数组的指定索引上面.当有两个或以上数量的键被分配到哈希数组的同一个索引上面时,我们称为冲突.这里使用链地址法解决键冲突.</p><ul><li><p>哈希表</p>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span>&#123;</span></span><br><span class="line">dictEntry **table;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  sizemask 值和哈希值一起决定一个键应该被放到table数组的哪个索引上面.</p></li><li><p>哈希表节点</p>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span>&#123;</span></span><br><span class="line"><span class="keyword">void</span> *key;</span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line"><span class="keyword">void</span> *val;</span><br><span class="line">uint64_tu64;</span><br><span class="line">int64_ts64;</span><br><span class="line">&#125; v;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span> <span class="comment">//解决键冲突的问题</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure></li><li><p>字典</p>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span>&#123;</span></span><br><span class="line">dictType *type; <span class="comment">//类型特定函数</span></span><br><span class="line"><span class="keyword">void</span> *privdata;<span class="comment">//私有数据</span></span><br><span class="line">dictht ht[<span class="number">2</span>];<span class="comment">//哈希表</span></span><br><span class="line"><span class="keyword">int</span> trehashidx;<span class="comment">//索引</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure></li><li><p>rehash(实际过程,是渐进式的)</p><p>  当哈希表中键值的数量太多或太少时,为了让哈希表的负载因子维持在一个合理的范围之内,程序需要对哈希表的大小进行相应的扩展或者收缩.</p><ol><li><p>为字段的ht[1]哈希表分配空间,这个空间大小取决于要执行的操作,以及ht[0]当前包含的键值对数量</p><ol><li>如果是扩展操作,那么大小为第一个大于等于ht[0].used*2的2的n次方</li><li>如果执行的是收缩操作,那么ht[1]的大小为第一个大于等于ht[0].used的2的n次方</li></ol></li><li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面:rehash指重新计算键的哈希值和索引值,然后将键值对放置到ht[1]哈希表的指定位置上</p></li><li><p>将ht[0]释放空间,同时将ht[0]和ht[1]换位置</p><p>何时进行扩展和收缩<br>负载因子= ht[0].used(已保存的节点数量)/哈希表的大小</p><p>当负载因子大于 5 (待确认),或&lt;0.1 时</p></li></ol></li></ul></li><li><p><a href="http://daoluan.net/%E6%9C%AA%E5%88%86%E7%B1%BB/2014/06/26/decode-redis-data-struct-skiplist.html">跳跃表</a></p><p> skiplist 是一种有序的数据结构,它通过在每个节点中维持多个指向其他节点的指针,从而达到快速访问节点的目的.<br> redis在以下两个地方用到了跳跃表:</p><ol><li>有序集合键 zset</li><li>在集群节点中用途内部数据结构</li></ol></li><li><p>整数集合</p><p> intset 是集合键的底层实现之一,当一个集合只包含整数值元素,并且这个集合的元素数量不多时,Redis就会使用整数集合作为集合键的底层实现.</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD numbers 1 3 5 6 7</span><br><span class="line">(integer) 5</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;intset&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd numbers 0943890384093845903845094385</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers numbers</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;0943890384093845903845094385&quot;</span><br><span class="line">3) &quot;7&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;6&quot;</span><br><span class="line">6) &quot;1&quot;</span><br><span class="line">7) &quot;9&quot;</span><br><span class="line">8) &quot;5&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING numbers</span><br><span class="line">&quot;hashtable&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="每当我们要将一个新元素添加到整数集合里面-并且新元素的类型比整数集合现有的所有元素的类型都要长时-整数集合需要先进行升级-然后才能将新元素添加到整数集合里面-请记住-这里不会降级的"><a href="#每当我们要将一个新元素添加到整数集合里面-并且新元素的类型比整数集合现有的所有元素的类型都要长时-整数集合需要先进行升级-然后才能将新元素添加到整数集合里面-请记住-这里不会降级的" class="headerlink" title=" 每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有的所有元素的类型都要长时,整数集合需要先进行升级,然后才能将新元素添加到整数集合里面,请记住,这里不会降级的"></a> 每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有的所有元素的类型都要长时,整数集合需要先进行升级,然后才能将新元素添加到整数集合里面,请记住,这里不会降级的</h2><p> 其是Redis保存整数值的集合抽象数据结构,它可以保存int16_t,int32_t,int64_t的整数值,并且保证集合中不会出现重复元素.</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span>&#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> encoding;<span class="comment">//编码方式 INTSET_ENC_INT16,INTSET_ENC_INT32,INTSET_ENC_INT64</span></span><br><span class="line"><span class="keyword">uint32_t</span> length;<span class="comment">//集合包含的元素数量</span></span><br><span class="line"><span class="keyword">int8_t</span> contents[]; <span class="comment">//保存元素的数组,数组中按值的大小从小到大有序排列,并且数组中不包含任何重复项;其真正的类型取决于encoding属性的值:</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>压缩列表<br> ziplist,是列表键和哈希键的底层实现之一.当一个列表键只包含少量列表项,并且每个列表项要么就是小整数值,要么就是长度比较短的字符串,那么Redis就会使用压缩列表来做列表键的底层实现.</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush kdf djf f df d f d f &quot;sdf&quot;</span><br><span class="line">(integer) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING kdf</span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p> 压缩列表是为了节约内存而开发的,是由一系列特殊的连续内存块组成的顺序型数据结构.一个压缩列表可以包含任意多个节点,每个节点可以保存一个字节数组或者一个整数值.</p></li></ol><h3 id="对象处理机制以及数据库的实现原理"><a href="#对象处理机制以及数据库的实现原理" class="headerlink" title="对象处理机制以及数据库的实现原理"></a>对象处理机制以及数据库的实现原理</h3><ol><li><p>导入</p><ol><li>Redis 基于这些数据结构创建一个对象系统,其包含 字符串,列表对象,哈希对象,集合对象和有序集合对象 五种类型的对象,每种对象都至少一种我们前面所介绍的数据结构.</li><li>使用对象的好处,我们可以针对不同的使用场景,为对象设置多种不同的数据结构pugmww而优化对象在不同场景下的使用效率.</li><li>对象系统基于引用计数技术的内存回收机制,当程序不再使用某个对象的时候,这个对象所战胜的内存就会被自动释放;另外,Redis还通过引用计数技术实现了对象共享机制,这一机制可以在适当的条件下,通过让多个数据库键共享同一个对象来节约内存.</li><li>对象带有访问时间记录信息,该信息可以用于计算数据库的空转时长 ,在服务器启用了maxmemory功能的情况下,空转时长较大的那些键可能会优先被服务器删除.</li></ol></li><li><p>对象的类型和编码 type</p><p> Redis使用对象来表示数据库中的键值,每次我们在库中新创建一个键值对时,我们至少会创建两个对象,一个是键对象,另一个是值对象.</p> <figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set name aaron</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;aaron&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; OBJECT ENCODING name</span><br><span class="line"><span class="string">&quot;embstr&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; type name</span><br><span class="line">string</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; OBJECT idletime name</span><br><span class="line">(integer) <span class="number">46</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p> 每一个对象都由一个redisObject结构表示,该结构中和保存数据有关的三个属性分别是type属性,encoding属性和ptr属性:</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line"><span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line"><span class="keyword">void</span> *ptr;<span class="comment">//每日向底层实现数据结构的指针</span></span><br><span class="line"><span class="keyword">int</span> refcount;<span class="comment">//引用计数</span></span><br><span class="line"><span class="keyword">unsigned</span> lru:<span class="number">22</span>;<span class="comment">//该对象最后一次被访问的时间</span></span><br><span class="line">&#125;robj;</span><br></pre></td></tr></table></figure><p> type记录了对象的类型,这个属性的值有 string,list,hash,set,zset</p></li><li><p>编码和底层实现  OBJECT ENCODING<br> 对象的ptr指针指向对象的底层实现数据结构,而这些数据结构由对象的encoding属性决定.也就是说这个对象使用了什么数据结构作为对象的底层实现,这个属性值可以是</p> <figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">int (<span class="name">long</span> 类型)</span><br><span class="line">embstr (<span class="name">embstr</span>编码的简单动态字符串)</span><br><span class="line">raw (简单动态字符串)</span><br><span class="line">ht (字典)</span><br><span class="line">linkedlist (双端链表)</span><br><span class="line">ziplist (压缩链表)</span><br><span class="line">intset (整数集合)</span><br><span class="line">skiplist (跳跃链表和字典)</span><br></pre></td></tr></table></figure><p> 每种类型对象都至少使用了两种不同的编码.</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">string int/embstr/raw</span><br><span class="line">list ziplist/linkedlist</span><br><span class="line">hash ziplist/ht</span><br><span class="line"><span class="builtin-name">set</span>  intset/ht</span><br><span class="line">zset  ziplist/skiplist</span><br></pre></td></tr></table></figure></li><li><p>数据共享 只共享0-9999的字符串对象</p> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET a <span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; OBJECT <span class="built_in">ref</span>count a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; OBJECT <span class="built_in">ref</span>count a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET b <span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; OBJECT <span class="built_in">ref</span>count a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="单机数据库的实现"><a href="#单机数据库的实现" class="headerlink" title="单机数据库的实现"></a>单机数据库的实现</h3><ol><li><p>在redisServer结构的db数组中,每个redisDb 结构代表一个数据库,启动服务器时,服务器会根据dbnum来决定应该创建多少个数据库:</p> <figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">struct redisServer&#123;</span><br><span class="line"><span class="meta">...</span></span><br><span class="line">redisDb *db;</span><br><span class="line">int dbnum;</span><br><span class="line"><span class="meta">...</span></span><br><span class="line">&#125;redisClient</span><br></pre></td></tr></table></figure><p> 客户端可以根据命令select来进行切换目标数据库</p></li><li><p>数据库键空间</p><p> 是一个键值对数据库服务器,其中每个数据库都由一个redisDb结构表示,其中redisDb结构的dict字典保存了数据库中的所有键值对,我们称这个字典为 键空间<br> typedef struct redisDb{<br> dict *dict;<br> dict *expires;  key 是对象,value 是过期时间<br> }redisDb</p></li><li><p>设置生存时间或过期时间</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name wansong</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire name 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;wansong&quot;</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>数据库通知<br> 2.8 新版本中增加的功能,可以通过订阅给它的频道或者模式,来获知数据库中键的变化.及数据库中命令的执行情况.</p></li></ol><h3 id="RDB-持久化和-AOF-持久化的实现原理"><a href="#RDB-持久化和-AOF-持久化的实现原理" class="headerlink" title="RDB 持久化和 AOF 持久化的实现原理"></a>RDB 持久化和 AOF 持久化的实现原理</h3><p>RDB持久化功能,可以将Redis在内存中的数据库状态保存到磁盘里面,避免数据意外丢失.也可以根据服务器配置选项定期执行.<br>该功能可以将某个时间点上的数据库状态保存到一个RDB文件中.该文件是一个经过压缩的二进制文件,通过该文件可以还原生成RDB文件时的数据库状态.</p><ol><li><p>RDB文件的创建与载入</p><p> save 命令会阻塞Redis服务器进程,直到RDB文件创建完毕为止,在服务器进程阻塞期间,服务器不处理任务命令请求.</p><p> bgsave background saving started 该命令会派生出一个子进程,然后由子进程负责创建RDB文件,服务器进程继续处理命令请求</p><p> 创建文件的实际工作由rdbSave函数完成,save和bgsave命令会以不同的方式调用这个函数.</p><p> RDB文件的载入是自动的,当程序启动时会自动载入,另外注意AOF文件的更新频率通常比RDB高,所以:</p><ol><li><p>如果服务器开启了AOF持久化功能,那么服务器会优先使用AOF文件还原数据库状态</p></li><li><p>只有在AOF持久化功能处于关闭状态时,服务器才会使用RDB文件来还原数据库状态.</p><p>载入RDB文件的实际工作由rdbLoad函数完成;文件载入时服务器处于阻塞状态.</p></li></ol></li><li><p>自动间隔性保存</p><p>可以通过save选项设置多个保存条件,但只要其中任意一个条件被满足,服务器就会执行bgsave.</p><p>save 900 1  服务器900秒之内,对数据库进行至少一次修改,就进行bgsave</p></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="Redis-基于-Reactor模式开发的网络事件处理器-称作-文件事件处理器-File-Event-Handler"><a href="#Redis-基于-Reactor模式开发的网络事件处理器-称作-文件事件处理器-File-Event-Handler" class="headerlink" title="Redis 基于 Reactor模式开发的网络事件处理器,称作 文件事件处理器 (File Event Handler)"></a>Redis 基于 Reactor模式开发的网络事件处理器,称作 文件事件处理器 (File Event Handler)</h4><ol><li>使用I/O多路复用程序来同时监听多个套接字,并根据目前执行的任务来为套接字关联不同的事件</li><li>当被监听的套接字准备好执行连接应答,读取,写入,关闭 等操作时,与其对应的文件事件就会产生,这时1中注册好的事件处理器就来进行处理这些事件</li></ol><h4 id="时间事件-id-when-handlers"><a href="#时间事件-id-when-handlers" class="headerlink" title="时间事件 id/when/handlers"></a>时间事件 id/when/handlers</h4><ol><li>定时事件</li><li>周期性事件</li></ol><h3 id="事务实现原理-ACID"><a href="#事务实现原理-ACID" class="headerlink" title="事务实现原理 ACID"></a>事务实现原理 ACID</h3><h3 id="ServerCron函数"><a href="#ServerCron函数" class="headerlink" title="ServerCron函数"></a>ServerCron函数</h3><blockquote><blockquote><p>服务器 默认每100毫秒执行一次</p></blockquote></blockquote><ol><li>更新服务器时间缓存</li><li>更新LRU时钟(如 Redis对象都会有一个LRU属性,这个属性保存了对象最后一次被命令访问的时间)</li><li>更新服务器每秒执行命令的次数(INFO status)</li><li>更新服务器内存峰值记录</li><li>处理SIGTERM信号 每次运行时,程序会对服务器状态的shutdown_asap属性进行检查,看是否要关闭服务器</li><li>管理客户端资源: 已超时 或 是否清理输出缓冲区</li><li>管理数据库资源: 删除过期键,并在需要时 对字典进行收缩操作</li><li>检查持久化操作的运行状态</li><li>将AOF缓冲区的内容写入到AOF文件</li><li>关闭异步客户端</li><li>增加cronloops计数器的值</li></ol><h3 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h3><p>初始化服务器状态结构,载入配置选项,还原数据库状态,执行事件循环</p><h3 id="订阅与发布实现原理"><a href="#订阅与发布实现原理" class="headerlink" title="订阅与发布实现原理"></a>订阅与发布实现原理</h3><h3 id="Lua-脚本功能的实现原理。"><a href="#Lua-脚本功能的实现原理。" class="headerlink" title="Lua 脚本功能的实现原理。"></a>Lua 脚本功能的实现原理。</h3><h3 id="SORT-命令的实现原理。"><a href="#SORT-命令的实现原理。" class="headerlink" title="SORT 命令的实现原理。"></a>SORT 命令的实现原理。</h3><h3 id="慢查询日志的实现原理。-打开慢查询-查看日期-SLOWLOG-GET"><a href="#慢查询日志的实现原理。-打开慢查询-查看日期-SLOWLOG-GET" class="headerlink" title="慢查询日志的实现原理。 打开慢查询,查看日期 SLOWLOG GET"></a>慢查询日志的实现原理。 打开慢查询,查看日期 SLOWLOG GET</h3><h3 id="高并发如何做到"><a href="#高并发如何做到" class="headerlink" title="高并发如何做到"></a>高并发如何做到</h3><pre><code>虽是单线程单进行,但 使用I/O多路复用(select/epoll,evport,kqueue)程序来同时监听多个套接字 的方式来处理命令请求,并与多个客户端进行通信.</code></pre><h2 id="二-redis-主要关注点"><a href="#二-redis-主要关注点" class="headerlink" title="二. redis 主要关注点"></a>二. redis 主要关注点</h2><h3 id="redis-为什么是单线程"><a href="#redis-为什么是单线程" class="headerlink" title="redis 为什么是单线程"></a><a href="https://blog.csdn.net/qqqqq1993qqqqq/article/details/77538202">redis 为什么是单线程</a></h3><h3 id="redis-过期索引是如何做到的"><a href="#redis-过期索引是如何做到的" class="headerlink" title="redis 过期索引是如何做到的"></a>redis 过期索引是如何做到的</h3><ol><li><p>redis 的存储结构</p></li><li><p>删除策略</p> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>定时删除:在设置键的过期时间的同时,创建一个定时器,让定时器在键的过期时间来临时,立即对键执行删除操作(对内存友好,最及时)</span><br><span class="line"><span class="bullet">* </span>定期删除:每一段时间,进行数据库过期索引的扫瞄,将已经过期的键 进行删除; 至于删除多少过期键和检查哪些数据库,都由算法决定</span><br><span class="line"><span class="bullet">* </span>惰性删除: 每次取键时,校验一下是否过期,若已经过期 就进行删除</span><br><span class="line"></span><br><span class="line">其实最终使用的是 定期和惰性 两个策略 配合实现</span><br></pre></td></tr></table></figure><h3 id="redis-服务器配置"><a href="#redis-服务器配置" class="headerlink" title="redis 服务器配置"></a><a href="https://www.cnblogs.com/joshua317/p/5635297.html">redis 服务器配置</a></h3><h3 id="redis-有哪些功能"><a href="#redis-有哪些功能" class="headerlink" title="redis 有哪些功能"></a><a href="">redis 有哪些功能</a></h3><h3 id="redis-如何Failover"><a href="#redis-如何Failover" class="headerlink" title="redis 如何Failover()"></a>redis 如何Failover()</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">哨兵（Sentinel）和复制（<span class="keyword">Replication</span>）</span><br><span class="line">Sentinel可以管理多个Redis服务器，它提供了监控，提醒以及自动的故障转移的功能；<span class="keyword">Replication</span>则是负责让一个Redis服务器可以配备多个备份的服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="redis-目前流程的实施架构有哪些"><a href="#redis-目前流程的实施架构有哪些" class="headerlink" title="redis 目前流程的实施架构有哪些"></a>redis 目前流程的实施架构有哪些</h3><ol><li>哨兵Sentinel,复制（replication）</li><li>集群（cluster）</li></ol><h2 id="三-redis-应用场景"><a href="#三-redis-应用场景" class="headerlink" title="三. redis 应用场景"></a>三. <a href="https://www.cnblogs.com/NiceCui/p/7794659.html">redis 应用场景</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://item.jd.com/11486101.html">Redis设计与实现</a></li></ol>]]></content>
    
    
    <summary type="html">Java redis</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>微服务相关概念</title>
    <link href="http://example.com/2018/04/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2018/04/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</id>
    <published>2018-04-14T00:53:22.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务治理基本概念"><a href="#服务治理基本概念" class="headerlink" title="服务治理基本概念"></a>服务治理基本概念</h2><ol><li>服务的伸缩控制</li><li>身份验证与授权 *</li><li>服务注册与发现 *</li><li>反向代理与负载均衡</li><li>路由控制 *</li><li>流量切换 *</li><li>日志管理 *</li><li>性能度量、监控与调优 *</li><li>分布式跟踪 *</li><li>过载保护 *</li><li>服务降级 *</li><li>服务部署与版本升级策略支持 *</li><li>错误处理 *</li><li>国际化</li></ol><h3 id="服务的伸缩控制"><a href="#服务的伸缩控制" class="headerlink" title="服务的伸缩控制"></a>服务的伸缩控制</h3><h3 id="身份验证与授权"><a href="#身份验证与授权" class="headerlink" title="身份验证与授权"></a>身份验证与授权</h3><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><ol><li>dubbo zookeeper</li></ol><h3 id="反向代理与负载均衡"><a href="#反向代理与负载均衡" class="headerlink" title="反向代理与负载均衡"></a>反向代理与负载均衡</h3><ol><li>vertx</li><li>nginx</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务治理基本概念&quot;&gt;&lt;a href=&quot;#服务治理基本概念&quot; class=&quot;headerlink&quot; title=&quot;服务治理基本概念&quot;&gt;&lt;/a&gt;服务治理基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;服务的伸缩控制&lt;/li&gt;
&lt;li&gt;身份验证与授权 *&lt;/li&gt;
&lt;li&gt;服务注册</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="分布式" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="服务治理" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CAP" scheme="http://example.com/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://example.com/2018/03/29/%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2018/03/29/%E6%8E%92%E5%BA%8F/</id>
    <published>2018-03-29T00:04:24.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    
    <summary type="html">如:各种排序实现</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二分法查找及扩展</title>
    <link href="http://example.com/2018/03/29/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    <id>http://example.com/2018/03/29/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E5%8F%8A%E6%89%A9%E5%B1%95/</id>
    <published>2018-03-28T23:59:02.000Z</published>
    <updated>2022-09-03T10:12:16.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h2><blockquote><blockquote><p>给一个有序数组,查找出k所在位置</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Aaron</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 6.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheFirstLessThan100</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> middleValue = array[middle];</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (middleValue &lt; value) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleValue &gt; value) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;times:%d,index:%d,value:%d\n&quot;</span>, count, middle, value);</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = find(array, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查出第一个大于N的位置"><a href="#查出第一个大于N的位置" class="headerlink" title="查出第一个大于N的位置"></a>查出第一个大于N的位置</h2><blockquote><blockquote><p>从有序的数组中,找出第一个大于N的数字的位置</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstBigIndex</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastBigIndex=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> middleValue = array[middle];</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (middleValue &lt;= value) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleValue &gt; value) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">                lastBigIndex=middle;</span><br><span class="line">                System.out.printf(<span class="string">&quot;times:%d,index:%d,value:%d,middle:%d\n&quot;</span>, count, middle, value,middleValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastBigIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstBigIndex1</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> middleValue = array[middle];</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (middleValue &lt;= value) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleValue &gt; value) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">                System.out.printf(<span class="string">&quot;times:%d,index:%d,value:%d,middle:%d\n&quot;</span>, count, middle, value,middleValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">34</span>,<span class="number">324</span>,<span class="number">546</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = findFirstBigIndex1(array, i);</span><br><span class="line">            <span class="keyword">int</span> index2 = findFirstBigIndex(array, i);</span><br><span class="line">            System.out.println(index+<span class="string">&quot;--&quot;</span>+index2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如:实现二分法查找,查找第一个大于N的值</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="查找" scheme="http://example.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>微信头像九宫格算法</title>
    <link href="http://example.com/2018/03/25/%E5%BE%AE%E4%BF%A1%E5%A4%B4%E5%83%8F%E4%B9%9D%E5%AE%AB%E6%A0%BC%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2018/03/25/%E5%BE%AE%E4%BF%A1%E5%A4%B4%E5%83%8F%E4%B9%9D%E5%AE%AB%E6%A0%BC%E7%AE%97%E6%B3%95/</id>
    <published>2018-03-25T02:46:33.000Z</published>
    <updated>2022-09-03T10:12:16.077Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>分别计算1-9个头像在九宫格中的位置</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ImageCell&gt; <span class="title">createMergeCell</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> totalWidth)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> totalRow = (<span class="keyword">int</span>) Math.ceil(Math.sqrt(n));</span><br><span class="line">      <span class="keyword">int</span> outline = <span class="number">5</span>;</span><br><span class="line">      <span class="keyword">int</span> width = ((totalWidth - outline) / totalRow);</span><br><span class="line">      <span class="keyword">int</span> border = width / <span class="number">20</span>;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> Lists.newArrayList(<span class="keyword">new</span> ImageCell(border, border, width - <span class="number">2</span> * border));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> lastAloneNum = n % totalRow;</span><br><span class="line">      <span class="keyword">int</span> totalFullRow = n / totalRow;</span><br><span class="line">      <span class="keyword">int</span> lastRow = totalRow - totalFullRow - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> firstStartX = (totalWidth - lastAloneNum * width) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">int</span> firstStartY = lastRow * width;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> otherSpace = (totalWidth - totalRow * width) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">int</span> yOffset = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (totalRow != totalFullRow + (lastAloneNum != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) &#123;</span><br><span class="line">          yOffset = -width / <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      List&lt;ImageCell&gt; imageCells = Lists.newArrayList();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">int</span> x = <span class="number">0</span>, y = firstStartY;</span><br><span class="line">          <span class="keyword">if</span> (i &lt; lastAloneNum) &#123;</span><br><span class="line">              x = firstStartX + i * width;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              x = (i - lastAloneNum) % totalRow * width;</span><br><span class="line">              y = firstStartY + ((i - lastAloneNum) / totalRow + <span class="number">1</span>) * width;</span><br><span class="line">          &#125;</span><br><span class="line">          imageCells.add(<span class="keyword">new</span> ImageCell(x + border + otherSpace, y + border + otherSpace + yOffset, width - <span class="number">2</span> * border));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> imageCells;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="meta">@AllArgsConstructor</span></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCell</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">int</span> y;</span><br><span class="line">      <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-------------------n=1---------------------</span><br><span class="line">x:7,y:7,width:131</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=2---------------------</span><br><span class="line">x:6,y:42,width:66</span><br><span class="line">x:78,y:42,width:66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=3---------------------</span><br><span class="line">x:45,y:6,width:66</span><br><span class="line">x:6,y:78,width:66</span><br><span class="line">x:78,y:78,width:66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=4---------------------</span><br><span class="line">x:6,y:6,width:66</span><br><span class="line">x:78,y:6,width:66</span><br><span class="line">x:6,y:78,width:66</span><br><span class="line">x:78,y:78,width:66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=5---------------------</span><br><span class="line">x:32,y:29,width:44</span><br><span class="line">x:80,y:29,width:44</span><br><span class="line">x:5,y:77,width:44</span><br><span class="line">x:53,y:77,width:44</span><br><span class="line">x:101,y:77,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=6---------------------</span><br><span class="line">x:5,y:29,width:44</span><br><span class="line">x:53,y:29,width:44</span><br><span class="line">x:101,y:29,width:44</span><br><span class="line">x:5,y:77,width:44</span><br><span class="line">x:53,y:77,width:44</span><br><span class="line">x:101,y:77,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=7---------------------</span><br><span class="line">x:56,y:5,width:44</span><br><span class="line">x:5,y:53,width:44</span><br><span class="line">x:53,y:53,width:44</span><br><span class="line">x:101,y:53,width:44</span><br><span class="line">x:5,y:101,width:44</span><br><span class="line">x:53,y:101,width:44</span><br><span class="line">x:101,y:101,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=8---------------------</span><br><span class="line">x:32,y:5,width:44</span><br><span class="line">x:80,y:5,width:44</span><br><span class="line">x:5,y:53,width:44</span><br><span class="line">x:53,y:53,width:44</span><br><span class="line">x:101,y:53,width:44</span><br><span class="line">x:5,y:101,width:44</span><br><span class="line">x:53,y:101,width:44</span><br><span class="line">x:101,y:101,width:44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------n=9---------------------</span><br><span class="line">x:5,y:5,width:44</span><br><span class="line">x:53,y:5,width:44</span><br><span class="line">x:101,y:5,width:44</span><br><span class="line">x:5,y:53,width:44</span><br><span class="line">x:53,y:53,width:44</span><br><span class="line">x:101,y:53,width:44</span><br><span class="line">x:5,y:101,width:44</span><br><span class="line">x:53,y:101,width:44</span><br><span class="line">x:101,y:101,width:44</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如:分别计算1-9个头像在九宫格中的位置</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>取一个数字二进制中1的个数</title>
    <link href="http://example.com/2018/03/24/%E5%8F%96%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://example.com/2018/03/24/%E5%8F%96%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2018-03-24T12:10:29.000Z</published>
    <updated>2022-09-03T10:12:16.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><ol><li><p>二进制中1的个数</p><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> (n&gt;<span class="number">0</span>)  &#123;</span><br><span class="line">        count++ ;</span><br><span class="line">        n &amp;= (n - <span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 复杂度: &lt; log2n</code></pre></li><li><p>方案二</p><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of one-bits in the two&#x27;s complement binary</span></span><br><span class="line"><span class="comment"> * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.  This function is</span></span><br><span class="line"><span class="comment"> * sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i the value whose bits are to be counted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of one-bits in the two&#x27;s complement binary</span></span><br><span class="line"><span class="comment"> *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HD, Figure 5-2</span></span><br><span class="line">    i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> 复杂度: 1</code></pre></li><li><p>方案三</p><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countBit1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp&lt;=n)  &#123;</span><br><span class="line">        <span class="keyword">if</span>((temp&amp;n)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            count++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>给定一个数字n计算从1到n每一个数字的二进制中包含1的个数</li></ol><pre><code>        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> div = i / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> mod = i % <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mod == <span class="number">1</span>) &#123;</span><br><span class="line">                ret[i] = ret[div] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ret[i] = ret[div];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><!--```flow--><!--st=>start: Start|past:>http://www.google.com[blank]--><!--e=>end: End:>http://www.google.com--><!--op1=>operation: My Operation|past--><!--op2=>operation: Stuff|current--><!--sub1=>subroutine: My Subroutine|invalid--><!--cond=>condition: Yes--><!--or No?|approved:>http://www.google.com--><!--c2=>condition: Good idea|rejected--><!--io=>inputoutput: catch something...|request--><!--st->op1(right)->cond--><!--cond(yes, right)->c2--><!--cond(no)->sub1(left)->op1--><!--c2(yes)->io->e--><!--c2(no)->op2->e--><!--```-->]]></content>
    
    
    <summary type="html">如:2---&gt;10---&gt;1,5---&gt;101---&gt;2</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
